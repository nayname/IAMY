Below is an example JSON configuration showing how you might deploy an Andromeda application that includes both:

• A CW721 component (for minting NFTs).  
• A Marketplace component (for selling those NFTs), configured to accept the native ANDR token (uandr).  

You should replace the placeholder addresses (andr1xyz...) with the actual addresses you plan to use in your environment.

--------------------------------------------------------------------------------
{
  "app_name": "MyAndromedaNFTMarket",
  "description": "An application that mints NFTs and sells them for the native ANDR token (uandr).",
  "components": [
    {
      "id": "my_cw721",
      "type": "cw721",
      "version": "1.0.0",
      "instantiate_msg": {
        "name": "MyNFTCollection",
        "symbol": "MNFT",
        "minter": "andr1xyzminter...",           // Address allowed to mint NFTs
        "kernel_address": "andr1xyzkernel...",    // Your kernel contract address
        "owner": "andr1xyzowner..."               // Optionally specify an owner
      }
    },
    {
      "id": "my_marketplace",
      "type": "marketplace",
      "version": "2.3.0",
      "instantiate_msg": {
        "authorized_cw20_address": null,           // Null means no specific CW20 is required, 
                                                   // allowing native uandr payments
        "authorized_token_addresses": [
          "andr1xyzcw721..."                      // CW721 contract address; 
                                                   // use your newly deployed CW721 if you only want 
                                                   // those tokens sold here
        ],
        "kernel_address": "andr1xyzkernel...",     // Same kernel address for AMP messaging
        "owner": "andr1xyzowner..."                // Optionally specify an owner
      }
    }
  ]
}
--------------------------------------------------------------------------------

Explanation:

1. "my_cw721" Component (CW721)
   • "instantiate_msg.name" and "instantiate_msg.symbol": Customize the name and symbol for your NFT collection.
   • "minter": Specify the address permitted to mint new NFTs.  
   • "kernel_address": The kernel contract you intend to use for Andromeda Protocol messaging (AMP).  
   • "owner": (Optional) If you want a distinct owner address for this module, provide one here.  

2. "my_marketplace" Component (Marketplace 2.3.0)
   • "authorized_cw20_address": Set to null so that no CW20 token is strictly required—this means you can sell NFTs for native tokens (e.g., uandr).  
   • "authorized_token_addresses": If you want to restrict which NFTs can be sold here, provide the CW721 contract address (once deployed). Listing that address means only NFTs minted by that contract can be sold in this marketplace.  
   • "kernel_address": Same kernel contract for consistent messaging across your app.  
   • "owner": (Optional) Provide an owner address if you want a particular wallet to have ownership privileges over this marketplace module.  

Selling Your NFTs in uandr:
• After deploying these contracts, you (or the NFT holder) would typically call the marketplace ExecuteMsg (e.g., "ReceiveNft" → "StartSale") specifying "coin_denom": { "native_token": "uandr" } and a desired "price". This ensures the marketplace will only accept the native ANDR token (uandr) for those sales.

With the above configuration, you will have a two-module Andromeda application capable of minting NFTs and listing them for sale in the native ANDR currency (uandr).