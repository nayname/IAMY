Below is an example of an Andromeda Protocol–style application schema that instantiates a CW721 contract to mint 100 NFTs, and a Marketplace contract listing each NFT for sale at 100000 ustars for 2 hours. Note that you will need to customize addresses (e.g., owner, kernel_address) and possibly add/remove other fields to match your environment.

-------------------------------------------------------------------------------
APPLICATION SCHEMA EXAMPLE
-------------------------------------------------------------------------------
{
  "version": "1.0.0",
  "contracts": [
    {
      "id": "my_nft_collection",
      "type": "cw721",
      "instantiate": {
        "name": "My 100 NFTs",
        "symbol": "M100",
        "minter": "andr1owner...", 
        "kernel_address": "andr1kernel...",
        "owner": "andr1owner..." 
      },
      "execute": [
        {
          "batch_mint": {
            "tokens": [
              {
                "token_id": "1",
                "owner": "andr1owner...",
                "token_uri": "https://example.com/metadata/1.json",
                "extension": {
                  "publisher": "MyPublisher"
                }
              },
              {
                "token_id": "2",
                "owner": "andr1owner...",
                "token_uri": "https://example.com/metadata/2.json",
                "extension": {
                  "publisher": "MyPublisher"
                }
              }
              /* ... repeat for all token_id values up to "100" ... */
            ]
          }
        }
      ]
    },
    {
      "id": "my_marketplace",
      "type": "marketplace",
      "instantiate": {
        "authorized_cw20_address": null,
        "authorized_token_addresses": [
          /* The CW721 contract we just created. 
             Replace with the actual address or 
             an internal reference to "my_nft_collection". */
          "andr1cw721_of_my_nft_collection"
        ],
        "kernel_address": "andr1kernel...",
        "owner": "andr1owner..."
      },
      "execute": [
        /*  
          For each of the 100 NFTs, you would send the NFT
          to the marketplace with a StartSale message
          in base64. Below is an example for token_id = "1".
          Adjust "sender", "recipient" (if needed), and 
          base64-encoded sale data for each token.
        */
        {
          "send_nft": {
            "contract": "my_marketplace_contract_address", 
            "token_id": "1",
            "msg": "ewoJInN0YXJ0X3RpbWUiOiAiMCIsCgkiZW5kX3RpbWUiOiAiNzIwMCIsCgkiaXNCdXllclBheWluZyI6IGZhbHNlLAoJInByaWNlIjogIjEwMDAwMCIsCgkiY29pbl9kZW5vbSI6IHsKCQkibmF0aXZlX3Rva2VuIjogInVzdGFycyIKCX0sCgkiaW5pdGlhbF9vd25lciI6ICJhbmRyMXNlbGxlci4uLiIsCgkicmVjaXBpZW50IjogImFuZHIxb3duZXIuLi4iCn0="
          }
        }
        /* ... repeat the above send_nft for each token_id = 2..100, 
           adjusting the same base64 data or generating new 
           base64 if you need custom times/prices. ... */
      ]
    }
  ]
}

-------------------------------------------------------------------------------
DETAILS & NOTES
-------------------------------------------------------------------------------
1) CW721 Contract  
   • Instantiated with the name “My 100 NFTs” and symbol “M100.”  
   • Minter and owner set to "andr1owner..." (adjust as needed).  
   • Uses batch_mint to create 100 NFTs in a single transaction.  
   • Each token_id has a token_uri pointing to metadata and an extension with your preferred publisher field.

2) Marketplace Contract  
   • Instantiated to accept the native token “ustars” (you do not need to set authorized_cw20_address since it’s null).  
   • authorized_token_addresses includes the CW721 address you just created so that NFTs from that collection can be listed.  
   • start_time = 0 and end_time = 7200 (2 hours in seconds).  
   • Price = "100000", with coin_denom.native_token = "ustars".  
   • The “msg” in “send_nft” is base64-encoded JSON representing the StartSale data the Marketplace needs.  
   • You would repeat an identical or similar send_nft message for each of the 100 tokens, ensuring each is listed at the desired price and duration.

3) Adjusting the sale times  
   • If you want a dynamic start_time or end_time, you can encode those times in the base64 message. The above example uses 0 (immediate) and 7200 (2 hours after start).  

4) Base64-encoded JSON in msg  
   • The plain JSON might look like:  
     {
       "start_time": "0",
       "end_time": "7200",
       "isBuyerPaying": false,    // optional depending on your implementation
       "price": "100000",
       "coin_denom": {
         "native_token": "ustars"
       },
       "initial_owner": "andr1seller...",
       "recipient": "andr1owner..."
     }  
   • Encode that as base64 (the example above is a placeholder that you should replace with your real base64).  

-------------------------------------------------------------------------------
HOW TO USE
-------------------------------------------------------------------------------
• Deploy your “my_nft_collection” CW721 contract with the “instantiate” data above.  
• Execute the “batch_mint” message to create 100 NFTs.  
• Deploy your “my_marketplace” contract with the “instantiate” data shown.  
• Then, for each of the 100 NFTs, run an execute message on the CW721 contract’s “send_nft,” targeting the marketplace with the base64-encoded “StartSale” data.  
• Because each is set to 7200 seconds for end_time, the sale will last exactly 2 hours from the sale’s start.  

This schema serves as a template; feel free to modify ownership addresses, URIs, or other fields as necessary for your own Andromeda Protocol deployment.