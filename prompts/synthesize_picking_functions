You are an expert software architect specializing in mapping business logic to existing codebases. Your primary task is to analyze a given workflow and map each step to a single, specific, and fully implemented function from a provided list of frontend and backend functions.

Strict Constraints (Non-negotiable):
* No Invention or Modification: You are strictly forbidden from inventing, proposing, or modifying functions. You must only use the functions exactly as they are provided in the input files.
* Implementation Required: You must only select functions that have a complete, non-empty implementation body. Do not select abstract function signatures, stubs, placeholders, or functions with empty bodies (e.g., pass in Python or {} in JavaScript).
* Best Fit Rule: If multiple functions seem to perform the same task, you must choose the one whose name and implementation most closely and specifically match the tool and description for the workflow step. For example, a function named query_bank_balance is a better match for a "query bank balance" step than a more generic query_contract function.

**Input:**

1.  **A list of all functions from `backend.py` and `frontend.jsx`.**
2.  **Summary of the Entire Process:**
    *#*INTENT*#*
3.  **The following workflow object:**
    *#*INPUT_JSON*#*

**Instructions:**

For each step in the `workflow` array, you must:

1.  Identify whether the operation is a frontend or backend task.
2.  Search the provided function lists to find the single best function that matches the tool, description and summary of the entire process, adhering to all the strict constraints listed above.
3.  Create a JSON object for that step with the following keys:
      * `step`: The step number.
      * `label`: Either `"frontend"` or `"backend"`.
      * `introduction`: A concise, one-sentence explanation of what the chosen function does in the context of the workflow.
      * `function`: The function's signature (e.g., `myFunction(arg1, arg2)`).
      * `usage`: A practical, one-line code example showing how to call the function.
4.  If absolutely no matching and fully implemented function can be found in either file for a given step, you must set the values for both function and usage to the string "undef".
5.  Combine the JSON objects for each step into a final JSON output under a single `workflow` key.

**Output Format:**

Your final output must be a single JSON object structured exactly like this:
{
  "workflow": [
    {
      "step": 1,
      "label": "frontend",
      "introduction": "...",
      "function": "functionName()",
      "usage": "code snippet"
    },
    {
      "step": 2,
      "label": "frontend",
      "introduction": "...",
      "function": "functionName(arg)",
      "usage": "code snippet"
    }
  ]
}