{
    "messages": [
        {
            "content": "[{\"label\": \"Cron\", \"query\": \"Create a schedule to distribute staking rewards weekly\"}, {\"label\": \"Cron\", \"query\": \"Set cron execution stage to BEGIN_BLOCKER for schedule health_check\"}, {\"label\": \"Cron\", \"query\": \"Show the number of active cron schedules\"}, {\"label\": \"Cron\", \"query\": \"Show last execution height for schedule daily_rewards\"}, {\"label\": \"Cron\", \"query\": \"Create a governance proposal file for daily maintenance schedule\"}]",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "87bf43a7-1687-4856-a11d-ac696ca75a37",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_Cz3yW1SSmsfYtrymGLigzpP1",
                        "function": {
                            "arguments": "{\"query\": \"Neutron Cron module create schedule\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 233,
                    "prompt_tokens": 714,
                    "total_tokens": 947,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 192,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRGGDFhgWNecHapcF6pWULjqxTT2",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--9149a63a-f4f5-4478-8238-cf4d56dcb135-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "Neutron Cron module create schedule",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_Cz3yW1SSmsfYtrymGLigzpP1",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 714,
                "output_tokens": 233,
                "total_tokens": 947,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 192
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"Neutron Cron module create schedule\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n```\n\n---\n\n## 3. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Part 2: Modules & Contracts\"\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 13: - Working with Neutron-specific message types\n\n**Content Preview:**\n```\n---\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n\n---\n\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n```\n\n---\n\n## 4. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Admin Module\"\n- Line 3: description: \"Central governance module enabling DAO-driven network administration and proposal execution\"\n- Line 6: The admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n- Line 9: **Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 12: The admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n\n**Content Preview:**\n```\n---\ntitle: \"Admin Module\"\ndescription: \"Central governance module enabling DAO-driven network administration and proposal execution\"\n\n---\n\ntitle: \"Admin Module\"\ndescription: \"Central governance module enabling DAO-driven network administration and proposal execution\"\n---\n\n---\n\n\nThe admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n\n```\n\n---\n\n## 5. GMP Module Technical Details\n**File:** /root/neutron/docs/developers/modules/gmp/explanation.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"GMP Module Technical Details\"\n- Line 8: This document provides an in-depth technical explanation of how the GMP (General Message Passing) module works within the Neutron network's IBC stack.\n- Line 12: The GMP module is implemented as an IBC middleware that sits between the IBC core routing and the transfer application. This positioning allows it to intercept and process IBC transfer packets before they reach their final destination.\n- Line 15: IBC Core \u2192 GMP Middleware \u2192 Transfer Module \u2192 Application\n- Line 20: The GMP module implements the standard IBC middleware interface, providing hooks for all IBC packet lifecycle events:\n\n**Content Preview:**\n```\n---\ntitle: \"GMP Module Technical Details\"\ndescription: \"Technical explanation of General Message Passing middleware implementation\"\n\n---\n\n\nThis document provides an in-depth technical explanation of how the GMP (General Message Passing) module works within the Neutron network's IBC stack.\n\n\n---\n\n\nThe GMP module is implemented as an IBC middleware that sits between the IBC core routing and the transfer application. This positioning allows it to intercept and process IBC transfer packets before they reach their final destination.\n\n```\n\n---\n\n## 6. GMP Module\n**File:** /root/neutron/docs/developers/modules/gmp/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"GMP Module\"\n- Line 8: This document explains the `gmp` module for the Neutron network.\n- Line 10: The General Message Passing (GMP) module is an IBC middleware that enables cross-chain message passing by embedding structured messages within IBC transfer packet memo fields. This module allows developers to send both tokens and arbitrary data in a single IBC transaction, enabling sophisticated cross-chain interactions without requiring additional infrastructure.\n- Line 13: The GMP module operates as IBC middleware, intercepting and processing IBC transfer packets that contain structured messages in their memo fields. It works transparently with existing IBC transfer functionality while adding message passing capabilities.\n- Line 18: - [Overview](/developers/modules/gmp/overview) \u2014 a high-level description of the module.\n\n**Content Preview:**\n```\n---\ntitle: \"GMP Module\"\ndescription: \"General Message Passing for cross-chain communication via IBC transfers\"\n\n---\n\n\nThis document explains the `gmp` module for the Neutron network.\n\n\n---\n\n\nThe General Message Passing (GMP) module is an IBC middleware that enables cross-chain message passing by embedding structured messages within IBC transfer packet memo fields. This module allows developers to send both tokens and arbitrary data in a single IBC transaction, enabling sophisticated cross-chain interactions without requiring additional infrastructure.\n\n```\n\n---\n\n## 7. IBC Rate Limit Module\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"IBC Rate Limit Module\"\n- Line 6: The IBC Rate Limit module provides governance-configurable rate limiting for IBC transfers. It acts as a critical safety control to protect assets on Neutron in the event of security incidents such as bugs or hacks on Neutron, counter-party chains, or in the IBC protocol itself.\n- Line 31: ## Module Interactions\n- Line 33: The IBC Rate Limit module operates as an IBC middleware that:\n- Line 35: - Wraps around the ICS-20 Transfer module\n\n**Content Preview:**\n```\n---\ntitle: \"IBC Rate Limit Module\"\nicon: \"gauge-high\"\n\n---\n\n\nThe IBC Rate Limit module provides governance-configurable rate limiting for IBC transfers. It acts as a critical safety control to protect assets on Neutron in the event of security incidents such as bugs or hacks on Neutron, counter-party chains, or in the IBC protocol itself.\n\n\n---\n\n\n## Module Interactions\n\n```\n\n---\n\n## 8. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries Module\"\n- Line 6: This document explains the `interchainqueries` module for the Neutron network.\n- Line 8: Interchain Queries allow developers to get verifiable data from other blockchains. This feature is essential for creating secure cross-chain applications. The module uses Merkle proofs and IBC clients to confirm the accuracy of the data retrieved directly from the storage of the target blockchain. It allows any smart contract to register Interchain Queries without needing any special module on the target blockchain.\n- Line 11: While the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n- Line 16: - [Overview](/developers/modules/interchain-queries/overview) \u2014 a high-level description of the module.\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries Module\"\ndescription: \"Query cross-chain data and receive verification for on-chain use\"\n\n---\n\n\nThis document explains the `interchainqueries` module for the Neutron network.\n\n\n---\n\n\nInterchain Queries allow developers to get verifiable data from other blockchains. This feature is essential for creating secure cross-chain applications. The module uses Merkle proofs and IBC clients to confirm the accuracy of the data retrieved directly from the storage of the target blockchain. It allows any smart contract to register Interchain Queries without needing any special module on the target blockchain.\n\n```\n\n---\n\n## 9. Interchain Transactions Module\n**File:** /root/neutron/docs/developers/modules/interchaintxs/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Interchain Transactions Module\"\n- Line 5: The Interchain Transactions module enables **CosmWasm smart contracts** to interact with other blockchains in the IBC ecosystem by managing interchain accounts and executing transactions on remote zones. This module provides a critical bridge between smart contracts on Neutron and functionality on connected IBC-enabled chains.\n- Line 8: This module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands.\n- Line 30: - **Cross-Chain DeFi**: Enabling a Neutron-based protocol to participate in DeFi activities on other chains\n- Line 31: - **Governance Participation**: Allowing Neutron contracts to vote in governance proposals on remote chains\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Transactions Module\"\n---\n\n---\n\n\nThe Interchain Transactions module enables **CosmWasm smart contracts** to interact with other blockchains in the IBC ecosystem by managing interchain accounts and executing transactions on remote zones. This module provides a critical bridge between smart contracts on Neutron and functionality on connected IBC-enabled chains.\n\n\n---\n\n<Warning>\nThis module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands.\n</Warning>\n```\n\n---\n\n## 10. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Neutron Modules\"\n- Line 5: Neutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n- Line 7: ## DeFi Modules\n- Line 9: These modules are designed for direct integration with your smart contracts and DeFi applications:\n- Line 12: <Card title=\"Interchain Queries (ICQ)\" icon=\"link\" href=\"/developers/modules/interchain-queries/overview\">\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Modules\"\n---\n\n---\n\n\nNeutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n\n\n---\n\n\n## DeFi Modules\n\n```\n\n---\n\n## 11. Revenue Module\n**File:** /root/neutron/docs/developers/modules/revenue/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Revenue Module\"\n- Line 6: The Revenue module manages validator incentivization through performance-based rewards. By measuring validator performance against configurable criteria, the module distributes compensation to validators who maintain high standards for both block signing and oracle price submissions.\n- Line 14: <Card title=\"Configurable Payment Schedules\" icon=\"calendar\">\n- Line 18: Rewards are defined in USD value and paid in tokens based on price data from the Oracle module.\n- Line 31: ## Module Interactions\n\n**Content Preview:**\n```\n---\ntitle: \"Revenue Module\"\nicon: \"money-bill-trend-up\"\n\n---\n\n\nThe Revenue module manages validator incentivization through performance-based rewards. By measuring validator performance against configurable criteria, the module distributes compensation to validators who maintain high standards for both block signing and oracle price submissions.\n\n\n---\n\n  </Card>\n  <Card title=\"Configurable Payment Schedules\" icon=\"calendar\">\n    Flexible payment periods (monthly or block-based) with automatic rewards distribution at the end of each period.\n```\n\n---\n\n## 12. Transfer Module\n**File:** /root/neutron/docs/developers/modules/transfer/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Transfer Module\"\n- Line 6: The Transfer module in Neutron is an enhanced wrapper around the standard IBC Transfer module that facilitates token transfers between IBC-connected blockchains. It extends the core functionality with contract-centric features that improve the developer experience when working with interchain token transfers.\n- Line 18: Integrates with the Fee Refunder module to distribute fees for IBC packet acknowledgements and timeouts.\n- Line 25: ## Module Interactions\n- Line 27: The Transfer module interacts with several other modules in the Neutron ecosystem:\n\n**Content Preview:**\n```\n---\ntitle: \"Transfer Module\"\nicon: \"arrow-right-arrow-left\"\n\n---\n\n\nThe Transfer module in Neutron is an enhanced wrapper around the standard IBC Transfer module that facilitates token transfers between IBC-connected blockchains. It extends the core functionality with contract-centric features that improve the developer experience when working with interchain token transfers.\n\n\n---\n\n  <Card title=\"Fee Management\" icon=\"money-bill-transfer\">\n    Integrates with the Fee Refunder module to distribute fees for IBC packet acknowledgements and timeouts.\n  </Card>\n```\n\n---\n\n## 13. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"NeutronTemplate\"\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 7: NeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n- Line 10: <strong>Live Demo:</strong> <a href=\"https://neutrontemplate.deploydon.com\" target=\"_blank\" className=\"text-primary hover:underline\">https://NeutronTemplate.Deploydon.com</a>\n- Line 65: git clone https://github.com/Deploydon/NeutronTemplate.git\n\n**Content Preview:**\n```\n---\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n\n---\n\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n\nNeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n\n```\n\n---\n\n## 14. Harpoon Module\n**File:** /root/neutron/docs/developers/modules/harpoon/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Harpoon Module\"\n- Line 3: description: \"Subscribe to staking module hooks from CosmWasm smart contracts\"\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks. Its primary purpose is to enable the calculation of historical voting power from the staking module, which is essential for governance systems that rely on historical data at specific block heights.\n- Line 12: - [Overview](/developers/modules/harpoon/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/harpoon/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n---\ntitle: \"Harpoon Module\"\ndescription: \"Subscribe to staking module hooks from CosmWasm smart contracts\"\n\n---\n\ntitle: \"Harpoon Module\"\ndescription: \"Subscribe to staking module hooks from CosmWasm smart contracts\"\n---\n\n---\n\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks. Its primary purpose is to enable the calculation of historical voting power from the staking module, which is essential for governance systems that rely on historical data at specific block heights.\n\n```\n\n---\n\n## 15. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n- Line 23: ## Getting Started with SubQuery for Neutron\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 16. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 10: - Understanding of Neutron governance processes\n- Line 12: - Access to governance proposal submission (for schedule creation)\n- Line 14: ## Understanding Cron Module Access\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n```\n\n---\n\n## 17. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 12: Creates a new schedule through governance proposal.\n- Line 15: message MsgAddSchedule {\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\n### MsgAddSchedule\n\n```\n\n---\n\n## 18. Introduction to Indexers\n**File:** /root/neutron/docs/developers/tutorials/indexers/intro.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 68: createdAt\n- Line 113: ## Neutron-Specific Data\n- Line 115: Neutron's unique modules generate special data that indexers can capture:\n- Line 159: ### Cron Job Executions\n- Line 162: // Monitor automated cron executions\n\n**Content Preview:**\n```\n    token1Amount\n    createdAt\n  }\n\n---\n\n\n## Neutron-Specific Data\n\n\n---\n\n\nNeutron's unique modules generate special data that indexers can capture:\n\n```\n\n---\n\n## 19. Known Bugs\n**File:** /root/neutron/docs/developers/modules/cron/known-bugs.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Known issues and limitations of the Cron module\"\n- Line 8: The Cron module is functioning as designed with no known critical bugs at this time.\n- Line 14: The Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n- Line 16: - If average block time changes significantly, the real-world timing of scheduled executions will be affected\n- Line 17: - Schedules are not guaranteed to execute at exact time intervals\n\n**Content Preview:**\n```\ntitle: \"Known Bugs\"\ndescription: \"Known issues and limitations of the Cron module\"\n---\n\n---\n\n\nThe Cron module is functioning as designed with no known critical bugs at this time.\n\n\n---\n\n\nThe Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n\n```\n\n---\n\n## 20. AMMs and Orderbooks\n**File:** /root/neutron/docs/developers/modules/dex/concepts/amms-and-orderbooks.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 7: AMMs were the first time that capital markets were created on-chain, in a computationally efficient manner. This was a transformative innovation. However, these AMMs were extremely capital inefficient, meaning that a significant amount of the liquidity deposited in them was not used. This led to extremely high price impact (aka slippage) for traders.\n- Line 21: **Neutron DEX**\n- Line 23: Neutron DEX's mechanism combines the best of AMMs and orderbooks. It is a series of constant-priced pools where LPs can deposit their capital. For example, an LP can deposit capital at the 1.000:1.000 price on a DAI/USDC pair.\n- Line 25: This simple design has significant consequences. Neutron DEX can reach order-book levels of capital efficiency (zero price impact on trades, swaps, and limit orders) while still maintaining the computational efficiency and liveness properties of AMMs.\n- Line 29: Concentrated liquidity and orderbooks differ slightly in how liquidity providers accrue value. On concentrated liquidity AMMs, liquidity providers accrue value through a [fee](/developers/modules/dex/concepts/fees) that they choose when placing the liquidity. The fee is a predetermined premium that traders pay when using the liquidity to swap between two assets.\n\n**Content Preview:**\n```\n\nAMMs were the first time that capital markets were created on-chain, in a computationally efficient manner. This was a transformative innovation. However, these AMMs were extremely capital inefficient, meaning that a significant amount of the liquidity deposited in them was not used. This led to extremely high price impact (aka slippage) for traders.\n\n\n---\n\n\n**Neutron DEX**\n\n\n---\n\n\nNeutron DEX's mechanism combines the best of AMMs and orderbooks. It is a series of constant-priced pools where LPs can deposit their capital. For example, an LP can deposit capital at the 1.000:1.000 price on a DAI/USDC pair.\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "8bcaa958-36a9-4b8b-9076-fb2c73a0f92c",
            "tool_call_id": "call_Cz3yW1SSmsfYtrymGLigzpP1",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_pwrbpa4mgEsqEC5MlUX92RyV",
                        "function": {
                            "arguments": "{\"query\": \"cron schedule message fields MsgAddSchedule frequency name labels\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 301,
                    "prompt_tokens": 7386,
                    "total_tokens": 7687,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 256,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRGKU4tX7qd7ahCs21I9LjFe5Pyn",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--ce3a6751-6418-4ace-9610-e2bf540d5d23-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "cron schedule message fields MsgAddSchedule frequency name labels",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_pwrbpa4mgEsqEC5MlUX92RyV",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 7386,
                "output_tokens": 301,
                "total_tokens": 7687,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 256
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"cron schedule message fields MsgAddSchedule frequency name labels\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n```\n\n---\n\n## 3. Messages\n**File:** /root/neutron/docs/developers/modules/dex/messages.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Messages\"\n- Line 5: The Dex module exposes several message types for interacting with the decentralized exchange. Here's a detailed documentation of each message and its expected behavior.\n- Line 12: message MsgDeposit {\n- Line 13: option (amino.name) = \"dex/MsgDeposit\";\n- Line 33: message DepositOptions {\n\n**Content Preview:**\n```\n---\ntitle: \"Messages\"\n---\n\n---\n\n\nThe Dex module exposes several message types for interacting with the decentralized exchange. Here's a detailed documentation of each message and its expected behavior.\n\n\n---\n\n```protobuf\nmessage MsgDeposit {\n  option (amino.name) = \"dex/MsgDeposit\";\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 6: ## Messages\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 12: Creates a new schedule through governance proposal.\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\n## Messages\n\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n```\n\n---\n\n## 5. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 20: <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n- Line 21: Schedule automated contract executions\n- Line 25: High-frequency price data for assets\n- Line 81: ### 2. Create Messages\n- Line 92: _ => Err(StdError::generic_err(\"unsupported sudo message\")),\n\n**Content Preview:**\n```\n  \n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n\n---\n\n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n  </Card>\n\n---\n\n  <Card title=\"Oracle\" icon=\"database\" href=\"/developers/modules/oracle/overview\">\n    High-frequency price data for assets\n  </Card>\n```\n\n---\n\n## 6. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 108: ### 2. Cron Module Tests\n- Line 111: func (s *IntegrationTestSuite) TestCronModule() {\n- Line 114: // Create a cron schedule\n- Line 115: scheduleMsg := &crontypes.MsgAddSchedule{\n- Line 117: Name:      \"test-schedule\",\n\n**Content Preview:**\n```\n\n### 2. Cron Module Tests\n\n\n---\n\n```go\nfunc (s *IntegrationTestSuite) TestCronModule() {\n    val := s.network.Validators[0]\n\n---\n\n    \n    // Create a cron schedule\n    scheduleMsg := &crontypes.MsgAddSchedule{\n```\n\n---\n\n## 7. Reference\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 32: ## Messages\n- Line 39: **Fields:**\n- Line 51: - `module`: Module name (`rate-limited-ibc`)\n- Line 72: ### Contract Messages\n- Line 74: The module sends the following messages to the rate limiting contract:\n\n**Content Preview:**\n```\n\n## Messages\n\n\n---\n\n\n**Fields:**\n- `authority`: Governance authority address\n\n---\n\n**Attributes:**\n- `module`: Module name (`rate-limited-ibc`)\n- `failure_type`: Type of failure encountered (`acknowledgment` or `timeout`)\n```\n\n---\n\n## 8. Reference\n**File:** /root/neutron/docs/developers/modules/revenue/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 6: The Revenue module manages validator compensation based on performance metrics and payment schedules.\n- Line 13: | `reward_quote` | object | Quotation of the reward asset with amount and asset fields |\n- Line 16: | `payment_schedule_type` | object | Type of payment schedule (monthly, block-based, or empty) |\n- Line 21: - `asset`: The name of the quote asset (e.g., \"USD\")\n- Line 51: Retrieve the current payment schedule and revenue calculation information.\n\n**Content Preview:**\n```\n\nThe Revenue module manages validator compensation based on performance metrics and payment schedules.\n\n\n---\n\n| `reward_asset` | string | Token denomination used for compensation payments |\n| `reward_quote` | object | Quotation of the reward asset with amount and asset fields |\n| `blocks_performance_requirement` | object | Performance thresholds for block signing |\n\n---\n\n| `oracle_votes_performance_requirement` | object | Performance thresholds for oracle vote submissions |\n| `payment_schedule_type` | object | Type of payment schedule (monthly, block-based, or empty) |\n| `twap_window` | int64 | Time window in seconds for calculating asset price averages |\n```\n\n---\n\n## 9. Introduction to Indexers\n**File:** /root/neutron/docs/developers/tutorials/indexers/intro.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 159: ### Cron Job Executions\n- Line 162: // Monitor automated cron executions\n- Line 163: const cronExecutions = await api.query(\n- Line 165: cronExecutions(first: 50) {\n- Line 166: scheduleName\n\n**Content Preview:**\n```\n\n### Cron Job Executions\n\n\n---\n\n```javascript\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n\n---\n\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n  `query {\n```\n\n---\n\n## 10. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 12: - Advanced message handling and responses\n- Line 13: - Working with Neutron-specific message types\n- Line 19: - Familiarity with CosmWasm message patterns\n- Line 27: Get high-frequency price data for any asset\n\n**Content Preview:**\n```\n\n- How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Inter-contract communication patterns\n\n---\n\n- Inter-contract communication patterns\n- Advanced message handling and responses\n- Working with Neutron-specific message types\n\n---\n\n- Advanced message handling and responses\n- Working with Neutron-specific message types\n\n```\n\n---\n\n## 11. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: **DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n- Line 12: ## Messages\n- Line 15: Submit a proposal with multiple messages for execution.\n- Line 17: **Fields:**\n- Line 18: - `messages`: Array of messages to execute\n\n**Content Preview:**\n```\n<Warning>\n**DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n</Warning>\n\n---\n\n\n## Messages\n\n\n---\n\n### MsgSubmitProposal\nSubmit a proposal with multiple messages for execution.\n\n```\n\n---\n\n## 12. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 12: - Access to governance proposal submission (for schedule creation)\n- Line 14: ## Understanding Cron Module Access\n- Line 16: The Cron module is **governance-gated**, meaning:\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n```\n\n---\n\n## 13. Known Bugs\n**File:** /root/neutron/docs/developers/modules/cron/known-bugs.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Known issues and limitations of the Cron module\"\n- Line 8: The Cron module is functioning as designed with no known critical bugs at this time.\n- Line 14: The Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n- Line 16: - If average block time changes significantly, the real-world timing of scheduled executions will be affected\n- Line 17: - Schedules are not guaranteed to execute at exact time intervals\n\n**Content Preview:**\n```\ntitle: \"Known Bugs\"\ndescription: \"Known issues and limitations of the Cron module\"\n---\n\n---\n\n\nThe Cron module is functioning as designed with no known critical bugs at this time.\n\n\n---\n\n\nThe Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n\n```\n\n---\n\n## 14. Tick Liquidity\n**File:** /root/neutron/docs/developers/modules/dex/concepts/tick-liquidity.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: `TickLiquidity` structs are used to store liquidity within the Dex. Each tick has a specific price and holds liquidity for a single token. `TickLiquidity` come in two general types:`PoolReserves` for storing LP positions and `LimitOrderTranche`s for storing limit orders. Both `TickLiquidity` types are indexed by a key which shares a number of fields in common. These two types make up the fundamental building blocks of the DEX orderbook, and are critical to the [liquidity iteration mechanism](/developers/modules/dex/concepts/liquidity-iteration). `TickLiquidity`s contain all of the necessary information to perform a swap, namely price and available reserves. Each `TickLiquidity` instance has a `TradePairID`, `TickIndexTakerToMaker`. A `TradePairID` containing the fields `MakerDenom` and `TakerDenom` describes what denom is held in the `TickLiquidity` (`MakerDenom`) and what denom it can be traded with (`TakerDenom`). `TickIndexTakerToMaker` describes the tick at which a certain liquidity is stored and by extension its `MakerPrice`.\n- Line 24: A `Pool` contains all the information required for a single constant-priced AMM to exist. It holds liquidity for both sides of a pair, `Token0` and `Token1` named `LowerTick0` and `UpperTick1` respectively. Pools are not explicitly stored anywhere, but their `PoolReserves` content is.\n- Line 94: Lastly, ExpirationTime is an optional field used for Expiring limit orders [(`JUST_IN_TIME` and `GOOD_TIL_TIME`)](/developers/modules/dex/messages#order-types). At the beginning (`BeginBlocker`) of each block any LimitOrders with `ExpirationTime` less than or equal to `ctx.BlockTime()` is converted to an `InactiveLimitOrderTranche` where it can no longer be traded against.\n\n**Content Preview:**\n```\n\n`TickLiquidity` structs are used to store liquidity within the Dex. Each tick has a specific price and holds liquidity for a single token. `TickLiquidity` come in two general types:`PoolReserves` for storing LP positions and `LimitOrderTranche`s for storing limit orders. Both `TickLiquidity` types are indexed by a key which shares a number of fields in common. These two types make up the fundamental building blocks of the DEX orderbook, and are critical to the [liquidity iteration mechanism](/developers/modules/dex/concepts/liquidity-iteration). `TickLiquidity`s contain all of the necessary information to perform a swap, namely price and available reserves. Each `TickLiquidity` instance has a `TradePairID`, `TickIndexTakerToMaker`. A `TradePairID` containing the fields `MakerDenom` and `TakerDenom` describes what denom is held in the `TickLiquidity` (`MakerDenom`) and what denom it can be traded with (`TakerDenom`). `TickIndexTakerToMaker` describes the tick at which a certain liquidity is stored and by extension its `MakerPrice`.\n\n\n---\n\n## Pool\nA `Pool` contains all the information required for a single constant-priced AMM to exist. It holds liquidity for both sides of a pair, `Token0` and `Token1` named `LowerTick0` and `UpperTick1` respectively. Pools are not explicitly stored anywhere, but their `PoolReserves` content is.\n```go\n\n---\n\n\nLastly, ExpirationTime is an optional field used for Expiring limit orders [(`JUST_IN_TIME` and `GOOD_TIL_TIME`)](/developers/modules/dex/messages#order-types). At the beginning (`BeginBlocker`) of each block any LimitOrders with `ExpirationTime` less than or equal to `ctx.BlockTime()` is converted to an `InactiveLimitOrderTranche` where it can no longer be traded against.\n```\n\n---\n\n## 15. DEX Events\n**File:** /root/neutron/docs/developers/modules/dex/events.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The DEX module emits events during transaction processing to provide information about deposits, withdrawals, limit orders, and swaps. All events use the standard Cosmos SDK event format with module name \"dex\".\n- Line 14: **Event Type:** `message`\n- Line 35: **Event Type:** `message`\n- Line 56: **Event Type:** `message`\n- Line 76: **Event Type:** `message`\n\n**Content Preview:**\n```\n\nThe DEX module emits events during transaction processing to provide information about deposits, withdrawals, limit orders, and swaps. All events use the standard Cosmos SDK event format with module name \"dex\".\n\n\n---\n\n\n**Event Type:** `message`  \n**Module:** `dex`  \n\n---\n\n\n**Event Type:** `message`  \n**Module:** `dex`  \n```\n\n---\n\n## 16. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 30: \"messages\": [\n- Line 86: \"messages\": [\n- Line 325: query: \"tm.event='Tx' AND message.action='/neutron.dynamicfees.MsgUpdateParams'\"\n- Line 362: KEY_NAME=\"governance-key\"\n- Line 369: \"messages\": [\n\n**Content Preview:**\n```\n  \"description\": \"Update NTRN-denominated prices for supported assets based on current market conditions\",\n  \"messages\": [\n    {\n\n---\n\n  \"description\": \"Add JUNO token support to Dynamic Fees module\",\n  \"messages\": [\n    {\n\n---\n\n  client.subscribe({\n    query: \"tm.event='Tx' AND message.action='/neutron.dynamicfees.MsgUpdateParams'\"\n  }, (event) => {\n```\n\n---\n\n## 17. Reference\n**File:** /root/neutron/docs/developers/modules/globalfee/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 13: | `bypass_min_fee_msg_types` | string[] | Message types that can bypass minimum fees |\n- Line 24: Common bypass message types:\n- Line 41: ## Messages\n- Line 48: **Fields:**\n- Line 55: - **Fee Bypass**: Certain message types can bypass minimum fees\n\n**Content Preview:**\n```\n| `minimum_gas_prices` | DecCoin[] | Network-wide minimum gas prices |\n| `bypass_min_fee_msg_types` | string[] | Message types that can bypass minimum fees |\n| `max_total_bypass_min_fee_msg_gas_usage` | uint64 | Maximum gas usage for bypass transactions |\n\n---\n\n#### bypass_min_fee_msg_types\nCommon bypass message types:\n- `/cosmos.gov.v1beta1.MsgVote` - Governance voting\n\n---\n\n\n## Messages\n\n```\n\n---\n\n## 18. How-to\n**File:** /root/neutron/docs/developers/modules/gmp/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using General Message Passing\"\n- Line 8: This guide provides practical instructions for using the GMP (General Message Passing) module to send cross-chain messages via IBC transfers.\n- Line 12: The GMP module processes messages embedded in IBC transfer memo fields. To use GMP, you embed a structured JSON message in the memo field of a standard IBC transfer.\n- Line 14: ### Sending a General Message\n- Line 16: To send a general message with an IBC transfer:\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using General Message Passing\"\n---\n\n---\n\n\nThis guide provides practical instructions for using the GMP (General Message Passing) module to send cross-chain messages via IBC transfers.\n\n\n---\n\n\nThe GMP module processes messages embedded in IBC transfer memo fields. To use GMP, you embed a structured JSON message in the memo field of a standard IBC transfer.\n\n```\n\n---\n\n## 19. GMP Module\n**File:** /root/neutron/docs/developers/modules/gmp/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"General Message Passing for cross-chain communication via IBC transfers\"\n- Line 10: The General Message Passing (GMP) module is an IBC middleware that enables cross-chain message passing by embedding structured messages within IBC transfer packet memo fields. This module allows developers to send both tokens and arbitrary data in a single IBC transaction, enabling sophisticated cross-chain interactions without requiring additional infrastructure.\n- Line 13: The GMP module operates as IBC middleware, intercepting and processing IBC transfer packets that contain structured messages in their memo fields. It works transparently with existing IBC transfer functionality while adding message passing capabilities.\n- Line 22: - [Reference](/developers/modules/gmp/reference) \u2014 details about the module's interface, including message formats and processing logic.\n- Line 26: The GMP module processes two types of messages embedded in IBC transfer memo fields:\n\n**Content Preview:**\n```\ntitle: \"GMP Module\"\ndescription: \"General Message Passing for cross-chain communication via IBC transfers\"\n---\n\n---\n\n\nThe General Message Passing (GMP) module is an IBC middleware that enables cross-chain message passing by embedding structured messages within IBC transfer packet memo fields. This module allows developers to send both tokens and arbitrary data in a single IBC transaction, enabling sophisticated cross-chain interactions without requiring additional infrastructure.\n\n\n---\n\n<Info>\nThe GMP module operates as IBC middleware, intercepting and processing IBC transfer packets that contain structured messages in their memo fields. It works transparently with existing IBC transfer functionality while adding message passing capabilities.\n</Info>\n```\n\n---\n\n## 20. Reference\n**File:** /root/neutron/docs/developers/modules/gmp/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The GMP (General Message Passing) module is an IBC middleware that processes messages embedded in IBC transfer packet memo fields.\n- Line 8: ## Message Format\n- Line 10: GMP messages are embedded in IBC transfer memo fields as JSON:\n- Line 27: | `payload` | string | Yes | Base64-encoded message payload (cannot be empty) |\n- Line 28: | `type` | integer | Yes | Message type: 1 (GeneralMessage) or 2 (GeneralMessageWithToken) |\n\n**Content Preview:**\n```\n\nThe GMP (General Message Passing) module is an IBC middleware that processes messages embedded in IBC transfer packet memo fields.\n\n\n---\n\n\n## Message Format\n\n\n---\n\n\nGMP messages are embedded in IBC transfer memo fields as JSON:\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "f62d39e7-437b-4a71-9b1e-9c2f543a0404",
            "tool_call_id": "call_pwrbpa4mgEsqEC5MlUX92RyV",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_8UxqhizootgOAqQg9I7Xwz3o",
                        "function": {
                            "arguments": "{\"query\": \"neutrond query cron\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 232,
                    "prompt_tokens": 13527,
                    "total_tokens": 13759,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 192,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRGSftBZkwrF3T2rjAUw9lwTiIaW",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--0c220c86-d7da-4444-ba41-d69c65ff2c14-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutrond query cron",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_8UxqhizootgOAqQg9I7Xwz3o",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 13527,
                "output_tokens": 232,
                "total_tokens": 13759,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 192
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"neutrond query cron\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/cron/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n## 3. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 8: ## Key Advantages of SubQuery\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 50: The primary state object in the Cron module:\n- Line 105: ## Query Methods\n- Line 113: neutrond query cron params\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\nThe primary state object in the Cron module:\n\n```\n\n---\n\n## 5. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 98: // Query the price\n- Line 99: queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n- Line 100: resp, err := queryClient.ExchangeRate(context.Background(), &oracletypes.QueryExchangeRateRequest{\n- Line 108: ### 2. Cron Module Tests\n\n**Content Preview:**\n```\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n    \n    // Query the price\n    queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n\n---\n\n    // Query the price\n    queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n    resp, err := queryClient.ExchangeRate(context.Background(), &oracletypes.QueryExchangeRateRequest{\n```\n\n---\n\n## 6. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 61: neutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n- Line 75: neutrond tx wasm submit-proposal proposal.json \\\n- Line 163: ## Querying the Admin Module\n- Line 165: While you cannot submit proposals directly, you can query the admin module's state using standard query commands:\n- Line 168: # Query module parameters (if available)\n\n**Content Preview:**\n```\n# Execute a propose message on the Main DAO contract\nneutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n  '{\"propose\": {\"msg\": {\"propose_single\": {\"title\": \"Your Proposal Title\", \"description\": \"Your proposal description\", \"msgs\": [/* your admin module messages */]}}}}' \\\n\n---\n\n# Submit proposal via WASM module\nneutrond tx wasm submit-proposal proposal.json \\\n  --from=<your-key> \\\n\n---\n\n\n## Querying the Admin Module\n\n```\n\n---\n\n## 7. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 37: To check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n- Line 42: neutrond query contractmanager failures [contract-address]\n- Line 61: You can query failures from within another contract using bindings:\n- Line 64: // Query failures from a CosmWasm contract\n- Line 65: pub fn query_failures(\n\n**Content Preview:**\n```\n\nTo check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n\n\n---\n\n```bash\nneutrond query contractmanager failures [contract-address]\n```\n\n---\n\n\nYou can query failures from within another contract using bindings:\n\n```\n\n---\n\n## 8. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 60: neutrond tx gov submit-proposal proposal.json \\\n- Line 73: neutrond tx gov vote 123 yes \\\n- Line 127: ## Querying Module Information\n- Line 129: ### Query Current Parameters\n- Line 132: # Query current asset prices\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal proposal.json \\\n  --from your-key \\\n\n---\n\n# Vote yes on proposal ID 123\nneutrond tx gov vote 123 yes \\\n  --from your-key \\\n\n---\n\n\n## Querying Module Information\n\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/feeburner/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Fee Burner module, primarily for operators, validators, and users who need to query information about burned fees.\n- Line 7: ## Querying Module Parameters\n- Line 9: You can query the current parameters of the Fee Burner module using the CLI:\n- Line 12: neutrond query feeburner params\n- Line 33: To query the total amount of NTRN tokens that have been burned since genesis:\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Fee Burner module, primarily for operators, validators, and users who need to query information about burned fees.\n\n\n---\n\n\n## Querying Module Parameters\n\n\n---\n\n\nYou can query the current parameters of the Fee Burner module using the CLI:\n\n```\n\n---\n\n## 10. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 99: // Query the module parameters to get minimum required fees\n- Line 100: let params: QueryParamsResponse = deps.querier.query(\n- Line 101: &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n- Line 133: neutrond query feerefunder params\n- Line 191: ## Querying Fee Information\n\n**Content Preview:**\n```\n```rust\n// Query the module parameters to get minimum required fees\nlet params: QueryParamsResponse = deps.querier.query(\n\n---\n\n// Query the module parameters to get minimum required fees\nlet params: QueryParamsResponse = deps.querier.query(\n    &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n\n---\n\nlet params: QueryParamsResponse = deps.querier.query(\n    &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n)?;\n```\n\n---\n\n## 11. Reference\n**File:** /root/neutron/docs/developers/modules/feerefunder/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: ### QueryParams\n- Line 35: **CLI:** `neutrond query feerefunder params`\n- Line 41: ### QueryFeeInfo\n- Line 44: **CLI:** `neutrond query feerefunder fee-info [port_id] [channel_id] [sequence]`\n- Line 68: - **Query-Only for Users**: Users can only query fee information and parameters\n\n**Content Preview:**\n```\n\n### QueryParams\nRetrieve the current module parameters.\n\n---\n\n\n**CLI:** `neutrond query feerefunder params`\n**REST:** `GET /neutron-org/neutron/feerefunder/params`\n\n---\n\n\n### QueryFeeInfo  \nRetrieve fee information for a specific IBC packet.\n```\n\n---\n\n## 12. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 153: **Query Current Parameters:**\n- Line 158: const params = await client.queryContractSmart(\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n- Line 198: neutrond query block [height] | jq '.block.data.txs[] | select(.body.messages[].type_url | contains(\"MsgVote\"))'\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n\n**Query Current Parameters:**\n\n\n---\n\n\nconst params = await client.queryContractSmart(\n  \"neutron1...\", // Global fee module address\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 306: neutrond tx gov submit-proposal /path/to/proposal.json \\\n- Line 319: neutrond tx gov vote <proposal-id> yes \\\n- Line 331: ## Querying Hook Subscriptions\n- Line 333: You can query to see which contracts are subscribed to specific hook types.\n- Line 338: neutrond query harpoon subscribed-contracts HOOK_TYPE_BEFORE_DELEGATION_CREATED\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal /path/to/proposal.json \\\n  --from <your-key> \\\n\n---\n\n```bash\nneutrond tx gov vote <proposal-id> yes \\\n  --from <your-key> \\\n\n---\n\n\n## Querying Hook Subscriptions\n\n```\n\n---\n\n## 14. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: ## How to choose the right IBC connection ID for an Interchain Query and verify it\n- Line 16: Go to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n- Line 26: neutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 44: neutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 69: connection_id: connection-0  << matches the third step's connection-id query parameter\n\n**Content Preview:**\n```\n\n## How to choose the right IBC connection ID for an Interchain Query and verify it\n\n\n---\n\n\nGo to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n\n\n---\n\n```\nneutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\nconnection:\n```\n\n---\n\n## 15. Developer Quickstart\n**File:** /root/neutron/docs/developers/quickstart.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 46: # Build the neutrond binary\n- Line 50: neutrond version\n- Line 68: git clone https://github.com/neutron-org/neutron-query-relayer.git\n- Line 152: neutrond tx wasm store artifacts/my_neutron_contract.wasm \\\n- Line 161: neutrond query wasm list-code --node http://localhost:26657\n\n**Content Preview:**\n```\n    \n    # Build the neutrond binary\n    make install\n\n---\n\n    # Verify installation\n    neutrond version\n    ```\n\n---\n\n    git clone https://github.com/neutron-org/neutron-integration-tests.git\n    git clone https://github.com/neutron-org/neutron-query-relayer.git\n    git clone https://github.com/cosmos/gaia.git\n```\n\n---\n\n## 16. Cosmopark Tutorial\n**File:** /root/neutron/docs/developers/tutorials/onboarding/cosmopark.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 48: git clone https://github.com/neutron-org/neutron-query-relayer.git\n- Line 126: Access the node using the standard `neutrond` CLI:\n- Line 129: # Example: Query account balance\n- Line 130: neutrond q bank balances neutron1m9l358xunhhwds0568za49mzhvuxx9ux8xafx2 --node http://localhost:26657\n- Line 143: # Example: Query account\n\n**Content Preview:**\n```\ngit clone https://github.com/neutron-org/neutron-integration-tests.git\ngit clone https://github.com/neutron-org/neutron-query-relayer.git\n\n\n---\n\n\nAccess the node using the standard `neutrond` CLI:\n\n\n---\n\n```bash\n# Example: Query account balance\nneutrond q bank balances neutron1m9l358xunhhwds0568za49mzhvuxx9ux8xafx2 --node http://localhost:26657\n```\n\n---\n\n## 17. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 29: <Card title=\"Cron\" icon=\"clock\">\n- Line 33: Query data from other IBC-connected chains\n- Line 100: pub enum QueryMsg {\n- Line 134: use neutron_sdk::bindings::query::NeutronQuery;\n\n**Content Preview:**\n```\n\n- How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Inter-contract communication patterns\n\n---\n\n  </Card>\n  <Card title=\"Cron\" icon=\"clock\">\n    Schedule automated contract executions\n\n---\n\n  <Card title=\"ICQ\" icon=\"link\">\n    Query data from other IBC-connected chains\n  </Card>\n```\n\n---\n\n## 18. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 62: ### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n- Line 72: 1. **General Cosmos SDK Query Gas Limit** (`query-gas-limit` in root of app.toml):\n- Line 74: # The maximum gas a query coming over rest/grpc may consume.\n- Line 75: # If this is set to zero, the query can consume an unbounded amount of gas.\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\n### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n\n\n---\n\n\n1. **General Cosmos SDK Query Gas Limit** (`query-gas-limit` in root of app.toml):\n   ```toml\n```\n\n---\n\n## 19. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 44: ### QueryAdmins\n- Line 50: ### QueryParams\n- Line 56: ### QueryWhitelist\n- Line 62: ### QueryProposal\n- Line 71: ### QueryProposals\n\n**Content Preview:**\n```\n\n### QueryAdmins\nRetrieve the list of administrators.\n\n---\n\n\n### QueryParams\nRetrieve module parameters.\n\n---\n\n\n### QueryWhitelist\nRetrieve the message whitelist.\n```\n\n---\n\n## 20. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 14: ## Understanding Cron Module Access\n- Line 16: The Cron module is **governance-gated**, meaning:\n- Line 25: **No Individual Access**: Unlike other modules, the Cron module does not accept direct user transactions. All schedule management must go through governance proposals.\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n## Understanding Cron Module Access\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "8e24a154-926d-4a2d-aba4-49701e8af377",
            "tool_call_id": "call_8UxqhizootgOAqQg9I7Xwz3o",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_NZWa7ddO22aYYA5i2DUQSofx",
                        "function": {
                            "arguments": "{\"query\": \"MsgAddSchedule fields\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 359,
                    "prompt_tokens": 19185,
                    "total_tokens": 19544,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 320,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 7296
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRGYbOqsnMa7UDmE67gvehlbAPSN",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--72f36370-ff2e-4e2b-8080-db0f3261eeee-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "MsgAddSchedule fields",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_NZWa7ddO22aYYA5i2DUQSofx",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 19185,
                "output_tokens": 359,
                "total_tokens": 19544,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 7296
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 320
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"MsgAddSchedule fields\":\n\n## 1. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 44: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 62: The `MsgAddSchedule` message contains:\n- Line 198: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 224: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 250: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n\n**Content Preview:**\n```\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n\n---\n\n\nThe `MsgAddSchedule` message contains:\n\n\n---\n\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n```\n\n---\n\n## 2. GMP Module\n**File:** /root/neutron/docs/developers/modules/gmp/overview.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 10: The General Message Passing (GMP) module is an IBC middleware that enables cross-chain message passing by embedding structured messages within IBC transfer packet memo fields. This module allows developers to send both tokens and arbitrary data in a single IBC transaction, enabling sophisticated cross-chain interactions without requiring additional infrastructure.\n- Line 13: The GMP module operates as IBC middleware, intercepting and processing IBC transfer packets that contain structured messages in their memo fields. It works transparently with existing IBC transfer functionality while adding message passing capabilities.\n- Line 26: The GMP module processes two types of messages embedded in IBC transfer memo fields:\n- Line 73: - **Sending**: Applications embed GMP messages in transfer memo fields using standard IBC transfer calls\n- Line 90: - **Source Verification**: The source_chain and source_address fields are provided for reference but should not be trusted for security decisions\n\n**Content Preview:**\n```\n\nThe General Message Passing (GMP) module is an IBC middleware that enables cross-chain message passing by embedding structured messages within IBC transfer packet memo fields. This module allows developers to send both tokens and arbitrary data in a single IBC transaction, enabling sophisticated cross-chain interactions without requiring additional infrastructure.\n\n\n---\n\n<Info>\nThe GMP module operates as IBC middleware, intercepting and processing IBC transfer packets that contain structured messages in their memo fields. It works transparently with existing IBC transfer functionality while adding message passing capabilities.\n</Info>\n\n---\n\n\nThe GMP module processes two types of messages embedded in IBC transfer memo fields:\n\n```\n\n---\n\n## 3. Reference\n**File:** /root/neutron/docs/developers/modules/tokenfactory/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 22: **Fields:**\n- Line 32: **Fields:**\n- Line 40: **Fields:**\n- Line 48: **Fields:**\n- Line 56: **Fields:**\n\n**Content Preview:**\n```\n\n**Fields:**\n- `sender`: Address creating the token\n\n---\n\n\n**Fields:**\n- `sender`: Token admin address\n\n---\n\n\n**Fields:**\n- `sender`: Token admin address\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 17: **Fields:**\n- Line 24: **Fields:**\n- Line 31: **Fields:**\n- Line 38: **Fields:**\n\n**Content Preview:**\n```\n\n**Fields:**\n- `messages`: Array of messages to execute\n\n---\n\n\n**Fields:**\n- `content`: Proposal content in legacy format\n\n---\n\n\n**Fields:**\n- `creator`: Address adding the admin\n```\n\n---\n\n## 5. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/tokenfactory/explanation.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 77: **Metadata Fields:**\n- Line 82: - Additional custom fields\n- Line 257: **Custom Fields:**\n- Line 258: - Support for arbitrary metadata fields\n\n**Content Preview:**\n```\n\n**Metadata Fields:**\n- Name: Human-readable token name\n\n---\n\n- Decimals: Number of decimal places\n- Additional custom fields\n\n\n---\n\n\n**Custom Fields:**\n- Support for arbitrary metadata fields\n```\n\n---\n\n## 6. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 10: ### MsgAddSchedule\n- Line 15: message MsgAddSchedule {\n- Line 197: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n\n**Content Preview:**\n```\n\n### MsgAddSchedule\n\n\n---\n\n```protobuf\nmessage MsgAddSchedule {\n  string authority = 1;                      // The address of the governance account\n\n---\n\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n```\n\n---\n\n## 7. Reference\n**File:** /root/neutron/docs/developers/modules/revenue/reference.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 13: | `reward_quote` | object | Quotation of the reward asset with amount and asset fields |\n- Line 66: **Fields:**\n- Line 73: **Fields:**\n\n**Content Preview:**\n```\n| `reward_asset` | string | Token denomination used for compensation payments |\n| `reward_quote` | object | Quotation of the reward asset with amount and asset fields |\n| `blocks_performance_requirement` | object | Performance thresholds for block signing |\n\n---\n\n\n**Fields:**\n- `authority`: Governance authority address\n\n---\n\n\n**Fields:**\n- `sender`: Address sending funds\n```\n\n---\n\n## 8. How-to\n**File:** /root/neutron/docs/developers/modules/gmp/how-to.mdx\n**Section:** developers\n**Relevance Score:** 5\n\n**Matching lines:**\n- Line 12: The GMP module processes messages embedded in IBC transfer memo fields. To use GMP, you embed a structured JSON message in the memo field of a standard IBC transfer.\n- Line 323: 1. **Don't trust source fields**: `source_chain` and `source_address` are informational only\n\n**Content Preview:**\n```\n\nThe GMP module processes messages embedded in IBC transfer memo fields. To use GMP, you embed a structured JSON message in the memo field of a standard IBC transfer.\n\n\n---\n\n\n1. **Don't trust source fields**: `source_chain` and `source_address` are informational only\n2. **Validate all payload content**: Treat cross-chain data as untrusted\n```\n\n---\n\n## 9. Reference\n**File:** /root/neutron/docs/developers/modules/gmp/reference.mdx\n**Section:** developers\n**Relevance Score:** 5\n\n**Matching lines:**\n- Line 6: The GMP (General Message Passing) module is an IBC middleware that processes messages embedded in IBC transfer packet memo fields.\n- Line 10: GMP messages are embedded in IBC transfer memo fields as JSON:\n\n**Content Preview:**\n```\n\nThe GMP (General Message Passing) module is an IBC middleware that processes messages embedded in IBC transfer packet memo fields.\n\n\n---\n\n\nGMP messages are embedded in IBC transfer memo fields as JSON:\n\n```\n\n---\n\n## 10. Tick Liquidity\n**File:** /root/neutron/docs/developers/modules/dex/concepts/tick-liquidity.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 5: `TickLiquidity` structs are used to store liquidity within the Dex. Each tick has a specific price and holds liquidity for a single token. `TickLiquidity` come in two general types:`PoolReserves` for storing LP positions and `LimitOrderTranche`s for storing limit orders. Both `TickLiquidity` types are indexed by a key which shares a number of fields in common. These two types make up the fundamental building blocks of the DEX orderbook, and are critical to the [liquidity iteration mechanism](/developers/modules/dex/concepts/liquidity-iteration). `TickLiquidity`s contain all of the necessary information to perform a swap, namely price and available reserves. Each `TickLiquidity` instance has a `TradePairID`, `TickIndexTakerToMaker`. A `TradePairID` containing the fields `MakerDenom` and `TakerDenom` describes what denom is held in the `TickLiquidity` (`MakerDenom`) and what denom it can be traded with (`TakerDenom`). `TickIndexTakerToMaker` describes the tick at which a certain liquidity is stored and by extension its `MakerPrice`.\n\n**Content Preview:**\n```\n\n`TickLiquidity` structs are used to store liquidity within the Dex. Each tick has a specific price and holds liquidity for a single token. `TickLiquidity` come in two general types:`PoolReserves` for storing LP positions and `LimitOrderTranche`s for storing limit orders. Both `TickLiquidity` types are indexed by a key which shares a number of fields in common. These two types make up the fundamental building blocks of the DEX orderbook, and are critical to the [liquidity iteration mechanism](/developers/modules/dex/concepts/liquidity-iteration). `TickLiquidity`s contain all of the necessary information to perform a swap, namely price and available reserves. Each `TickLiquidity` instance has a `TradePairID`, `TickIndexTakerToMaker`. A `TradePairID` containing the fields `MakerDenom` and `TakerDenom` describes what denom is held in the `TickLiquidity` (`MakerDenom`) and what denom it can be traded with (`TakerDenom`). `TickIndexTakerToMaker` describes the tick at which a certain liquidity is stored and by extension its `MakerPrice`.\n\n```\n\n---\n\n## 11. Reference\n**File:** /root/neutron/docs/developers/modules/dynamicfees/reference.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 34: **Fields:**\n\n**Content Preview:**\n```\n\n**Fields:**\n- `authority`: Governance authority address\n```\n\n---\n\n## 12. Reference\n**File:** /root/neutron/docs/developers/modules/feeburner/reference.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 37: **Fields:**\n\n**Content Preview:**\n```\n\n**Fields:**\n- `authority`: Governance authority address  \n```\n\n---\n\n## 13. Reference\n**File:** /root/neutron/docs/developers/modules/feerefunder/reference.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 26: **Fields:**\n\n**Content Preview:**\n```\n\n**Fields:**\n- `authority`: Governance authority address\n```\n\n---\n\n## 14. Reference\n**File:** /root/neutron/docs/developers/modules/globalfee/reference.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 48: **Fields:**\n\n**Content Preview:**\n```\n\n**Fields:**\n- `authority`: Governance authority address\n```\n\n---\n\n## 15. GMP Module Technical Details\n**File:** /root/neutron/docs/developers/modules/gmp/explanation.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 159: - **Source Fields**: The `source_chain` and `source_address` fields are informational only and should not be trusted for security decisions\n\n**Content Preview:**\n```\n\n- **Source Fields**: The `source_chain` and `source_address` fields are informational only and should not be trusted for security decisions\n- **Payload Validation**: Receiving applications must validate payload content independently\n```\n\n---\n\n## 16. Reference\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/reference.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 39: **Fields:**\n\n**Content Preview:**\n```\n\n**Fields:**\n- `authority`: Governance authority address\n```\n\n---\n\n## 17. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 89: - Specific fields within messages\n\n**Content Preview:**\n```\n- Message types\n- Specific fields within messages\n\n```\n\n---\n\n## 18. Reference\n**File:** /root/neutron/docs/developers/modules/interchain-queries/reference.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 51: **Fields:**\n\n**Content Preview:**\n```\n\n**Fields:**\n- `query_type` - The query type identifier: `\"kv\"` or `\"tx\"`\n```\n\n---\n\n## 19. How-To Guide\n**File:** /root/neutron/docs/developers/modules/tokenfactory/how-to.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 51: **Advanced metadata with custom fields:**\n\n**Content Preview:**\n```\n\n**Advanced metadata with custom fields:**\n\n```\n\n---\n\n## 20. Mechanism\n**File:** /root/neutron/docs/developers/modules/transfer/explanation.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 88: 2. **Traceability**: These fields allow contracts to store and track pending transfers until their callbacks are received.\n\n**Content Preview:**\n```\n\n2. **Traceability**: These fields allow contracts to store and track pending transfers until their callbacks are received.\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "2a679310-31d6-43a9-826c-5c41a26b3453",
            "tool_call_id": "call_NZWa7ddO22aYYA5i2DUQSofx",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_BZCeGsO2kq19LCB8yqE8cSzN",
                        "function": {
                            "arguments": "{\"query\": \"MsgAddSchedule example\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 423,
                    "prompt_tokens": 23069,
                    "total_tokens": 23492,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 384,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRGiokqzKY0vpGeM1KiiURM4C8Ag",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--592bf0e6-bf0e-43fd-bee6-955e6f3f6acf-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "MsgAddSchedule example",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_BZCeGsO2kq19LCB8yqE8cSzN",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 23069,
                "output_tokens": 423,
                "total_tokens": 23492,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 384
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"MsgAddSchedule example\":\n\n## 1. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 44: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 62: The `MsgAddSchedule` message contains:\n- Line 150: // Example: Periodic reward distribution with safety checks\n- Line 186: ## Common Use Cases and Examples\n- Line 198: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n\n**Content Preview:**\n```\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n\n---\n\n\nThe `MsgAddSchedule` message contains:\n\n\n---\n\n```rust\n// Example: Periodic reward distribution with safety checks\nfn handle_scheduled_execution(\n```\n\n---\n\n## 2. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 9\n\n**Matching lines:**\n- Line 10: ### MsgAddSchedule\n- Line 15: message MsgAddSchedule {\n- Line 190: Example proposal file to add a schedule:\n- Line 197: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n\n**Content Preview:**\n```\n\n### MsgAddSchedule\n\n\n---\n\n```protobuf\nmessage MsgAddSchedule {\n  string authority = 1;                      // The address of the governance account\n\n---\n\n\nExample proposal file to add a schedule:\n```json\n```\n\n---\n\n## 3. Client\n**File:** /root/neutron/docs/developers/modules/dex/client.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 39: **Examples:**\n- Line 89: **Example:**\n- Line 128: **Examples:**\n- Line 170: **Example:**\n- Line 189: **Example:**\n\n**Content Preview:**\n```\n\n**Examples:**\n\n\n---\n\n\n**Example:**\n```bash\n\n---\n\n\n**Examples:**\n\n```\n\n---\n\n## 4. Liquidity Iteration\n**File:** /root/neutron/docs/developers/modules/dex/concepts/liquidity-iteration.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 12: ### Example liquidity Placement\n- Line 37: ![Example liquidity iteration ](/img/duality-dex-deposit-1.png)\n- Line 43: ### Example Liquidity Iteration: Swap\n- Line 74: NOTE: For the clarity of this example we are assuming that the `PoolReserves` have a fee of zero. In a real world scenario almost all `PoolReserves` will have a fee. In a scenario with fees `TokenIn` will be added to $Tick * -1 + (2\\cdot fee$). Learn more about fees in the [PoolReserves](/developers/modules/dex/concepts/tick-liquidity#pool-reserves) section.\n- Line 77: ### Example liquidity Placement Post Swap\n\n**Content Preview:**\n```\n\n### Example liquidity Placement\n\n\n---\n\n\n![Example liquidity iteration ](/img/duality-dex-deposit-1.png)\n\n\n---\n\n\n### Example Liquidity Iteration: Swap\n\n```\n\n---\n\n## 5. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 215: ## Price Calculation Examples\n- Line 224: Example:\n- Line 237: Example:\n- Line 343: const baseFeeNtrn = gasUsed * 0.025; // Example gas price\n- Line 377: \"amount\": \"$(curl -s 'https://api.example.com/ntrn-atom-price')\"\n\n**Content Preview:**\n```\n\n## Price Calculation Examples\n\n\n---\n\n\nExample:\n- Asset: 100 ATOM\n\n---\n\n\nExample:\n- NTRN Amount: 15 NTRN\n```\n\n---\n\n## 6. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 14: // Example in CosmWasm\n- Line 59: // Example in CosmWasm\n- Line 136: Example output:\n- Line 201: Example:\n- Line 216: Example of querying for fee distribution events:\n\n**Content Preview:**\n```\n```rust\n// Example in CosmWasm\n\n\n---\n\n```rust\n// Example in CosmWasm\n\n\n---\n\n\nExample output:\n```json\n```\n\n---\n\n## 7. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 147: Locate the helper function for registering an Interchain Query that suits your requirements in the [neutron-sdk](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk/interchain_queries/v045/register_queries/index.html). For this example, we'll use the [new_register_balances_query_msg](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk/interchain_queries/v045/register_queries/fn.new_register_balances_query_msg.html) function.\n- Line 274: // For this example we just preserve the freshly fetched balances in the contract's state\n- Line 294: If your KV Interchain Query cannot be handled using the helpers from the [Interchain Queries related package](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk/interchain_queries/v045/register_queries/index.html) in [neutron-sdk](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk), you can define the `KVKeys` manually. This example demonstrates registering an [Account](https://github.com/cosmos/cosmos-sdk/blob/853dbbf3e84900214137805d78e325ecd56fd68f/proto/cosmos/auth/v1beta1/query.proto#L27-L31) Interchain Query for `cosmos-hub` `v21.0.0`.\n- Line 300: For this example:\n- Line 486: // For this example we just preserve the freshly fetched account in the contract's state\n\n**Content Preview:**\n```\n\nLocate the helper function for registering an Interchain Query that suits your requirements in the [neutron-sdk](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk/interchain_queries/v045/register_queries/index.html). For this example, we'll use the [new_register_balances_query_msg](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk/interchain_queries/v045/register_queries/fn.new_register_balances_query_msg.html) function.\n\n\n---\n\n    // Put your business logic here\n    // For this example we just preserve the freshly fetched balances in the contract's state\n    REMOTE_BALANCES.save(deps.storage, addr, &balance_resp.balances)?;\n\n---\n\n\nIf your KV Interchain Query cannot be handled using the helpers from the [Interchain Queries related package](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk/interchain_queries/v045/register_queries/index.html) in [neutron-sdk](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk), you can define the `KVKeys` manually. This example demonstrates registering an [Account](https://github.com/cosmos/cosmos-sdk/blob/853dbbf3e84900214137805d78e325ecd56fd68f/proto/cosmos/auth/v1beta1/query.proto#L27-L31) Interchain Query for `cosmos-hub` `v21.0.0`.\n\n```\n\n---\n\n## 8. Reference\n**File:** /root/neutron/docs/developers/modules/interchaintxs/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 84: #### Contract Example\n- Line 141: #### Contract Example\n- Line 211: #### CLI Example\n- Line 221: #### Response Example\n- Line 237: #### gRPC Example\n\n**Content Preview:**\n```\n\n#### Contract Example\n\n\n---\n\n\n#### Contract Example\n\n\n---\n\n\n#### CLI Example\n\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/revenue/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 5: This guide provides practical examples for interacting with the Revenue module, focusing on monitoring validator performance, treasury management, and parameter updates.\n- Line 23: Example response:\n- Line 69: Example:\n- Line 109: Example response:\n- Line 143: Example response:\n\n**Content Preview:**\n```\n\nThis guide provides practical examples for interacting with the Revenue module, focusing on monitoring validator performance, treasury management, and parameter updates.\n\n\n---\n\n\nExample response:\n```json\n\n---\n\n\nExample:\n```bash\n```\n\n---\n\n## 10. Bull vs. Bear Integration\n**File:** /root/neutron/docs/developers/sdk/bullbear-integration.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 22: <p className=\"mt-2\">Documentation and examples for leveraging Mars Protocol's lending capabilities.</p>\n- Line 66: ### Example Cluster Strategies\n- Line 133: ## Integration Examples\n- Line 138: // Example using BullBearLib\n- Line 234: // Example Mars Protocol interaction\n\n**Content Preview:**\n```\n  <Card title=\"Mars Protocol Integration\" icon=\"handshake\" iconType=\"duotone\">\n    <p className=\"mt-2\">Documentation and examples for leveraging Mars Protocol's lending capabilities.</p>\n    <p className=\"text-xs mt-2 text-gray-500\">DeFi \u2022 Lending \u2022 Leverage</p>\n\n---\n\n\n### Example Cluster Strategies\n\n\n---\n\n\n## Integration Examples\n\n```\n\n---\n\n## 11. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 32: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-ica-example\n- Line 33: cd neutron-ica-example\n- Line 42: name = \"neutron-ica-example\"\n- Line 44: authors = [\"Your Name <your.email@example.com>\"]\n- Line 894: neutrond tx wasm store artifacts/neutron_ica_example.wasm \\\n\n**Content Preview:**\n```\n```bash\ncargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-ica-example\ncd neutron-ica-example\n\n---\n\ncargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-ica-example\ncd neutron-ica-example\n```\n\n---\n\n[package]\nname = \"neutron-ica-example\"\nversion = \"0.1.0\"\n```\n\n---\n\n## 12. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 31: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\n- Line 32: cd neutron-icq-example\n- Line 41: name = \"neutron-icq-example\"\n- Line 43: authors = [\"Your Name <your.email@example.com>\"]\n- Line 1126: --label \"ICQ Example\" \\\n\n**Content Preview:**\n```\n```bash\ncargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\ncd neutron-icq-example\n\n---\n\ncargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\ncd neutron-icq-example\n```\n\n---\n\n[package]\nname = \"neutron-icq-example\"\nversion = \"0.1.0\"\n```\n\n---\n\n## 13. SDK & Developer Tools\n**File:** /root/neutron/docs/developers/sdk.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 32: ### Example Contracts\n- Line 34: The SDK repository includes several example contracts demonstrating Neutron's features:\n- Line 84: ### Example Usage\n- Line 135: See the [test-tube documentation](https://github.com/osmosis-labs/test-tube#readme) for setup instructions and examples.\n\n**Content Preview:**\n```\n\n### Example Contracts\n\n\n---\n\n\nThe SDK repository includes several example contracts demonstrating Neutron's features:\n\n\n---\n\n\n### Example Usage\n\n```\n\n---\n\n## 14. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 45: Example output:\n- Line 95: // Example of resubmitting a failed operation\n\n**Content Preview:**\n```\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n\nExample output:\n```json\n\n---\n\n```rust\n// Example of resubmitting a failed operation\npub fn resubmit_failure(\n```\n\n---\n\n## 15. How-to\n**File:** /root/neutron/docs/developers/modules/gmp/how-to.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 95: ## Programming Examples\n- Line 279: Example:\n- Line 296: Example:\n\n**Content Preview:**\n```\n\n## Programming Examples\n\n\n---\n\n\nExample:\n```json\n\n---\n\n\nExample:\n```json\n```\n\n---\n\n## 16. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 223: // Example of a robust handler that never fails\n- Line 366: ## Example: Tracking Delegation Events\n- Line 368: Here's a simplified example of using the Harpoon module to track delegation events:\n\n**Content Preview:**\n```\n```rust\n// Example of a robust handler that never fails\nfn handle_before_delegation_shares_modified(\n\n---\n\n\n## Example: Tracking Delegation Events\n\n\n---\n\n\nHere's a simplified example of using the Harpoon module to track delegation events:\n\n```\n\n---\n\n## 17. How-to\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/how-to.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 36: Example proposal.json:\n- Line 56: Once the contract is set up, rate limits are managed through contract messages. These examples use the Neutron CLI for interaction.\n- Line 124: This example creates:\n\n**Content Preview:**\n```\n\nExample proposal.json:\n```json\n\n---\n\n\nOnce the contract is set up, rate limits are managed through contract messages. These examples use the Neutron CLI for interaction.\n\n\n---\n\n\nThis example creates:\n- A daily outflow limit of 30% of the total token supply\n```\n\n---\n\n## 18. Reference\n**File:** /root/neutron/docs/developers/modules/interchain-queries/reference.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 9: This documentation is verified against the actual module code and proto definitions. All examples are provided for demonstration purposes and may not reflect the current state of the chain.\n- Line 173: <summary>Example Response</summary>\n- Line 532: For implementation examples and detailed guides, see the [How-to Guide](/developers/modules/interchain-queries/how-to) and [Explanation](/developers/modules/interchain-queries/explanation) sections.\n\n**Content Preview:**\n```\n<Info>\nThis documentation is verified against the actual module code and proto definitions. All examples are provided for demonstration purposes and may not reflect the current state of the chain.\n</Info>\n\n---\n\n<details>\n<summary>Example Response</summary>\n\n\n---\n\n\nFor implementation examples and detailed guides, see the [How-to Guide](/developers/modules/interchain-queries/how-to) and [Explanation](/developers/modules/interchain-queries/explanation) sections. \n```\n\n---\n\n## 19. ICTX Explanation\n**File:** /root/neutron/docs/developers/modules/interchaintxs/explanation.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 167: When errors occur, the contract receives an acknowledgement with format `codespace: <module>, code: <error_code>`. For example:\n- Line 212: For example, if contract `neutron14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9s5c2epq` registers an account with ID `hub/1`, the port becomes:\n- Line 224: For example, in Hermes relayer, you can restrict relaying to specific contracts:\n\n**Content Preview:**\n```\n\nWhen errors occur, the contract receives an acknowledgement with format `codespace: <module>, code: <error_code>`. For example:\n\n\n---\n\n\nFor example, if contract `neutron14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9s5c2epq` registers an account with ID `hub/1`, the port becomes:\n\n\n---\n\n\nFor example, in Hermes relayer, you can restrict relaying to specific contracts:\n\n```\n\n---\n\n## 20. How To\n**File:** /root/neutron/docs/developers/modules/interchaintxs/how-to.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 5: This guide provides practical examples for implementing interchain transactions in CosmWasm smart contracts, focusing on registering interchain accounts and executing remote transactions.\n- Line 339: Here are examples of creating different Cosmos SDK messages for execution on remote chains:\n- Line 428: Example:\n\n**Content Preview:**\n```\n\nThis guide provides practical examples for implementing interchain transactions in CosmWasm smart contracts, focusing on registering interchain accounts and executing remote transactions.\n\n\n---\n\n\nHere are examples of creating different Cosmos SDK messages for execution on remote chains:\n\n\n---\n\n\nExample:\n```bash\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "1e814681-38dc-46f8-ba00-768980e33473",
            "tool_call_id": "call_BZCeGsO2kq19LCB8yqE8cSzN",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_9OJdW4AwLTocFcMNbbsUfDjw",
                        "function": {
                            "arguments": "{\"query\": \"cron schedule contains: target_contract\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 169,
                    "prompt_tokens": 28106,
                    "total_tokens": 28275,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 128,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRGx7CTDvWJb2i0l9Z8f0Z9ViCpV",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--03f18b5a-cd41-435b-95e4-8f594533efaa-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "cron schedule contains: target_contract",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_9OJdW4AwLTocFcMNbbsUfDjw",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 28106,
                "output_tokens": 169,
                "total_tokens": 28275,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 128
                }
            }
        },
        {
            "content": "Found 18 result(s) for \"cron schedule contains: target_contract\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n```\n\n---\n\n## 3. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 12: - Access to governance proposal submission (for schedule creation)\n- Line 14: ## Understanding Cron Module Access\n- Line 16: The Cron module is **governance-gated**, meaning:\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n```\n\n---\n\n## 4. Known Bugs\n**File:** /root/neutron/docs/developers/modules/cron/known-bugs.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Known issues and limitations of the Cron module\"\n- Line 8: The Cron module is functioning as designed with no known critical bugs at this time.\n- Line 14: The Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n- Line 16: - If average block time changes significantly, the real-world timing of scheduled executions will be affected\n- Line 17: - Schedules are not guaranteed to execute at exact time intervals\n\n**Content Preview:**\n```\ntitle: \"Known Bugs\"\ndescription: \"Known issues and limitations of the Cron module\"\n---\n\n---\n\n\nThe Cron module is functioning as designed with no known critical bugs at this time.\n\n\n---\n\n\nThe Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n\n```\n\n---\n\n## 5. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 12: Creates a new schedule through governance proposal.\n- Line 15: message MsgAddSchedule {\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\n### MsgAddSchedule\n\n```\n\n---\n\n## 6. Introduction to Indexers\n**File:** /root/neutron/docs/developers/tutorials/indexers/intro.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 159: ### Cron Job Executions\n- Line 162: // Monitor automated cron executions\n- Line 163: const cronExecutions = await api.query(\n- Line 165: cronExecutions(first: 50) {\n- Line 166: scheduleName\n\n**Content Preview:**\n```\n\n### Cron Job Executions\n\n\n---\n\n```javascript\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n\n---\n\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n  `query {\n```\n\n---\n\n## 7. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 108: ### 2. Cron Module Tests\n- Line 111: func (s *IntegrationTestSuite) TestCronModule() {\n- Line 114: // Create a cron schedule\n- Line 115: scheduleMsg := &crontypes.MsgAddSchedule{\n- Line 117: Name:      \"test-schedule\",\n\n**Content Preview:**\n```\n\n### 2. Cron Module Tests\n\n\n---\n\n```go\nfunc (s *IntegrationTestSuite) TestCronModule() {\n    val := s.network.Validators[0]\n\n---\n\n    \n    // Create a cron schedule\n    scheduleMsg := &crontypes.MsgAddSchedule{\n```\n\n---\n\n## 8. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 29: <Card title=\"Cron\" icon=\"clock\">\n- Line 30: Schedule automated contract executions\n- Line 273: ## Using the Cron Module\n- Line 275: Schedule automated executions using Neutron's Cron module:\n\n**Content Preview:**\n```\n\n- How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Inter-contract communication patterns\n\n---\n\n  </Card>\n  <Card title=\"Cron\" icon=\"clock\">\n    Schedule automated contract executions\n\n---\n\n  <Card title=\"Cron\" icon=\"clock\">\n    Schedule automated contract executions\n  </Card>\n```\n\n---\n\n## 9. Client\n**File:** /root/neutron/docs/developers/modules/dex/client.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 1015: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/params\n- Line 1020: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/deposits/{address}\n- Line 1025: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/limit_orders/{address}\n- Line 1030: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/pool_metadata\n- Line 1035: curl -X POST https://rest-falcron.pion-1.ntrn.tech/neutron/dex/simulate_multi_hop_swap \\\n\n**Content Preview:**\n```\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/params\n```\n\n---\n\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/deposits/{address}\n```\n\n---\n\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/limit_orders/{address}\n```\n```\n\n---\n\n## 10. Explanation\n**File:** /root/neutron/docs/developers/modules/revenue/explanation.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 9: The Revenue module's primary responsibility is to assess validator performance, calculate appropriate compensation, and distribute rewards according to configurable schedules. The system leverages real-time performance data and price information to ensure fair and timely compensation.\n- Line 15: A --> D[Check Payment Schedule]\n- Line 78: The module supports multiple payment schedule types:\n- Line 84: The payment schedule is stored in two components:\n- Line 85: - The **schedule type** in the module parameters (controllable by governance)\n\n**Content Preview:**\n```\n\nThe Revenue module's primary responsibility is to assess validator performance, calculate appropriate compensation, and distribute rewards according to configurable schedules. The system leverages real-time performance data and price information to ensure fair and timely compensation.\n\n\n---\n\n    A --> C[Process Extended Commit Info]\n    A --> D[Check Payment Schedule]\n    C --> E[Record Validator Participation]\n\n---\n\n\nThe module supports multiple payment schedule types:\n\n```\n\n---\n\n## 11. How-to\n**File:** /root/neutron/docs/developers/modules/revenue/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 95: Check the current payment schedule and revenue calculation details.\n- Line 112: \"payment_schedule\": {\n- Line 113: \"monthly_payment_schedule\": {\n- Line 160: \"payment_schedule_type\": {\n- Line 161: \"monthly_payment_schedule_type\": {}\n\n**Content Preview:**\n```\n\nCheck the current payment schedule and revenue calculation details.\n\n\n---\n\n{\n  \"payment_schedule\": {\n    \"monthly_payment_schedule\": {\n\n---\n\n  \"payment_schedule\": {\n    \"monthly_payment_schedule\": {\n      \"current_month_start_block\": \"12345\",\n```\n\n---\n\n## 12. Reference\n**File:** /root/neutron/docs/developers/modules/revenue/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 6: The Revenue module manages validator compensation based on performance metrics and payment schedules.\n- Line 16: | `payment_schedule_type` | object | Type of payment schedule (monthly, block-based, or empty) |\n- Line 51: Retrieve the current payment schedule and revenue calculation information.\n- Line 54: - `payment_schedule`: Current payment schedule with period tracking\n- Line 110: - **Payment Schedules**: Configurable payment periods (monthly or block-based)\n\n**Content Preview:**\n```\n\nThe Revenue module manages validator compensation based on performance metrics and payment schedules.\n\n\n---\n\n| `oracle_votes_performance_requirement` | object | Performance thresholds for oracle vote submissions |\n| `payment_schedule_type` | object | Type of payment schedule (monthly, block-based, or empty) |\n| `twap_window` | int64 | Time window in seconds for calculating asset price averages |\n\n---\n\n### QueryPaymentInfo\nRetrieve the current payment schedule and revenue calculation information.\n\n```\n\n---\n\n## 13. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 20: <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n- Line 21: Schedule automated contract executions\n\n**Content Preview:**\n```\n  \n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n\n---\n\n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n  </Card>\n```\n\n---\n\n## 14. Developer Tutorials\n**File:** /root/neutron/docs/developers/tutorials/overview.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 23: - **[Cron Module](/developers/modules/cron/overview)** - Schedule automated contract executions on-chain without external bots\n- Line 32: Building with ICQ and ICA together with cron and oracle represents Neutron's core value proposition: **integrated cross-chain development** where your smart contracts can seamlessly interact with other blockchains without bridges or external infrastructure.\n\n**Content Preview:**\n```\n\n- **[Cron Module](/developers/modules/cron/overview)** - Schedule automated contract executions on-chain without external bots\n- **[Oracle](/validators/oracle-setup)** - Learn about Neutron's high-frequency price oracle that provides reliable price data\n\n---\n\n\nBuilding with ICQ and ICA together with cron and oracle represents Neutron's core value proposition: **integrated cross-chain development** where your smart contracts can seamlessly interact with other blockchains without bridges or external infrastructure.\n\n```\n\n---\n\n## 15. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 56: For the most current information on the status of our RPCs and any scheduled maintenance, please visit our <a href=\"https://status.neutron.org/\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Status</a> page. This page provides real-time updates and alerts regarding the operational status of all Neutron services.\n\n**Content Preview:**\n```\n\nFor the most current information on the status of our RPCs and any scheduled maintenance, please visit our <a href=\"https://status.neutron.org/\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Status</a> page. This page provides real-time updates and alerts regarding the operational status of all Neutron services.\n\n```\n\n---\n\n## 16. Messages\n**File:** /root/neutron/docs/developers/modules/dex/messages.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 376: Each `MultiHopRoute` contains:\n\n**Content Preview:**\n```\n\nEach `MultiHopRoute` contains:\n\n```\n\n---\n\n## 17. Reference\n**File:** /root/neutron/docs/developers/modules/dynamicfees/reference.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 15: Each price entry contains:\n\n**Content Preview:**\n```\n### Price Format\nEach price entry contains:\n- `denom`: Asset denomination (e.g., \"uatom\", \"uosmo\")\n```\n\n---\n\n## 18. Revenue Module\n**File:** /root/neutron/docs/developers/modules/revenue/overview.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 14: <Card title=\"Configurable Payment Schedules\" icon=\"calendar\">\n\n**Content Preview:**\n```\n  </Card>\n  <Card title=\"Configurable Payment Schedules\" icon=\"calendar\">\n    Flexible payment periods (monthly or block-based) with automatic rewards distribution at the end of each period.\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "73ce1ced-1a41-4307-b4ec-f73e7143e896",
            "tool_call_id": "call_9OJdW4AwLTocFcMNbbsUfDjw",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_hIu5cm0QyVGrkgfZRadUtsIr",
                        "function": {
                            "arguments": "{\"query\": \"MsgUpdateSchedule\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 742,
                    "prompt_tokens": 32454,
                    "total_tokens": 33196,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 704,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRH3mGYWOM9hpCmmBRTf8XmuvNPE",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--310303e6-b9c2-42d0-867a-260ddf22e2bb-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "MsgUpdateSchedule",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_hIu5cm0QyVGrkgfZRadUtsIr",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 32454,
                "output_tokens": 742,
                "total_tokens": 33196,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 704
                }
            }
        },
        {
            "content": "No results found for \"MsgUpdateSchedule\". Try different keywords or search terms.",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "152f7598-5b52-4b12-abeb-eac2e4428bb6",
            "tool_call_id": "call_hIu5cm0QyVGrkgfZRadUtsIr",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_HY0j9hgMi0UTqdvuwBqygmJ6",
                        "function": {
                            "arguments": "{\"query\":\"The `MsgAddSchedule` message contains\",\"section\":\"developers\",\"max_results\":20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 294,
                    "prompt_tokens": 32919,
                    "total_tokens": 33213,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 256,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 32384
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRHVuUPoigGpOYOFUIXtyC7Q2Of5",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--9024fbf1-e8a5-477a-909d-44a613b6b88f-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "The `MsgAddSchedule` message contains",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_HY0j9hgMi0UTqdvuwBqygmJ6",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 32919,
                "output_tokens": 294,
                "total_tokens": 33213,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 32384
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 256
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"The `MsgAddSchedule` message contains\":\n\n## 1. Messages\n**File:** /root/neutron/docs/developers/modules/dex/messages.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Messages\"\n- Line 5: The Dex module exposes several message types for interacting with the decentralized exchange. Here's a detailed documentation of each message and its expected behavior.\n- Line 12: message MsgDeposit {\n- Line 33: message DepositOptions {\n- Line 45: | `creator` | string | Address of the message sender |\n\n**Content Preview:**\n```\n---\ntitle: \"Messages\"\n---\n\n---\n\n\nThe Dex module exposes several message types for interacting with the decentralized exchange. Here's a detailed documentation of each message and its expected behavior.\n\n\n---\n\n```protobuf\nmessage MsgDeposit {\n  option (amino.name) = \"dex/MsgDeposit\";\n```\n\n---\n\n## 2. Reference\n**File:** /root/neutron/docs/developers/modules/dynamicfees/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Basic reference for the Dynamic Fees module\"\n- Line 6: The Dynamic Fees module provides asset price conversion capabilities for the fee market by maintaining NTRN-denominated prices for supported assets.\n- Line 15: Each price entry contains:\n- Line 22: Retrieve the current asset price registry.\n- Line 27: ## Messages\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Basic reference for the Dynamic Fees module\"\n---\n\n---\n\n\nThe Dynamic Fees module provides asset price conversion capabilities for the fee market by maintaining NTRN-denominated prices for supported assets.\n\n\n---\n\n### Price Format\nEach price entry contains:\n- `denom`: Asset denomination (e.g., \"uatom\", \"uosmo\")\n```\n\n---\n\n## 3. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: This document provides an in-depth technical explanation of the admin module's architecture, governance mechanisms, and implementation details.\n- Line 9: **Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 14: The admin module serves as the central governance hub for the Neutron network, designed to handle administrative operations through a secure, controlled framework. The module architecture consists of several key components working together to ensure safe and effective network governance.\n- Line 18: #### Message Server\n- Line 19: The message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n\n**Content Preview:**\n```\n\nThis document provides an in-depth technical explanation of the admin module's architecture, governance mechanisms, and implementation details.\n\n\n---\n\n<Warning>\n**Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module serves as the central governance hub for the Neutron network, designed to handle administrative operations through a secure, controlled framework. The module architecture consists of several key components working together to ensure safe and effective network governance.\n\n```\n\n---\n\n## 4. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Understanding how the Main DAO interacts with the admin module\"\n- Line 6: This guide explains how the admin module works within Neutron's governance system. Unlike other modules that users can interact with directly, the admin module is exclusively accessible by the **Main DAO contract**.\n- Line 9: The admin module cannot be used directly by individual users or external contracts. All interactions must go through Neutron's DAO governance process.\n- Line 14: The admin module operates under a strict access control model:\n- Line 16: - **Only the Main DAO contract** can send messages to the admin module\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Understanding how the Main DAO interacts with the admin module\"\n---\n\n---\n\n\nThis guide explains how the admin module works within Neutron's governance system. Unlike other modules that users can interact with directly, the admin module is exclusively accessible by the **Main DAO contract**.\n\n\n---\n\n<Warning>\nThe admin module cannot be used directly by individual users or external contracts. All interactions must go through Neutron's DAO governance process.\n</Warning>\n```\n\n---\n\n## 5. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n- Line 9: **Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 12: The admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n- Line 16: - [Overview](/developers/modules/admin/overview) \u2014 a high-level description of the module.\n- Line 17: - [Explanation](/developers/modules/admin/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n\nThe admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n\n\n---\n\n<Warning>\n**Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n\n```\n\n---\n\n## 6. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Basic technical reference for the admin module\"\n- Line 6: The admin module provides governance-level administrative functions for the Neutron network.\n- Line 9: **DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n- Line 12: ## Messages\n- Line 15: Submit a proposal with multiple messages for execution.\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Basic technical reference for the admin module\"\n---\n\n---\n\n\nThe admin module provides governance-level administrative functions for the Neutron network.\n\n\n---\n\n<Warning>\n**DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n</Warning>\n```\n\n---\n\n## 7. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Contract Manager module, including handling failures and resubmitting failed operations.\n- Line 17: // Store the data instead of processing it immediately\n- Line 31: 2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n- Line 32: 3. **Handle All Message Types**: Implement handlers for all expected sudo message types\n- Line 33: 4. **Prepare for Resubmission**: Design your contract to handle potential resubmission of messages\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Contract Manager module, including handling failures and resubmitting failed operations.\n\n\n---\n\n        SudoMsg::Response { request, data } => {\n            // Store the data instead of processing it immediately\n            PENDING_RESPONSES.save(deps.storage, &data)?;\n\n---\n\n1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n3. **Handle All Message Types**: Implement handlers for all expected sudo message types\n```\n\n---\n\n## 8. Overview\n**File:** /root/neutron/docs/developers/modules/contractmanager/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: The Contract Manager module provides a safety mechanism for handling IBC acknowledgment failures in smart contracts. It ensures that malicious or buggy contracts cannot disrupt IBC channels or burden relayers by implementing error handling strategies for sudo calls.\n- Line 9: - **Error Containment**: Prevents contract errors from disrupting IBC channels by capturing and storing errors rather than failing the channel\n- Line 15: - **Failure Resubmission**: Allows contracts to resubmit failed operations outside of the relayer context\n- Line 17: The module is essential for maintaining the reliability of IBC communications while allowing smart contracts to interact with IBC channels safely.\n- Line 21: When a contract uses IBC functionality and receives an acknowledgment, the message from the counterparty chain is delivered via a sudo call. The Contract Manager module:\n\n**Content Preview:**\n```\n\nThe Contract Manager module provides a safety mechanism for handling IBC acknowledgment failures in smart contracts. It ensures that malicious or buggy contracts cannot disrupt IBC channels or burden relayers by implementing error handling strategies for sudo calls.\n\n\n---\n\n\n- **Error Containment**: Prevents contract errors from disrupting IBC channels by capturing and storing errors rather than failing the channel\n  \n\n---\n\n\n- **Failure Resubmission**: Allows contracts to resubmit failed operations outside of the relayer context\n\n```\n\n---\n\n## 9. Reference\n**File:** /root/neutron/docs/developers/modules/contractmanager/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Technical reference for the Contract Manager module\"\n- Line 6: The Contract Manager module manages sudo call failures and provides resubmission capabilities for IBC-related contract operations.\n- Line 19: message Failure {\n- Line 20: // Address of the failed contract\n- Line 22: // Id of the failure under specific address\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Technical reference for the Contract Manager module\"\n---\n\n---\n\n\nThe Contract Manager module manages sudo call failures and provides resubmission capabilities for IBC-related contract operations.\n\n\n---\n\n```protobuf\nmessage Failure {\n  // Address of the failed contract\n```\n\n---\n\n## 10. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 6: ## Messages\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 15: message MsgAddSchedule {\n- Line 16: string authority = 1;                      // The address of the governance account\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\n## Messages\n\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n```\n\n---\n\n## 11. Tick Liquidity\n**File:** /root/neutron/docs/developers/modules/dex/concepts/tick-liquidity.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: `TickLiquidity` structs are used to store liquidity within the Dex. Each tick has a specific price and holds liquidity for a single token. `TickLiquidity` come in two general types:`PoolReserves` for storing LP positions and `LimitOrderTranche`s for storing limit orders. Both `TickLiquidity` types are indexed by a key which shares a number of fields in common. These two types make up the fundamental building blocks of the DEX orderbook, and are critical to the [liquidity iteration mechanism](/developers/modules/dex/concepts/liquidity-iteration). `TickLiquidity`s contain all of the necessary information to perform a swap, namely price and available reserves. Each `TickLiquidity` instance has a `TradePairID`, `TickIndexTakerToMaker`. A `TradePairID` containing the fields `MakerDenom` and `TakerDenom` describes what denom is held in the `TickLiquidity` (`MakerDenom`) and what denom it can be traded with (`TakerDenom`). `TickIndexTakerToMaker` describes the tick at which a certain liquidity is stored and by extension its `MakerPrice`.\n- Line 9: `PairID`s are the canonical way which we refer to the two tokens in a pair. In order to ensure uniqueness the denoms are sorted alphabetically, with the first denom stored as `Token0` and the second as `Token1`.\n- Line 20: We stringify `PairID`s in the form `[Token0]<>[Token1]` ie. _'ATOM&lt;&gt;USDC'_.\n- Line 24: A `Pool` contains all the information required for a single constant-priced AMM to exist. It holds liquidity for both sides of a pair, `Token0` and `Token1` named `LowerTick0` and `UpperTick1` respectively. Pools are not explicitly stored anywhere, but their `PoolReserves` content is.\n- Line 35: `PoolReserves` are the core components for Neutron DEX's AMM design. Each `PoolReserves` instance represents a single side of a liquidity pool. They contain all the information needed to perform that swap.  They also nest a `Fee` and a `TradePaidId`, both of which are used to find the corresponding PoolReserves on the other side of the pool.\n\n**Content Preview:**\n```\n\n`TickLiquidity` structs are used to store liquidity within the Dex. Each tick has a specific price and holds liquidity for a single token. `TickLiquidity` come in two general types:`PoolReserves` for storing LP positions and `LimitOrderTranche`s for storing limit orders. Both `TickLiquidity` types are indexed by a key which shares a number of fields in common. These two types make up the fundamental building blocks of the DEX orderbook, and are critical to the [liquidity iteration mechanism](/developers/modules/dex/concepts/liquidity-iteration). `TickLiquidity`s contain all of the necessary information to perform a swap, namely price and available reserves. Each `TickLiquidity` instance has a `TradePairID`, `TickIndexTakerToMaker`. A `TradePairID` containing the fields `MakerDenom` and `TakerDenom` describes what denom is held in the `TickLiquidity` (`MakerDenom`) and what denom it can be traded with (`TakerDenom`). `TickIndexTakerToMaker` describes the tick at which a certain liquidity is stored and by extension its `MakerPrice`.\n\n\n---\n\n\n`PairID`s are the canonical way which we refer to the two tokens in a pair. In order to ensure uniqueness the denoms are sorted alphabetically, with the first denom stored as `Token0` and the second as `Token1`.\n\n\n---\n\n\nWe stringify `PairID`s in the form `[Token0]<>[Token1]` ie. _'ATOM&lt;&gt;USDC'_.\n\n```\n\n---\n\n## 12. DEX Events\n**File:** /root/neutron/docs/developers/modules/dex/events.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Events emitted by the DEX module during transaction processing\"\n- Line 6: The DEX module emits events during transaction processing to provide information about deposits, withdrawals, limit orders, and swaps. All events use the standard Cosmos SDK event format with module name \"dex\".\n- Line 14: **Event Type:** `message`\n- Line 19: - `Creator`: Address of the user who initiated the deposit\n- Line 20: - `Receiver`: Address that received the liquidity position\n\n**Content Preview:**\n```\ntitle: \"DEX Events\"\ndescription: \"Events emitted by the DEX module during transaction processing\"\n---\n\n---\n\n\nThe DEX module emits events during transaction processing to provide information about deposits, withdrawals, limit orders, and swaps. All events use the standard Cosmos SDK event format with module name \"dex\".\n\n\n---\n\n\n**Event Type:** `message`  \n**Module:** `dex`  \n```\n\n---\n\n## 13. DEX Reference\n**File:** /root/neutron/docs/developers/modules/dex/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Technical reference for the DEX module data structures and types\"\n- Line 8: The DEX module uses the following data structures defined in the protocol buffer files:\n- Line 13: message Pool {\n- Line 23: message PoolReserves {\n- Line 39: message PoolReservesKey {\n\n**Content Preview:**\n```\ntitle: \"DEX Reference\"\ndescription: \"Technical reference for the DEX module data structures and types\"\n---\n\n---\n\n\nThe DEX module uses the following data structures defined in the protocol buffer files:\n\n\n---\n\n```protobuf\nmessage Pool {\n  uint64 id = 1;\n```\n\n---\n\n## 14. DEX State\n**File:** /root/neutron/docs/developers/modules/dex/state.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"State management and storage in the DEX module\"\n- Line 6: The DEX module maintains state to track pools, reserves, limit orders, and user positions. All state objects are defined in protocol buffer files and stored in the module's key-value store.\n- Line 15: message Pool {\n- Line 24: Stores the actual token reserves for a pool at a specific price point.\n- Line 27: message PoolReserves {\n\n**Content Preview:**\n```\ntitle: \"DEX State\"\ndescription: \"State management and storage in the DEX module\"\n---\n\n---\n\n\nThe DEX module maintains state to track pools, reserves, limit orders, and user positions. All state objects are defined in protocol buffer files and stored in the module's key-value store.\n\n\n---\n\n```protobuf\nmessage Pool {\n  uint64 id = 1;\n```\n\n---\n\n## 15. Reference\n**File:** /root/neutron/docs/developers/modules/feeburner/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Basic reference for the Fee Burner module\"\n- Line 6: The Fee Burner module automatically burns NTRN tokens and redirects non-NTRN fees to the treasury during fee processing.\n- Line 19: Retrieve the current module parameters.\n- Line 25: Retrieve the total amount of NTRN tokens burned since genesis.\n- Line 30: ## Messages\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Basic reference for the Fee Burner module\"\n---\n\n---\n\n\nThe Fee Burner module automatically burns NTRN tokens and redirects non-NTRN fees to the treasury during fee processing.\n\n\n---\n\n### QueryParams\nRetrieve the current module parameters.\n\n```\n\n---\n\n## 16. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n- Line 11: When using the `MsgTransfer` message from the IBC Transfer module, you need to include fees for relayers:\n- Line 20: // Create the fee structure\n- Line 25: // Fee paid to the relayer who delivers acknowledgment\n- Line 31: // Fee paid to the relayer who delivers timeout\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n\n\n---\n\n\nWhen using the `MsgTransfer` message from the IBC Transfer module, you need to include fees for relayers:\n\n\n---\n\n\n// Create the fee structure\nlet fee = IbcFee {\n```\n\n---\n\n## 17. Overview\n**File:** /root/neutron/docs/developers/modules/feerefunder/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: The Fee Refunder module implements a mechanism to reimburse IBC relayers for their costs when submitting acknowledgement and timeout packets. It solves a critical economic challenge in the IBC ecosystem by ensuring relayers are compensated for their services.\n- Line 11: - **Smart Contract Fee Management**: Requires smart contracts to pre-pay fees for the IBC packets they send\n- Line 13: - **Fee Escrow**: Locks fees when packets are sent and distributes them appropriately when acknowledgements or timeouts are processed\n- Line 19: The Fee Refunder module operates through the following workflow:\n- Line 21: 1. **Fee Collection**: Smart contracts can lock fees for acknowledgement and timeout processing by calling the LockFees message with the IBC packet information\n\n**Content Preview:**\n```\n\nThe Fee Refunder module implements a mechanism to reimburse IBC relayers for their costs when submitting acknowledgement and timeout packets. It solves a critical economic challenge in the IBC ecosystem by ensuring relayers are compensated for their services.\n\n\n---\n\n  \n- **Smart Contract Fee Management**: Requires smart contracts to pre-pay fees for the IBC packets they send\n  \n\n---\n\n  \n- **Fee Escrow**: Locks fees when packets are sent and distributes them appropriately when acknowledgements or timeouts are processed\n\n```\n\n---\n\n## 18. Reference\n**File:** /root/neutron/docs/developers/modules/feerefunder/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Complete technical reference for the Fee Refunder module\"\n- Line 6: The Fee Refunder module manages fee distribution for IBC packet acknowledgements and timeouts, ensuring relayers are compensated for successful packet delivery.\n- Line 19: ## Messages\n- Line 33: Retrieve the current module parameters.\n- Line 57: The module emits the following events:\n\n**Content Preview:**\n```\ntitle: \"Reference\"  \ndescription: \"Complete technical reference for the Fee Refunder module\"\n---\n\n---\n\n\nThe Fee Refunder module manages fee distribution for IBC packet acknowledgements and timeouts, ensuring relayers are compensated for successful packet delivery.\n\n\n---\n\n\n## Messages\n\n```\n\n---\n\n## 19. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 12: Only governance can update Global Fee module parameters. Individual users cannot directly modify these settings.\n- Line 31: \"description\": \"Adjust minimum gas prices and bypass message types\",\n- Line 61: ### Add New Bypass Message Types\n- Line 63: To allow certain message types to bypass minimum fees:\n- Line 164: console.log(\"Bypass message types:\", params.bypass_min_fee_msg_types);\n\n**Content Preview:**\n```\n<Warning>\nOnly governance can update Global Fee module parameters. Individual users cannot directly modify these settings.\n</Warning>\n\n---\n\n  \"title\": \"Update Global Fee Parameters\",\n  \"description\": \"Adjust minimum gas prices and bypass message types\",\n  \"changes\": [\n\n---\n\n\n### Add New Bypass Message Types\n\n```\n\n---\n\n## 20. Overview\n**File:** /root/neutron/docs/developers/modules/globalfee/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: The Global Fee module enforces minimum gas prices across the entire Neutron network and provides mechanisms for fee exemptions on specific message types. This module is essential for network security and economic sustainability.\n- Line 8: **Governance-Controlled Parameters**: The Global Fee module's parameters (minimum gas prices, bypass message types) can only be updated through governance proposals. Individual users cannot directly modify module settings.\n- Line 17: - **Message Type Bypass**: Allows specific message types to bypass minimum fee requirements\n- Line 19: - **Gas Usage Limits**: Controls the maximum gas usage allowed for fee-exempt transactions\n- Line 25: The Global Fee module operates through the following workflow:\n\n**Content Preview:**\n```\n\nThe Global Fee module enforces minimum gas prices across the entire Neutron network and provides mechanisms for fee exemptions on specific message types. This module is essential for network security and economic sustainability.\n\n\n---\n\n<Info>\n**Governance-Controlled Parameters**: The Global Fee module's parameters (minimum gas prices, bypass message types) can only be updated through governance proposals. Individual users cannot directly modify module settings.\n</Info>\n\n---\n\n\n- **Message Type Bypass**: Allows specific message types to bypass minimum fee requirements\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "98f3c956-99f5-4ab1-8b82-75a8385ed8a1",
            "tool_call_id": "call_HY0j9hgMi0UTqdvuwBqygmJ6",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_STtnDqjYDx0YxVgVP0lWg90q",
                        "function": {
                            "arguments": "{\"query\": \"execution stage BeginBlocker cron schedule\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 298,
                    "prompt_tokens": 39677,
                    "total_tokens": 39975,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 256,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 13440
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRHdMGETuIY06gtPSxeBTtY8a3De",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--378202fc-ea68-4223-adff-9aa3158030a6-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "execution stage BeginBlocker cron schedule",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_STtnDqjYDx0YxVgVP0lWg90q",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 39677,
                "output_tokens": 298,
                "total_tokens": 39975,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 13440
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 256
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"execution stage BeginBlocker cron schedule\":\n\n## 1. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n```\n\n---\n\n## 2. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 3. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 12: - Access to governance proposal submission (for schedule creation)\n- Line 14: ## Understanding Cron Module Access\n- Line 16: The Cron module is **governance-gated**, meaning:\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n```\n\n---\n\n## 4. Known Bugs\n**File:** /root/neutron/docs/developers/modules/cron/known-bugs.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Known issues and limitations of the Cron module\"\n- Line 8: The Cron module is functioning as designed with no known critical bugs at this time.\n- Line 14: The Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n- Line 16: - If average block time changes significantly, the real-world timing of scheduled executions will be affected\n- Line 17: - Schedules are not guaranteed to execute at exact time intervals\n\n**Content Preview:**\n```\ntitle: \"Known Bugs\"\ndescription: \"Known issues and limitations of the Cron module\"\n---\n\n---\n\n\nThe Cron module is functioning as designed with no known critical bugs at this time.\n\n\n---\n\n\nThe Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n\n```\n\n---\n\n## 5. Introduction to Indexers\n**File:** /root/neutron/docs/developers/tutorials/indexers/intro.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 159: ### Cron Job Executions\n- Line 162: // Monitor automated cron executions\n- Line 163: const cronExecutions = await api.query(\n- Line 165: cronExecutions(first: 50) {\n- Line 166: scheduleName\n\n**Content Preview:**\n```\n\n### Cron Job Executions\n\n\n---\n\n```javascript\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n\n---\n\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n  `query {\n```\n\n---\n\n## 6. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 29: <Card title=\"Cron\" icon=\"clock\">\n- Line 30: Schedule automated contract executions\n- Line 273: ## Using the Cron Module\n- Line 275: Schedule automated executions using Neutron's Cron module:\n\n**Content Preview:**\n```\n\n- How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Inter-contract communication patterns\n\n---\n\n  </Card>\n  <Card title=\"Cron\" icon=\"clock\">\n    Schedule automated contract executions\n\n---\n\n  <Card title=\"Cron\" icon=\"clock\">\n    Schedule automated contract executions\n  </Card>\n```\n\n---\n\n## 7. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 12: Creates a new schedule through governance proposal.\n- Line 15: message MsgAddSchedule {\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\n### MsgAddSchedule\n\n```\n\n---\n\n## 8. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 108: ### 2. Cron Module Tests\n- Line 111: func (s *IntegrationTestSuite) TestCronModule() {\n- Line 114: // Create a cron schedule\n- Line 115: scheduleMsg := &crontypes.MsgAddSchedule{\n- Line 117: Name:      \"test-schedule\",\n\n**Content Preview:**\n```\n\n### 2. Cron Module Tests\n\n\n---\n\n```go\nfunc (s *IntegrationTestSuite) TestCronModule() {\n    val := s.network.Validators[0]\n\n---\n\n    \n    // Create a cron schedule\n    scheduleMsg := &crontypes.MsgAddSchedule{\n```\n\n---\n\n## 9. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 9\n\n**Matching lines:**\n- Line 20: <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n- Line 21: Schedule automated contract executions\n\n**Content Preview:**\n```\n  \n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n\n---\n\n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n  </Card>\n```\n\n---\n\n## 10. Developer Tutorials\n**File:** /root/neutron/docs/developers/tutorials/overview.mdx\n**Section:** developers\n**Relevance Score:** 9\n\n**Matching lines:**\n- Line 23: - **[Cron Module](/developers/modules/cron/overview)** - Schedule automated contract executions on-chain without external bots\n- Line 32: Building with ICQ and ICA together with cron and oracle represents Neutron's core value proposition: **integrated cross-chain development** where your smart contracts can seamlessly interact with other blockchains without bridges or external infrastructure.\n\n**Content Preview:**\n```\n\n- **[Cron Module](/developers/modules/cron/overview)** - Schedule automated contract executions on-chain without external bots\n- **[Oracle](/validators/oracle-setup)** - Learn about Neutron's high-frequency price oracle that provides reliable price data\n\n---\n\n\nBuilding with ICQ and ICA together with cron and oracle represents Neutron's core value proposition: **integrated cross-chain development** where your smart contracts can seamlessly interact with other blockchains without bridges or external infrastructure.\n\n```\n\n---\n\n## 11. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 19: The message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n- Line 22: The keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n- Line 53: 2. **Direct Execution**: Messages are executed directly within the message server context, eliminating the need for separate proposal handlers.\n- Line 57: ### Proposal Execution Workflow\n- Line 59: The proposal execution process follows a carefully designed workflow:\n\n**Content Preview:**\n```\n#### Message Server\nThe message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n\n\n---\n\n#### Keeper\nThe keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n\n\n---\n\n\n2. **Direct Execution**: Messages are executed directly within the message server context, eliminating the need for separate proposal handlers.\n\n```\n\n---\n\n## 12. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 3: description: \"Central governance module enabling DAO-driven network administration and proposal execution\"\n- Line 12: The admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n- Line 34: - **Message Execution**: Processing any valid `sdk.Msg` through the governance framework\n- Line 38: The admin module supports two distinct proposal execution paths:\n- Line 42: 2. **Message-Based Proposals**: Modern proposal execution introduced with SDK 0.47+, allowing any valid `sdk.Msg` to be executed through governance. This approach provides greater flexibility using the versatile `sdk.Msg` format and requires modules to implement an `authority` field specifying permitted addresses.\n\n**Content Preview:**\n```\ntitle: \"Admin Module\"\ndescription: \"Central governance module enabling DAO-driven network administration and proposal execution\"\n---\n\n---\n\n\nThe admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n\n\n---\n\n- **Network Upgrades**: Coordinating protocol upgrades and consensus parameter changes\n- **Message Execution**: Processing any valid `sdk.Msg` through the governance framework\n\n```\n\n---\n\n## 13. Client\n**File:** /root/neutron/docs/developers/modules/dex/client.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 1015: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/params\n- Line 1020: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/deposits/{address}\n- Line 1025: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/limit_orders/{address}\n- Line 1030: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/pool_metadata\n- Line 1035: curl -X POST https://rest-falcron.pion-1.ntrn.tech/neutron/dex/simulate_multi_hop_swap \\\n\n**Content Preview:**\n```\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/params\n```\n\n---\n\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/deposits/{address}\n```\n\n---\n\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/limit_orders/{address}\n```\n```\n\n---\n\n## 14. Explanation\n**File:** /root/neutron/docs/developers/modules/revenue/explanation.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 9: The Revenue module's primary responsibility is to assess validator performance, calculate appropriate compensation, and distribute rewards according to configurable schedules. The system leverages real-time performance data and price information to ensure fair and timely compensation.\n- Line 15: A --> D[Check Payment Schedule]\n- Line 78: The module supports multiple payment schedule types:\n- Line 84: The payment schedule is stored in two components:\n- Line 85: - The **schedule type** in the module parameters (controllable by governance)\n\n**Content Preview:**\n```\n\nThe Revenue module's primary responsibility is to assess validator performance, calculate appropriate compensation, and distribute rewards according to configurable schedules. The system leverages real-time performance data and price information to ensure fair and timely compensation.\n\n\n---\n\n    A --> C[Process Extended Commit Info]\n    A --> D[Check Payment Schedule]\n    C --> E[Record Validator Participation]\n\n---\n\n\nThe module supports multiple payment schedule types:\n\n```\n\n---\n\n## 15. How-to\n**File:** /root/neutron/docs/developers/modules/revenue/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 95: Check the current payment schedule and revenue calculation details.\n- Line 112: \"payment_schedule\": {\n- Line 113: \"monthly_payment_schedule\": {\n- Line 160: \"payment_schedule_type\": {\n- Line 161: \"monthly_payment_schedule_type\": {}\n\n**Content Preview:**\n```\n\nCheck the current payment schedule and revenue calculation details.\n\n\n---\n\n{\n  \"payment_schedule\": {\n    \"monthly_payment_schedule\": {\n\n---\n\n  \"payment_schedule\": {\n    \"monthly_payment_schedule\": {\n      \"current_month_start_block\": \"12345\",\n```\n\n---\n\n## 16. Reference\n**File:** /root/neutron/docs/developers/modules/revenue/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 6: The Revenue module manages validator compensation based on performance metrics and payment schedules.\n- Line 16: | `payment_schedule_type` | object | Type of payment schedule (monthly, block-based, or empty) |\n- Line 51: Retrieve the current payment schedule and revenue calculation information.\n- Line 54: - `payment_schedule`: Current payment schedule with period tracking\n- Line 110: - **Payment Schedules**: Configurable payment periods (monthly or block-based)\n\n**Content Preview:**\n```\n\nThe Revenue module manages validator compensation based on performance metrics and payment schedules.\n\n\n---\n\n| `oracle_votes_performance_requirement` | object | Performance thresholds for oracle vote submissions |\n| `payment_schedule_type` | object | Type of payment schedule (monthly, block-based, or empty) |\n| `twap_window` | int64 | Time window in seconds for calculating asset price averages |\n\n---\n\n### QueryPaymentInfo\nRetrieve the current payment schedule and revenue calculation information.\n\n```\n\n---\n\n## 17. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 56: For the most current information on the status of our RPCs and any scheduled maintenance, please visit our <a href=\"https://status.neutron.org/\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Status</a> page. This page provides real-time updates and alerts regarding the operational status of all Neutron services.\n- Line 67: out of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n\n**Content Preview:**\n```\n\nFor the most current information on the status of our RPCs and any scheduled maintenance, please visit our <a href=\"https://status.neutron.org/\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Status</a> page. This page provides real-time updates and alerts regarding the operational status of all Neutron services.\n\n\n---\n\n```\nout of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n```\n```\n\n---\n\n## 18. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 29: 3. **Proposal Execution**: If approved, the Main DAO contract sends messages to the admin module\n- Line 43: Neutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n- Line 152: - Operations are validated before execution\n\n**Content Preview:**\n```\n2. **Community Voting**: NTRN token holders vote on the proposal\n3. **Proposal Execution**: If approved, the Main DAO contract sends messages to the admin module\n4. **Admin Module Processing**: The admin module validates and executes the whitelisted operations\n\n---\n\n<Warning>\nNeutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n</Warning>\n\n---\n\n- Message types must be explicitly whitelisted\n- Operations are validated before execution\n- Unauthorized message types are rejected\n```\n\n---\n\n## 19. GMP Module\n**File:** /root/neutron/docs/developers/modules/gmp/overview.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 30: - **General Message with Token**: Similar to General Message, but specifically indicates that the message payload should be processed in conjunction with the token transfer. This is useful for applications that need to coordinate token receipt with message execution.\n- Line 81: 1. **Cross-chain Contract Calls**: Send tokens and execution instructions in a single transaction\n- Line 82: 2. **Atomic Swaps**: Coordinate token transfers with swap execution data\n\n**Content Preview:**\n```\n\n- **General Message with Token**: Similar to General Message, but specifically indicates that the message payload should be processed in conjunction with the token transfer. This is useful for applications that need to coordinate token receipt with message execution.\n\n\n---\n\n\n1. **Cross-chain Contract Calls**: Send tokens and execution instructions in a single transaction\n2. **Atomic Swaps**: Coordinate token transfers with swap execution data\n\n---\n\n1. **Cross-chain Contract Calls**: Send tokens and execution instructions in a single transaction\n2. **Atomic Swaps**: Coordinate token transfers with swap execution data\n3. **Cross-chain Governance**: Send tokens along with voting or proposal data\n```\n\n---\n\n## 20. Explanation\n**File:** /root/neutron/docs/developers/modules/harpoon/explanation.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 185: The Harpoon module implements strict error handling. When a contract returns an error during a sudo call, the module does not continue execution:\n- Line 245: 2. **Contract complexity**: More complex contract logic increases execution time\n- Line 246: 3. **Staking operation frequency**: More frequent operations mean more hook executions\n\n**Content Preview:**\n```\n\nThe Harpoon module implements strict error handling. When a contract returns an error during a sudo call, the module does not continue execution:\n\n\n---\n\n1. **Number of subscribed contracts per hook**: Each hook calls sudo on all subscribed contracts\n2. **Contract complexity**: More complex contract logic increases execution time\n3. **Staking operation frequency**: More frequent operations mean more hook executions\n\n---\n\n2. **Contract complexity**: More complex contract logic increases execution time\n3. **Staking operation frequency**: More frequent operations mean more hook executions\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "1de2c0fd-5875-437c-b66e-8957781de087",
            "tool_call_id": "call_STtnDqjYDx0YxVgVP0lWg90q",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_87IthAhuoyBk3Hd3SDsoTQX1",
                        "function": {
                            "arguments": "{\"query\": \"\\\"@type\\\": \\\"/neutron.cron.MsgAddSchedule\\\"\\\"period\\\"\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 766,
                    "prompt_tokens": 45341,
                    "total_tokens": 46107,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 704,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 39552
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRHnkLHYc4PxLFFQfCq9LgkWbR1Y",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--4ee3a767-e389-4579-81fa-af7fa81bd89f-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "\"@type\": \"/neutron.cron.MsgAddSchedule\"\"period\"",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_87IthAhuoyBk3Hd3SDsoTQX1",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 45341,
                "output_tokens": 766,
                "total_tokens": 46107,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 39552
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 704
                }
            }
        },
        {
            "content": "Found 8 result(s) for \"\"@type\": \"/neutron.cron.MsgAddSchedule\"\"period\"\":\n\n## 1. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 44: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 198: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 224: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 250: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 286: \"@type\": \"/neutron.cron.MsgRemoveSchedule\",\n\n**Content Preview:**\n```\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n\n---\n\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n\n---\n\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n```\n\n---\n\n## 2. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 32: \"@type\": \"/neutron.dynamicfees.MsgUpdateParams\",\n- Line 88: \"@type\": \"/neutron.dynamicfees.MsgUpdateParams\",\n- Line 371: \"@type\": \"/neutron.dynamicfees.MsgUpdateParams\",\n\n**Content Preview:**\n```\n    {\n      \"@type\": \"/neutron.dynamicfees.MsgUpdateParams\",\n      \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn\", // governance authority\n\n---\n\n    {\n      \"@type\": \"/neutron.dynamicfees.MsgUpdateParams\", \n      \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn\",\n\n---\n\n    {\n      \"@type\": \"/neutron.dynamicfees.MsgUpdateParams\",\n      \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn\",\n```\n\n---\n\n## 3. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 197: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n\n**Content Preview:**\n```\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n```\n\n---\n\n## 4. Messages\n**File:** /root/neutron/docs/developers/modules/dex/messages.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 457: \"@type\": \"/neutron.dex.MsgUpdateParams\",\n\n**Content Preview:**\n```\n    {\n      \"@type\": \"/neutron.dex.MsgUpdateParams\",\n      \"authority\": \"neutron1...\", // governance authority address\n```\n\n---\n\n## 5. How-to\n**File:** /root/neutron/docs/developers/modules/feeburner/how-to.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 64: \"@type\": \"/neutron.feeburner.MsgUpdateParams\",\n\n**Content Preview:**\n```\n{\n  \"@type\": \"/neutron.feeburner.MsgUpdateParams\",\n  \"authority\": \"neutron1...\", // governance authority address\n```\n\n---\n\n## 6. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 165: \"@type\": \"/neutron.feerefunder.MsgUpdateParams\",\n\n**Content Preview:**\n```\n{\n  \"@type\": \"/neutron.feerefunder.MsgUpdateParams\",\n  \"authority\": \"neutron1...\", // governance authority address\n```\n\n---\n\n## 7. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 284: \"@type\": \"/neutron.harpoon.MsgManageHookSubscription\",\n\n**Content Preview:**\n```\n    {\n      \"@type\": \"/neutron.harpoon.MsgManageHookSubscription\",\n      \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j6z2zm3\",\n```\n\n---\n\n## 8. How-to\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/how-to.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 43: \"@type\": \"/neutron.ibcratelimit.v1beta1.MsgUpdateParams\",\n\n**Content Preview:**\n```\n    {\n      \"@type\": \"/neutron.ibcratelimit.v1beta1.MsgUpdateParams\",\n      \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j7g7ejq\",\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "1aefe776-9b18-4836-af1a-d069e1ce97ff",
            "tool_call_id": "call_87IthAhuoyBk3Hd3SDsoTQX1",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_X0Fdr2PZ7Vb9HZwjJT1RlMYD",
                        "function": {
                            "arguments": "{\"query\": \"PeriodicSchedule cron\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 492,
                    "prompt_tokens": 47144,
                    "total_tokens": 47636,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 448,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 19072
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRI5Lg2XgjEJAbM8inLJOBvEmZu9",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--922a2df0-ee5d-430f-b483-4f3e4806be2b-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "PeriodicSchedule cron",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_X0Fdr2PZ7Vb9HZwjJT1RlMYD",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 47144,
                "output_tokens": 492,
                "total_tokens": 47636,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 19072
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 448
                }
            }
        },
        {
            "content": "Found 11 result(s) for \"PeriodicSchedule cron\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/cron/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n## 3. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 14: ## Understanding Cron Module Access\n- Line 16: The Cron module is **governance-gated**, meaning:\n- Line 25: **No Individual Access**: Unlike other modules, the Cron module does not accept direct user transactions. All schedule management must go through governance proposals.\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n## Understanding Cron Module Access\n\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 50: The primary state object in the Cron module:\n- Line 113: neutrond query cron params\n- Line 118: /neutron/cron/params\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\nThe primary state object in the Cron module:\n\n```\n\n---\n\n## 5. Client\n**File:** /root/neutron/docs/developers/modules/dex/client.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 1015: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/params\n- Line 1020: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/deposits/{address}\n- Line 1025: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/limit_orders/{address}\n- Line 1030: curl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/pool_metadata\n- Line 1035: curl -X POST https://rest-falcron.pion-1.ntrn.tech/neutron/dex/simulate_multi_hop_swap \\\n\n**Content Preview:**\n```\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/params\n```\n\n---\n\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/deposits/{address}\n```\n\n---\n\n```bash\ncurl https://rest-falcron.pion-1.ntrn.tech/neutron/dex/user/limit_orders/{address}\n```\n```\n\n---\n\n## 6. Introduction to Indexers\n**File:** /root/neutron/docs/developers/tutorials/indexers/intro.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 159: ### Cron Job Executions\n- Line 162: // Monitor automated cron executions\n- Line 163: const cronExecutions = await api.query(\n- Line 165: cronExecutions(first: 50) {\n- Line 283: interface CronSchedule {\n\n**Content Preview:**\n```\n\n### Cron Job Executions\n\n\n---\n\n```javascript\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n\n---\n\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n  `query {\n```\n\n---\n\n## 7. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 108: ### 2. Cron Module Tests\n- Line 111: func (s *IntegrationTestSuite) TestCronModule() {\n- Line 114: // Create a cron schedule\n- Line 115: scheduleMsg := &crontypes.MsgAddSchedule{\n- Line 119: Msgs: []crontypes.MsgExecuteContract{\n\n**Content Preview:**\n```\n\n### 2. Cron Module Tests\n\n\n---\n\n```go\nfunc (s *IntegrationTestSuite) TestCronModule() {\n    val := s.network.Validators[0]\n\n---\n\n    \n    // Create a cron schedule\n    scheduleMsg := &crontypes.MsgAddSchedule{\n```\n\n---\n\n## 8. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 29: <Card title=\"Cron\" icon=\"clock\">\n- Line 273: ## Using the Cron Module\n- Line 275: Schedule automated executions using Neutron's Cron module:\n- Line 284: let cron_msg = NeutronMsg::AddSchedule {\n\n**Content Preview:**\n```\n\n- How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Inter-contract communication patterns\n\n---\n\n  </Card>\n  <Card title=\"Cron\" icon=\"clock\">\n    Schedule automated contract executions\n\n---\n\n\n## Using the Cron Module\n\n```\n\n---\n\n## 9. Known Bugs\n**File:** /root/neutron/docs/developers/modules/cron/known-bugs.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 3: description: \"Known issues and limitations of the Cron module\"\n- Line 8: The Cron module is functioning as designed with no known critical bugs at this time.\n- Line 14: The Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n- Line 30: If you encounter any bugs or issues with the Cron module, please report them through the appropriate channels:\n\n**Content Preview:**\n```\ntitle: \"Known Bugs\"\ndescription: \"Known issues and limitations of the Cron module\"\n---\n\n---\n\n\nThe Cron module is functioning as designed with no known critical bugs at this time.\n\n\n---\n\n\nThe Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n\n```\n\n---\n\n## 10. Developer Tutorials\n**File:** /root/neutron/docs/developers/tutorials/overview.mdx\n**Section:** developers\n**Relevance Score:** 5\n\n**Matching lines:**\n- Line 23: - **[Cron Module](/developers/modules/cron/overview)** - Schedule automated contract executions on-chain without external bots\n- Line 32: Building with ICQ and ICA together with cron and oracle represents Neutron's core value proposition: **integrated cross-chain development** where your smart contracts can seamlessly interact with other blockchains without bridges or external infrastructure.\n\n**Content Preview:**\n```\n\n- **[Cron Module](/developers/modules/cron/overview)** - Schedule automated contract executions on-chain without external bots\n- **[Oracle](/validators/oracle-setup)** - Learn about Neutron's high-frequency price oracle that provides reliable price data\n\n---\n\n\nBuilding with ICQ and ICA together with cron and oracle represents Neutron's core value proposition: **integrated cross-chain development** where your smart contracts can seamlessly interact with other blockchains without bridges or external infrastructure.\n\n```\n\n---\n\n## 11. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 20: <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n\n**Content Preview:**\n```\n  \n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "754419c4-ab13-4fb3-847c-d76c9b0ae78d",
            "tool_call_id": "call_X0Fdr2PZ7Vb9HZwjJT1RlMYD",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "[\n  {\n    \"intent\": \"Create a schedule to distribute staking rewards weekly\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"fetch_governance_authority_address\",\n        \"description\": \"Query the Main DAO contract or network params to obtain the authority address that must be used in MsgAddSchedule.\"\n      },\n      {\n        \"step\": 2,\n        \"tool\": \"validate_target_contract\",\n        \"description\": \"Ensure the staking-rewards contract address is correct and live.\"\n      },\n      {\n        \"step\": 3,\n        \"tool\": \"construct_msg_execute_contract\",\n        \"description\": \"Build the MsgExecuteContract that calls `{ \\\"distribute_rewards\\\": {} }` on the staking-rewards contract, setting the sender to the Cron module (\\\"cron\\\") so it can execute later.\"\n      },\n      {\n        \"step\": 4,\n        \"tool\": \"construct_msg_add_schedule\",\n        \"description\": \"Create a MsgAddSchedule with:\\n  \u2022 name: \\\"weekly_staking_rewards\\\"\\n  \u2022 period: 100800   // ~7 days at 6 s blocks\\n  \u2022 msgs: the array from step 3\\n  \u2022 execution_stage: END_BLOCKER (default)\\n  \u2022 authority: value from step 1\"\n      },\n      {\n        \"step\": 5,\n        \"tool\": \"create_json_proposal_file\",\n        \"description\": \"Wrap the MsgAddSchedule in a JSON proposal:\\n{\\n  \\\"title\\\": \\\"Add weekly staking-reward cron\\\",\\n  \\\"description\\\": \\\"Distribute staking rewards every week automatically\\\",\\n  \\\"messages\\\": [ <MsgAddSchedule JSON> ]\\n}\"\n      },\n      {\n        \"step\": 6,\n        \"tool\": \"submit_proposal_to_main_dao\",\n        \"description\": \"Use `neutrond tx wasm execute <main_dao> '{\\\"propose\\\":{...}}'` or `neutrond tx wasm submit-proposal proposal.json` to submit the file for voting.\"\n      },\n      {\n        \"step\": 7,\n        \"tool\": \"vote_and_wait_for_passage\",\n        \"description\": \"Stakeholders vote; wait until the proposal status is PASSED.\"\n      },\n      {\n        \"step\": 8,\n        \"tool\": \"query_cron_schedule\",\n        \"description\": \"Run `neutrond query cron schedule weekly_staking_rewards` to confirm the schedule is active with the correct period.\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"The query in step 8 returns the schedule with period 100 800 and the expected MsgExecuteContract.\",\n      \"After ~100 800 blocks the staking-rewards contract\u2019s distribute event is emitted automatically.\"\n    ]\n  },\n  {\n    \"intent\": \"Set cron execution stage to BEGIN_BLOCKER for schedule health_check\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"query_cron_schedule\",\n        \"description\": \"Fetch the existing \\\"health_check\\\" schedule to copy its period and msgs.\"\n      },\n      {\n        \"step\": 2,\n        \"tool\": \"construct_msg_remove_schedule\",\n        \"description\": \"Create MsgRemoveSchedule { name: \\\"health_check\\\", authority: <gov-authority> }.\"\n      },\n      {\n        \"step\": 3,\n        \"tool\": \"construct_msg_add_schedule\",\n        \"description\": \"Re-create the schedule with execution_stage set to BEGIN_BLOCKER:\\n  \u2022 name: \\\"health_check\\\"\\n  \u2022 period: value from step 1\\n  \u2022 execution_stage: BEGIN_BLOCKER\\n  \u2022 msgs: value from step 1\\n  \u2022 authority: <gov-authority>\"\n      },\n      {\n        \"step\": 4,\n        \"tool\": \"create_json_proposal_file\",\n        \"description\": \"Place the MsgRemoveSchedule followed by MsgAddSchedule in the `messages` array so they execute atomically.\"\n      },\n      {\n        \"step\": 5,\n        \"tool\": \"submit_proposal_to_main_dao\",\n        \"description\": \"Submit the proposal for voting via Main DAO.\"\n      },\n      {\n        \"step\": 6,\n        \"tool\": \"vote_and_wait_for_passage\",\n        \"description\": \"Wait until proposal status is PASSED.\"\n      },\n      {\n        \"step\": 7,\n        \"tool\": \"query_cron_schedule\",\n        \"description\": \"Confirm `execution_stage` now shows BEGIN_BLOCKER for \\\"health_check\\\".\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"Schedule \\\"health_check\\\" exists and `execution_stage` == \\\"BEGIN_BLOCKER\\\".\",\n      \"Next block\u2019s BeginBlocker logs show the schedule execution event.\"\n    ]\n  },\n  {\n    \"intent\": \"Show the number of active cron schedules\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"query_all_cron_schedules\",\n        \"description\": \"Run `neutrond query cron schedules --limit 1000` (iterate pagination if needed) to retrieve the full list.\"\n      },\n      {\n        \"step\": 2,\n        \"tool\": \"count_array_elements\",\n        \"description\": \"Count the length of the returned `schedules` array.\"\n      },\n      {\n        \"step\": 3,\n        \"tool\": \"display_result\",\n        \"description\": \"Print `Active schedules: <count>` to the user.\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"The CLI command succeeds (non-empty JSON).\",\n      \"Printed count matches the length of the array returned by the query.\"\n    ]\n  },\n  {\n    \"intent\": \"Show last execution height for schedule daily_rewards\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"query_cron_schedule\",\n        \"description\": \"Execute `neutrond query cron schedule daily_rewards` to fetch the schedule metadata.\"\n      },\n      {\n        \"step\": 2,\n        \"tool\": \"extract_field\",\n        \"description\": \"Read `last_execution_height` (or `last_executed_height` depending on proto) from the JSON response.\"\n      },\n      {\n        \"step\": 3,\n        \"tool\": \"display_result\",\n        \"description\": \"Output `Last execution height: <height>`.\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"`last_execution_height` is a positive integer (\u2265 schedule creation height).\",\n      \"If the schedule just ran, height matches recent block heights.\"\n    ]\n  },\n  {\n    \"intent\": \"Create a governance proposal file for daily maintenance schedule\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"gather_schedule_requirements\",\n        \"description\": \"Define schedule parameters:\\n  \u2022 name: \\\"daily_maintenance\\\"\\n  \u2022 period: 14 400  // ~1 day at 6 s blocks\\n  \u2022 execution_stage: END_BLOCKER\\n  \u2022 msgs: MsgExecuteContract calling `{ \\\"maintain\\\": {} }` on the maintenance contract.\"\n      },\n      {\n        \"step\": 2,\n        \"tool\": \"construct_msg_execute_contract\",\n        \"description\": \"Create the MsgExecuteContract needed by the schedule (sender will be Cron module).\"\n      },\n      {\n        \"step\": 3,\n        \"tool\": \"construct_msg_add_schedule\",\n        \"description\": \"Fill MsgAddSchedule with the fields from step 1 and authority set to the governance address.\"\n      },\n      {\n        \"step\": 4,\n        \"tool\": \"create_json_proposal_file\",\n        \"description\": \"Write `daily_maintenance_proposal.json` with structure:\\n{\\n  \\\"title\\\": \\\"Add daily maintenance cron\\\",\\n  \\\"description\\\": \\\"Automate housekeeping tasks every 24 h\\\",\\n  \\\"messages\\\": [ <MsgAddSchedule JSON> ]\\n}\"\n      },\n      {\n        \"step\": 5,\n        \"tool\": \"validate_json\",\n        \"description\": \"Run `jq . daily_maintenance_proposal.json` (or equivalent) to ensure the file is valid JSON.\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"`daily_maintenance_proposal.json` exists and passes JSON validation.\",\n      \"The file\u2019s `messages[0]` has `@type` = \\\"/neutron.cron.MsgAddSchedule\\\" and name = \\\"daily_maintenance\\\".\"\n    ]\n  }\n]",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 3005,
                    "prompt_tokens": 50186,
                    "total_tokens": 53191,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 1216,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 32896
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBRIIwrGWo6EUB1sx3bJ7bSWjmW9U",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--e3fbe80b-1167-4c03-b4e8-4c09bbe8c66a-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 50186,
                "output_tokens": 3005,
                "total_tokens": 53191,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 32896
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 1216
                }
            }
        }
    ]
}