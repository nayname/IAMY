[
    {
        "intent": "Instantly claim 50% of my NTRN staking rewards",
        "workflow": [
            {
                "step": 1,
                "tool": "get_delegator_address",
                "description": "Identify the user\u2019s delegator address tied to their Neutron wallet."
            },
            {
                "step": 2,
                "tool": "query_pending_staking_rewards",
                "description": "Fetch the total unclaimed NTRN rewards for the delegator."
            },
            {
                "step": 3,
                "tool": "calculate_partial_amount",
                "description": "Compute 50 % of the pending reward amount."
            },
            {
                "step": 4,
                "tool": "construct_tx_distribution_withdraw_rewards",
                "description": "Build a MsgWithdrawDelegatorReward transaction with the calculated 50 % amount, adding split-withdraw logic if multiple validators are involved."
            },
            {
                "step": 5,
                "tool": "sign_and_broadcast_tx",
                "description": "Sign the reward-withdrawal transaction with the user\u2019s wallet and broadcast it to Neutron."
            }
        ],
        "outcome_checks": [
            "Confirm the transaction hash is included in a block.",
            "Verify the delegator\u2019s NTRN balance has increased by roughly 50 % of previously pending rewards (minus gas).",
            "Validate that the remaining ~50 % of rewards are still queryable as pending."
        ]
    },
    {
        "intent": "Provide single-sided liquidity of 2 WBTC to the maxBTC/USDC Supervault",
        "workflow": [
            {
                "step": 1,
                "tool": "get_user_wallet_address",
                "description": "Determine the wallet address from which WBTC will be supplied."
            },
            {
                "step": 2,
                "tool": "validate_token_balance",
                "description": "Check that the user holds at least 2 WBTC in the wallet on Neutron."
            },
            {
                "step": 3,
                "tool": "construct_tx_contract_execute",
                "description": "Craft an ExecuteMsg to the maxBTC/USDC Supervault contract calling its \u201cdeposit_single_side\u201d (or equivalent) method with { asset: \"WBTC\", amount: \"2\" }."
            },
            {
                "step": 4,
                "tool": "sign_and_broadcast_tx",
                "description": "Sign the execute message and broadcast it to the network."
            },
            {
                "step": 5,
                "tool": "query_contract_receipt",
                "description": "Query the Supervault contract for the resulting vault-share tokens or position ID returned in the execute response."
            }
        ],
        "outcome_checks": [
            "Verify the wallet\u2019s WBTC balance decreased by exactly 2 WBTC.",
            "Confirm receipt of Supervault LP tokens or position shares representing the deposited WBTC.",
            "Ensure the transaction events include \u201caction=deposit_single_side\u201d and list the correct amount."
        ]
    },
    {
        "intent": "Withdraw all assets from the WBTC/USDC Supervault",
        "workflow": [
            {
                "step": 1,
                "tool": "get_user_wallet_address",
                "description": "Obtain the wallet address that owns the Supervault position."
            },
            {
                "step": 2,
                "tool": "query_vault_balance",
                "description": "Fetch the user\u2019s current Supervault share balance or position ID to determine the full amount eligible for withdrawal."
            },
            {
                "step": 3,
                "tool": "construct_tx_contract_execute",
                "description": "Build an ExecuteMsg to the Supervault contract invoking \u201cwithdraw_all\u201d (or a full-share withdrawal) with the user\u2019s entire share amount."
            },
            {
                "step": 4,
                "tool": "sign_and_broadcast_tx",
                "description": "Sign and broadcast the withdrawal transaction."
            },
            {
                "step": 5,
                "tool": "query_bank_balances",
                "description": "After confirmation, query the wallet\u2019s balances to ensure both WBTC and USDC proceeds were received."
            }
        ],
        "outcome_checks": [
            "Supervault share balance should drop to zero.",
            "Wallet WBTC and USDC balances should increase by the vault\u2019s payout amounts.",
            "Transaction logs should contain \u201caction=withdraw_all\u201d with correct token outputs."
        ]
    },
    {
        "intent": "Withdraw 50 % of my WBTC lending position on Amber",
        "workflow": [
            {
                "step": 1,
                "tool": "get_user_wallet_address",
                "description": "Identify the wallet address that opened the lending position."
            },
            {
                "step": 2,
                "tool": "query_lending_position",
                "description": "Call Amber\u2019s lending contract to retrieve the current supplied WBTC amount."
            },
            {
                "step": 3,
                "tool": "calculate_partial_amount",
                "description": "Compute 50 % of the supplied WBTC to determine the withdrawal amount."
            },
            {
                "step": 4,
                "tool": "construct_tx_contract_execute",
                "description": "Create an ExecuteMsg to Amber\u2019s lending contract using its \u201cwithdraw\u201d (or similar) entry point with the calculated amount."
            },
            {
                "step": 5,
                "tool": "sign_and_broadcast_tx",
                "description": "Sign the lending-withdrawal transaction and broadcast it."
            }
        ],
        "outcome_checks": [
            "Amber contract should emit an event showing the exact WBTC amount removed.",
            "Wallet\u2019s WBTC balance should increase by the withdrawn amount (minus any protocol fees).",
            "Remaining supplied balance in Amber should equal approximately the original amount \u00d7 0.5."
        ]
    },
    {
        "intent": "Check my current Bitcoin Summer boost multiplier",
        "workflow": [
            {
                "step": 1,
                "tool": "get_user_wallet_address",
                "description": "Capture the wallet address whose boost multiplier should be queried."
            },
            {
                "step": 2,
                "tool": "query_contract_state",
                "description": "Call the Bitcoin Summer boost contract\u2019s \u201cget_multiplier\u201d (or analogous) query endpoint with the user\u2019s address."
            },
            {
                "step": 3,
                "tool": "parse_json_response",
                "description": "Parse the contract\u2019s JSON response to extract the multiplier value (e.g., 1.25\u00d7)."
            }
        ],
        "outcome_checks": [
            "Return the multiplier as a numeric value (e.g., 1.25).",
            "Ensure the contract query succeeded with no errors and returned the latest block-height-indexed data."
        ]
    }
]