{
    "messages": [
        {
            "content": "[{\"label\": \"Cron\", \"query\": \"Create a cron schedule named daily_rewards that distributes rewards every 7200 blocks at END_BLOCKER\"}, {\"label\": \"Cron\", \"query\": \"Remove the cron schedule named daily_rewards\"}, {\"label\": \"Cron\", \"query\": \"List all existing cron schedules\"}, {\"label\": \"Cron\", \"query\": \"Show details for the cron schedule protocol_update\"}, {\"label\": \"Cron\", \"query\": \"Update cron limit parameter to 30 schedules per block\"}]",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "46eb8c28-30c7-4084-8f03-f6a5e336e5c3",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_VCPWt2HgdwfxvyORMOCF7DvZ",
                        "function": {
                            "arguments": "{\"query\":\"neutron cron schedule\",\"section\":\"developers\",\"max_results\":10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 290,
                    "prompt_tokens": 725,
                    "total_tokens": 1015,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 256,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR7WqdG6epkxEgmLqz2rf2vce8mS",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--b86c2eac-f66c-49e3-b481-e374892ec55f-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutron cron schedule",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_VCPWt2HgdwfxvyORMOCF7DvZ",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 725,
                "output_tokens": 290,
                "total_tokens": 1015,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 256
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"neutron cron schedule\":\n\n## 1. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n```\n\n---\n\n## 2. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Neutron Modules\"\n- Line 5: Neutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n- Line 20: <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n- Line 21: Schedule automated contract executions\n- Line 73: Most Neutron modules follow consistent patterns when used in CosmWasm smart contracts:\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Modules\"\n---\n\n---\n\n\nNeutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n\n\n---\n\n  \n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n```\n\n---\n\n## 3. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 4. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"NeutronTemplate\"\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 7: NeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n- Line 10: <strong>Live Demo:</strong> <a href=\"https://neutrontemplate.deploydon.com\" target=\"_blank\" className=\"text-primary hover:underline\">https://NeutronTemplate.Deploydon.com</a>\n- Line 65: git clone https://github.com/Deploydon/NeutronTemplate.git\n\n**Content Preview:**\n```\n---\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n\n---\n\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n\nNeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n\n```\n\n---\n\n## 5. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n- Line 23: ## Getting Started with SubQuery for Neutron\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 6. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 10: - Understanding of Neutron governance processes\n- Line 12: - Access to governance proposal submission (for schedule creation)\n- Line 14: ## Understanding Cron Module Access\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n```\n\n---\n\n## 7. Known Bugs\n**File:** /root/neutron/docs/developers/modules/cron/known-bugs.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Known issues and limitations of the Cron module\"\n- Line 8: The Cron module is functioning as designed with no known critical bugs at this time.\n- Line 14: The Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n- Line 16: - If average block time changes significantly, the real-world timing of scheduled executions will be affected\n- Line 17: - Schedules are not guaranteed to execute at exact time intervals\n\n**Content Preview:**\n```\ntitle: \"Known Bugs\"\ndescription: \"Known issues and limitations of the Cron module\"\n---\n\n---\n\n\nThe Cron module is functioning as designed with no known critical bugs at this time.\n\n\n---\n\n\nThe Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n\n```\n\n---\n\n## 8. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 12: Creates a new schedule through governance proposal.\n- Line 15: message MsgAddSchedule {\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\n### MsgAddSchedule\n\n```\n\n---\n\n## 9. Introduction to Indexers\n**File:** /root/neutron/docs/developers/tutorials/indexers/intro.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 113: ## Neutron-Specific Data\n- Line 115: Neutron's unique modules generate special data that indexers can capture:\n- Line 159: ### Cron Job Executions\n- Line 162: // Monitor automated cron executions\n- Line 163: const cronExecutions = await api.query(\n\n**Content Preview:**\n```\n\n## Neutron-Specific Data\n\n\n---\n\n\nNeutron's unique modules generate special data that indexers can capture:\n\n\n---\n\n\n### Cron Job Executions\n\n```\n\n---\n\n## 10. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 13: - Working with Neutron-specific message types\n- Line 21: ## Neutron's Unique Modules\n\n**Content Preview:**\n```\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n\n---\n\n\n- How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Inter-contract communication patterns\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "2217b819-17af-4543-91dc-a9e95b59ecaa",
            "tool_call_id": "call_VCPWt2HgdwfxvyORMOCF7DvZ",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_3WxNV8WMSGthVcCUgiNyfieC",
                        "function": {
                            "arguments": "{\"query\":\"MsgAddSchedule fields cron neutron\", \"section\":\"developers\", \"max_results\":10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 294,
                    "prompt_tokens": 3813,
                    "total_tokens": 4107,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 256,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR7bRuuYlsMdqalvvK728g4MVw4K",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--ea701712-d196-45cc-9809-7c9d7547ea38-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "MsgAddSchedule fields cron neutron",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_3WxNV8WMSGthVcCUgiNyfieC",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 3813,
                "output_tokens": 294,
                "total_tokens": 4107,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 256
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"MsgAddSchedule fields cron neutron\":\n\n## 1. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/cron/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n## 2. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Neutron Modules\"\n- Line 5: Neutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n- Line 20: <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n- Line 73: Most Neutron modules follow consistent patterns when used in CosmWasm smart contracts:\n- Line 77: use neutron_sdk::interchain_queries::...; // for ICQ\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Modules\"\n---\n\n---\n\n\nNeutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n\n\n---\n\n  \n  <Card title=\"Cron\" icon=\"clock\" href=\"/developers/modules/cron/overview\">\n    Schedule automated contract executions\n```\n\n---\n\n## 3. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 4. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"NeutronTemplate\"\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 7: NeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n- Line 10: <strong>Live Demo:</strong> <a href=\"https://neutrontemplate.deploydon.com\" target=\"_blank\" className=\"text-primary hover:underline\">https://NeutronTemplate.Deploydon.com</a>\n- Line 65: git clone https://github.com/Deploydon/NeutronTemplate.git\n\n**Content Preview:**\n```\n---\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n\n---\n\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n\nNeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n\n```\n\n---\n\n## 5. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n- Line 23: ## Getting Started with SubQuery for Neutron\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 6. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The admin module provides governance-level administrative functions for the Neutron network.\n- Line 17: **Fields:**\n- Line 24: **Fields:**\n- Line 31: **Fields:**\n- Line 38: **Fields:**\n\n**Content Preview:**\n```\n\nThe admin module provides governance-level administrative functions for the Neutron network.\n\n\n---\n\n\n**Fields:**\n- `messages`: Array of messages to execute\n\n---\n\n\n**Fields:**\n- `content`: Proposal content in legacy format\n```\n\n---\n\n## 7. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 10: - Understanding of Neutron governance processes\n- Line 14: ## Understanding Cron Module Access\n- Line 16: The Cron module is **governance-gated**, meaning:\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n```\n\n---\n\n## 8. Known Bugs\n**File:** /root/neutron/docs/developers/modules/cron/known-bugs.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Known issues and limitations of the Cron module\"\n- Line 8: The Cron module is functioning as designed with no known critical bugs at this time.\n- Line 14: The Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n- Line 30: If you encounter any bugs or issues with the Cron module, please report them through the appropriate channels:\n- Line 32: - **GitHub Issues**: [Neutron repository](https://github.com/neutron-org/neutron)\n\n**Content Preview:**\n```\ntitle: \"Known Bugs\"\ndescription: \"Known issues and limitations of the Cron module\"\n---\n\n---\n\n\nThe Cron module is functioning as designed with no known critical bugs at this time.\n\n\n---\n\n\nThe Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n\n```\n\n---\n\n## 9. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 15: message MsgAddSchedule {\n- Line 50: The primary state object in the Cron module:\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\n### MsgAddSchedule\n\n```\n\n---\n\n## 10. Reference\n**File:** /root/neutron/docs/developers/modules/feerefunder/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 15: - `recv_fee`: Must be zero in Neutron (no receive fees)\n- Line 26: **Fields:**\n- Line 35: **CLI:** `neutrond query feerefunder params`\n- Line 36: **REST:** `GET /neutron-org/neutron/feerefunder/params`\n- Line 44: **CLI:** `neutrond query feerefunder fee-info [port_id] [channel_id] [sequence]`\n\n**Content Preview:**\n```\n### Fee Structure\n- `recv_fee`: Must be zero in Neutron (no receive fees)\n- `ack_fee`: Fees paid for acknowledgement delivery  \n\n---\n\n\n**Fields:**\n- `authority`: Governance authority address\n\n---\n\n\n**CLI:** `neutrond query feerefunder params`\n**REST:** `GET /neutron-org/neutron/feerefunder/params`\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "fef8d2ab-dfe4-401f-9ca3-1bd3b05883c4",
            "tool_call_id": "call_3WxNV8WMSGthVcCUgiNyfieC",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_Nm4FGLiq6LCJyyRf6gwV0mM2",
                        "function": {
                            "arguments": "{\"query\":\"MsgAddSchedule cron limit parameter schedules_per_block\", \"section\":\"developers\", \"max_results\": 10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 426,
                    "prompt_tokens": 6921,
                    "total_tokens": 7347,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 384,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 3712
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR7iIZ7fXo6T7gdzfEJEUlHzLzXr",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--da74ab9a-b17a-48ed-b507-18022c0de7d4-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "MsgAddSchedule cron limit parameter schedules_per_block",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_Nm4FGLiq6LCJyyRf6gwV0mM2",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 6921,
                "output_tokens": 426,
                "total_tokens": 7347,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 3712
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 384
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"MsgAddSchedule cron limit parameter schedules_per_block\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/cron/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n## 3. IBC Rate Limit Module\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"IBC Rate Limit Module\"\n- Line 6: The IBC Rate Limit module provides governance-configurable rate limiting for IBC transfers. It acts as a critical safety control to protect assets on Neutron in the event of security incidents such as bugs or hacks on Neutron, counter-party chains, or in the IBC protocol itself.\n- Line 11: <Card title=\"Configurable Rate Limits\" icon=\"sliders\">\n- Line 15: Define rate limits for different time windows (daily, weekly, etc.) to allow flexibility while maintaining security.\n- Line 18: Different rate limits for incoming and outgoing transfers to provide precise control over token flows.\n\n**Content Preview:**\n```\n---\ntitle: \"IBC Rate Limit Module\"\nicon: \"gauge-high\"\n\n---\n\n\nThe IBC Rate Limit module provides governance-configurable rate limiting for IBC transfers. It acts as a critical safety control to protect assets on Neutron in the event of security incidents such as bugs or hacks on Neutron, counter-party chains, or in the IBC protocol itself.\n\n\n---\n\n<CardGroup cols={2}>\n  <Card title=\"Configurable Rate Limits\" icon=\"sliders\">\n    Set percentage-based quotas for IBC token transfers on a per-channel and per-denomination basis.\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 15: message MsgAddSchedule {\n- Line 37: Updates the module parameters through governance proposal.\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\n### MsgAddSchedule\n\n```\n\n---\n\n## 5. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 38: - `ParameterChangeProposal`: Modify module parameters\n- Line 51: 1. **Universal Message Support**: Any valid `sdk.Msg` can be executed through governance, providing unlimited flexibility for administrative operations.\n- Line 67: - Parameter validation\n- Line 86: #### Parameter Validation\n- Line 87: - All proposal parameters undergo strict validation\n\n**Content Preview:**\n```\n1. **Proposal Types**: Support for predefined proposal types such as:\n   - `ParameterChangeProposal`: Modify module parameters\n   - `CommunityPoolSpendProposal`: Allocate community funds\n\n---\n\n\n1. **Universal Message Support**: Any valid `sdk.Msg` can be executed through governance, providing unlimited flexibility for administrative operations.\n\n\n---\n\n   - Authority verification\n   - Parameter validation\n\n```\n\n---\n\n## 6. Reference\n**File:** /root/neutron/docs/developers/modules/contractmanager/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: ## Parameters\n- Line 10: | Parameter | Type | Description |\n- Line 12: | `sudo_call_gas_limit` | uint64 | Maximum gas that can be used during a sudo call to a contract |\n- Line 72: - **Sudo Gas Limit**: Sudo calls are limited to prevent infinite recursion\n- Line 75: - **Resubmission**: Contracts can resubmit their own failures without gas limits\n\n**Content Preview:**\n```\n\n## Parameters\n\n\n---\n\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n\n---\n\n| --- | --- | --- |\n| `sudo_call_gas_limit` | uint64 | Maximum gas that can be used during a sudo call to a contract |\n\n```\n\n---\n\n## 7. Known Bugs\n**File:** /root/neutron/docs/developers/modules/cron/known-bugs.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Known issues and limitations of the Cron module\"\n- Line 8: The Cron module is functioning as designed with no known critical bugs at this time.\n- Line 10: ## Design Limitations\n- Line 14: The Cron module's execution timing is based on block heights rather than precise timestamps. This means:\n- Line 24: ### Resource Limits\n\n**Content Preview:**\n```\ntitle: \"Known Bugs\"\ndescription: \"Known issues and limitations of the Cron module\"\n---\n\n---\n\n\nThe Cron module is functioning as designed with no known critical bugs at this time.\n\n\n---\n\n\n## Design Limitations\n\n```\n\n---\n\n## 8. DEX API\n**File:** /root/neutron/docs/developers/modules/dex/api.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The DEX module provides REST API endpoints for querying pool information, reserves, limit orders, and user positions. All endpoints use GET requests and return JSON responses.\n- Line 18: ### Query Pool by Parameters\n- Line 24: Returns information about a specific pool by its parameters.\n- Line 26: **Parameters:**\n- Line 63: ## Limit Order Queries\n\n**Content Preview:**\n```\n\nThe DEX module provides REST API endpoints for querying pool information, reserves, limit orders, and user positions. All endpoints use GET requests and return JSON responses.\n\n\n---\n\n\n### Query Pool by Parameters\n\n\n---\n\n\nReturns information about a specific pool by its parameters.\n\n```\n\n---\n\n## 9. Client\n**File:** /root/neutron/docs/developers/modules/dex/client.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 25: **Parameters:**\n- Line 81: **Parameters:**\n- Line 102: #### Place Limit Order\n- Line 104: Place a limit order in the DEX.\n- Line 107: neutrond tx dex place-limit-order [receiver] [token-in] [token-out] [tick-index] [amount-in] [order-type] [expiration-time] [flags]\n\n**Content Preview:**\n```\n\n**Parameters:**\n- `receiver`: Address to receive the liquidity position\n\n---\n\n\n**Parameters:**\n- `receiver`: Address to receive the withdrawn tokens\n\n---\n\n\n#### Place Limit Order\n\n```\n\n---\n\n## 10. Messages\n**File:** /root/neutron/docs/developers/modules/dex/messages.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 41: ### Parameters\n- Line 60: | `fail_tx_on_bel` | bool | If true, fails the transaction on bad exchange limit instead of partial fill |\n- Line 118: ### Parameters\n- Line 155: ## MsgPlaceLimitOrder\n- Line 157: `MsgPlaceLimitOrder` allows users to place limit orders to buy or sell tokens at a specific price.\n\n**Content Preview:**\n```\n\n### Parameters\n\n\n---\n\n| `disable_autoswap` | bool | If true, prevents automatic balancing of tokens to match pool ratio |\n| `fail_tx_on_bel` | bool | If true, fails the transaction on bad exchange limit instead of partial fill |\n| `swap_on_deposit` | bool | If true, allows excess tokens to be swapped to achieve desired ratio |\n\n---\n\n\n### Parameters\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "bcb2f0a9-7cbd-4b85-8ba9-2cf220eeb0a2",
            "tool_call_id": "call_Nm4FGLiq6LCJyyRf6gwV0mM2",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_OeQeBnlKT0ZyuSPClKAbSlry",
                        "function": {
                            "arguments": "{\"query\":\"cron MsgAddSchedule message\", \"section\":\"developers\", \"max_results\": 10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 422,
                    "prompt_tokens": 9850,
                    "total_tokens": 10272,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 384,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR7vtwAhTzCbATzjLqk3PbgpKvA3",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--82cf38d4-d21a-4043-a5f2-b3dbf0760a66-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "cron MsgAddSchedule message",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_OeQeBnlKT0ZyuSPClKAbSlry",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 9850,
                "output_tokens": 422,
                "total_tokens": 10272,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 384
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"cron MsgAddSchedule message\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/cron/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n## 3. Messages\n**File:** /root/neutron/docs/developers/modules/dex/messages.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Messages\"\n- Line 5: The Dex module exposes several message types for interacting with the decentralized exchange. Here's a detailed documentation of each message and its expected behavior.\n- Line 12: message MsgDeposit {\n- Line 33: message DepositOptions {\n- Line 45: | `creator` | string | Address of the message sender |\n\n**Content Preview:**\n```\n---\ntitle: \"Messages\"\n---\n\n---\n\n\nThe Dex module exposes several message types for interacting with the decentralized exchange. Here's a detailed documentation of each message and its expected behavior.\n\n\n---\n\n```protobuf\nmessage MsgDeposit {\n  option (amino.name) = \"dex/MsgDeposit\";\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 6: ## Messages\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 15: message MsgAddSchedule {\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\n## Messages\n\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n```\n\n---\n\n## 5. Introduction to Indexers\n**File:** /root/neutron/docs/developers/tutorials/indexers/intro.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 159: ### Cron Job Executions\n- Line 162: // Monitor automated cron executions\n- Line 163: const cronExecutions = await api.query(\n- Line 165: cronExecutions(first: 50) {\n- Line 171: message\n\n**Content Preview:**\n```\n\n### Cron Job Executions\n\n\n---\n\n```javascript\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n\n---\n\n// Monitor automated cron executions\nconst cronExecutions = await api.query(\n  `query {\n```\n\n---\n\n## 6. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 108: ### 2. Cron Module Tests\n- Line 111: func (s *IntegrationTestSuite) TestCronModule() {\n- Line 114: // Create a cron schedule\n- Line 115: scheduleMsg := &crontypes.MsgAddSchedule{\n- Line 119: Msgs: []crontypes.MsgExecuteContract{\n\n**Content Preview:**\n```\n\n### 2. Cron Module Tests\n\n\n---\n\n```go\nfunc (s *IntegrationTestSuite) TestCronModule() {\n    val := s.network.Validators[0]\n\n---\n\n    \n    // Create a cron schedule\n    scheduleMsg := &crontypes.MsgAddSchedule{\n```\n\n---\n\n## 7. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 12: - Advanced message handling and responses\n- Line 13: - Working with Neutron-specific message types\n- Line 19: - Familiarity with CosmWasm message patterns\n- Line 29: <Card title=\"Cron\" icon=\"clock\">\n\n**Content Preview:**\n```\n\n- How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Inter-contract communication patterns\n\n---\n\n- Inter-contract communication patterns\n- Advanced message handling and responses\n- Working with Neutron-specific message types\n\n---\n\n- Advanced message handling and responses\n- Working with Neutron-specific message types\n\n```\n\n---\n\n## 8. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 18: #### Message Server\n- Line 19: The message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n- Line 22: The keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n- Line 47: #### Message-Based Proposals\n- Line 49: Modern proposals leverage the flexible message-based approach introduced in SDK 0.47+:\n\n**Content Preview:**\n```\n\n#### Message Server\nThe message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n\n---\n\n#### Message Server\nThe message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n\n\n---\n\n#### Keeper\nThe keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 16: - **Only the Main DAO contract** can send messages to the admin module\n- Line 17: - Messages are sent using WebAssembly bindings from the Main DAO\n- Line 29: 3. **Proposal Execution**: If approved, the Main DAO contract sends messages to the admin module\n- Line 32: ### 2. Message Flow\n- Line 38: The admin module receives `ProposalExecuteMessage` bindings from the Main DAO contract and processes them according to its whitelisting rules.\n\n**Content Preview:**\n```\n\n- **Only the Main DAO contract** can send messages to the admin module\n- Messages are sent using WebAssembly bindings from the Main DAO\n\n---\n\n- **Only the Main DAO contract** can send messages to the admin module\n- Messages are sent using WebAssembly bindings from the Main DAO\n- Individual users cannot directly submit proposals or interact with the module\n\n---\n\n2. **Community Voting**: NTRN token holders vote on the proposal\n3. **Proposal Execution**: If approved, the Main DAO contract sends messages to the admin module\n4. **Admin Module Processing**: The admin module validates and executes the whitelisted operations\n```\n\n---\n\n## 10. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 12: The admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n- Line 21: - [API](/developers/modules/admin/api) \u2014 details about the module's interface, including endpoints, message models, and emitted events.\n- Line 22: - [Messages](/developers/modules/admin/messages) \u2014 message format specifications.\n- Line 34: - **Message Execution**: Processing any valid `sdk.Msg` through the governance framework\n- Line 42: 2. **Message-Based Proposals**: Modern proposal execution introduced with SDK 0.47+, allowing any valid `sdk.Msg` to be executed through governance. This approach provides greater flexibility using the versatile `sdk.Msg` format and requires modules to implement an `authority` field specifying permitted addresses.\n\n**Content Preview:**\n```\n\nThe admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n\n\n---\n\n  - [Reference](/developers/modules/admin/reference) \u2014 comprehensive technical details.\n- [API](/developers/modules/admin/api) \u2014 details about the module's interface, including endpoints, message models, and emitted events.\n  - [Messages](/developers/modules/admin/messages) \u2014 message format specifications.\n\n---\n\n- [API](/developers/modules/admin/api) \u2014 details about the module's interface, including endpoints, message models, and emitted events.\n  - [Messages](/developers/modules/admin/messages) \u2014 message format specifications.\n  - [Events](/developers/modules/admin/events) \u2014 events emitted by the module.\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "281ef10d-6e76-4ced-8573-77a6fc93e658",
            "tool_call_id": "call_OeQeBnlKT0ZyuSPClKAbSlry",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_90bTNVrDRjaxzTeKJVd3WE5D",
                        "function": {
                            "arguments": "{\"query\":\"Cron MsgAddSchedule message fields permission\", \"section\":\"developers\", \"max_results\": 10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 232,
                    "prompt_tokens": 13015,
                    "total_tokens": 13247,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 192,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR86uhScpfaWbXmR8n8vBMNCOeJg",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--f0f8c92e-4768-4f35-a5ae-7700efa63721-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "Cron MsgAddSchedule message fields permission",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_90bTNVrDRjaxzTeKJVd3WE5D",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 13015,
                "output_tokens": 232,
                "total_tokens": 13247,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 192
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"Cron MsgAddSchedule message fields permission\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/cron/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n## 3. Messages\n**File:** /root/neutron/docs/developers/modules/dex/messages.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Messages\"\n- Line 5: The Dex module exposes several message types for interacting with the decentralized exchange. Here's a detailed documentation of each message and its expected behavior.\n- Line 12: message MsgDeposit {\n- Line 33: message DepositOptions {\n- Line 45: | `creator` | string | Address of the message sender |\n\n**Content Preview:**\n```\n---\ntitle: \"Messages\"\n---\n\n---\n\n\nThe Dex module exposes several message types for interacting with the decentralized exchange. Here's a detailed documentation of each message and its expected behavior.\n\n\n---\n\n```protobuf\nmessage MsgDeposit {\n  option (amino.name) = \"dex/MsgDeposit\";\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 6: ## Messages\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 15: message MsgAddSchedule {\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\n## Messages\n\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n```\n\n---\n\n## 5. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 19: - [Reference](/developers/modules/interchain-queries/reference) \u2014 complete technical reference including API endpoints, messages, events, state, and CLI commands.\n- Line 75: ### Permissions for Query Removal\n- Line 77: The `RemoveInterchainQuery` message can be executed by:\n- Line 88: - Message types\n- Line 89: - Specific fields within messages\n\n**Content Preview:**\n```\n- [How To](/developers/modules/interchain-queries/how-to) \u2014 short guides on performing basic operations with the module.\n- [Reference](/developers/modules/interchain-queries/reference) \u2014 complete technical reference including API endpoints, messages, events, state, and CLI commands.\n- [Known Bugs](/developers/modules/interchain-queries/known-bugs) \u2014 a list of known issues in the module.\n\n---\n\n\n### Permissions for Query Removal\n\n\n---\n\n\nThe `RemoveInterchainQuery` message can be executed by:\n- The query owner at any time\n```\n\n---\n\n## 6. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 18: #### Message Server\n- Line 19: The message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n- Line 22: The keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n- Line 25: The authority management system defines which addresses have permission to execute specific types of administrative operations. This system ensures that only authorized entities (typically the DAO) can perform critical network functions.\n- Line 47: #### Message-Based Proposals\n\n**Content Preview:**\n```\n\n#### Message Server\nThe message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n\n---\n\n#### Message Server\nThe message server acts as the primary entry point for governance operations, processing incoming administrative messages and coordinating their execution. It implements strict validation and authorization checks before allowing any operations to proceed.\n\n\n---\n\n#### Keeper\nThe keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n\n```\n\n---\n\n## 7. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 12: The admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n- Line 21: - [API](/developers/modules/admin/api) \u2014 details about the module's interface, including endpoints, message models, and emitted events.\n- Line 22: - [Messages](/developers/modules/admin/messages) \u2014 message format specifications.\n- Line 34: - **Message Execution**: Processing any valid `sdk.Msg` through the governance framework\n- Line 42: 2. **Message-Based Proposals**: Modern proposal execution introduced with SDK 0.47+, allowing any valid `sdk.Msg` to be executed through governance. This approach provides greater flexibility using the versatile `sdk.Msg` format and requires modules to implement an `authority` field specifying permitted addresses.\n\n**Content Preview:**\n```\n\nThe admin module provides a unified interface for governance operations, supporting both legacy proposal mechanisms and modern message-based execution. Through careful whitelisting and permission controls, it ensures that only authorized operations can be performed while maintaining the flexibility needed for network evolution.\n\n\n---\n\n  - [Reference](/developers/modules/admin/reference) \u2014 comprehensive technical details.\n- [API](/developers/modules/admin/api) \u2014 details about the module's interface, including endpoints, message models, and emitted events.\n  - [Messages](/developers/modules/admin/messages) \u2014 message format specifications.\n\n---\n\n- [API](/developers/modules/admin/api) \u2014 details about the module's interface, including endpoints, message models, and emitted events.\n  - [Messages](/developers/modules/admin/messages) \u2014 message format specifications.\n  - [Events](/developers/modules/admin/events) \u2014 events emitted by the module.\n```\n\n---\n\n## 8. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: **DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n- Line 12: ## Messages\n- Line 15: Submit a proposal with multiple messages for execution.\n- Line 17: **Fields:**\n- Line 18: - `messages`: Array of messages to execute\n\n**Content Preview:**\n```\n<Warning>\n**DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n</Warning>\n\n---\n\n\n## Messages\n\n\n---\n\n### MsgSubmitProposal\nSubmit a proposal with multiple messages for execution.\n\n```\n\n---\n\n## 9. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 11: When smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n- Line 32: A[IBC Module] -->|ACK Message| B[SudoLimitWrapper]\n- Line 60: To prevent DoS attacks via recursive IBC messages that could deplete block gas, the module enforces a strict gas limit for sudo calls. This limit is defined by the `SudoCallGasLimit` parameter.\n- Line 81: Since raw error messages may not be deterministic across nodes, the module redacts errors stored in the state to contain only the codespace and code ID. The full error text is emitted as an event rather than stored in state.\n- Line 90: The resubmission is permissioned - only the contract that originally received the IBC message can resubmit its failures.\n\n**Content Preview:**\n```\n\nWhen smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n\n\n---\n\ngraph TD\n    A[IBC Module] -->|ACK Message| B[SudoLimitWrapper]\n    B -->|Limited Gas Context| C[Contract Sudo Handler]\n\n---\n\n\nTo prevent DoS attacks via recursive IBC messages that could deplete block gas, the module enforces a strict gas limit for sudo calls. This limit is defined by the `SudoCallGasLimit` parameter.\n\n```\n\n---\n\n## 10. Reference\n**File:** /root/neutron/docs/developers/modules/contractmanager/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 19: message Failure {\n- Line 24: // Serialized MessageSudoCallback with Packet and Ack(if exists)\n- Line 33: ### ResubmitFailure Message\n- Line 42: // other messages...\n- Line 46: **Permissions**: Only the original contract can resubmit its own failures.\n\n**Content Preview:**\n```\n```protobuf\nmessage Failure {\n  // Address of the failed contract\n\n---\n\n  uint64 id = 2;\n  // Serialized MessageSudoCallback with Packet and Ack(if exists)\n  bytes sudo_payload = 3;\n\n---\n\n\n### ResubmitFailure Message\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "7332d9ce-a260-42d0-9091-93e20875793d",
            "tool_call_id": "call_90bTNVrDRjaxzTeKJVd3WE5D",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_Lo9uSrouS0d7GAAfGoO9jd0V",
                        "function": {
                            "arguments": "{\"query\":\"MsgAddSchedule description fields in Cron module reference\", \"section\":\"developers\", \"max_results\": 10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 298,
                    "prompt_tokens": 16391,
                    "total_tokens": 16689,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 256,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 12928
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR8EYQui2OjnjHV3RoGb2sBQtlIm",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--e46f3e97-3702-47ea-b408-4d940b4960b1-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "MsgAddSchedule description fields in Cron module reference",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_Lo9uSrouS0d7GAAfGoO9jd0V",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 16391,
                "output_tokens": 298,
                "total_tokens": 16689,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 12928
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 256
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"MsgAddSchedule description fields in Cron module reference\":\n\n## 1. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 26\n\n**Matching lines:**\n- Line 2: title: \"Reference\"\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 10: ### MsgAddSchedule\n- Line 15: message MsgAddSchedule {\n\n**Content Preview:**\n```\n---\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n\n---\n\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n```\n\n---\n\n## 2. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Reference\"\n- Line 3: description: \"Basic technical reference for the admin module\"\n- Line 6: The admin module provides governance-level administrative functions for the Neutron network.\n- Line 9: **DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n- Line 17: **Fields:**\n\n**Content Preview:**\n```\n---\ntitle: \"Reference\"\ndescription: \"Basic technical reference for the admin module\"\n\n---\n\ntitle: \"Reference\"\ndescription: \"Basic technical reference for the admin module\"\n---\n\n---\n\n\nThe admin module provides governance-level administrative functions for the Neutron network.\n\n```\n\n---\n\n## 3. Reference\n**File:** /root/neutron/docs/developers/modules/dynamicfees/reference.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Reference\"\n- Line 3: description: \"Basic reference for the Dynamic Fees module\"\n- Line 6: The Dynamic Fees module provides asset price conversion capabilities for the fee market by maintaining NTRN-denominated prices for supported assets.\n- Line 10: | Parameter | Type | Description |\n- Line 34: **Fields:**\n\n**Content Preview:**\n```\n---\ntitle: \"Reference\"\ndescription: \"Basic reference for the Dynamic Fees module\"\n\n---\n\ntitle: \"Reference\"\ndescription: \"Basic reference for the Dynamic Fees module\"\n---\n\n---\n\n\nThe Dynamic Fees module provides asset price conversion capabilities for the fee market by maintaining NTRN-denominated prices for supported assets.\n\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/gmp/reference.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Reference\"\n- Line 3: description: \"Technical reference for the GMP module\"\n- Line 6: The GMP (General Message Passing) module is an IBC middleware that processes messages embedded in IBC transfer packet memo fields.\n- Line 10: GMP messages are embedded in IBC transfer memo fields as JSON:\n- Line 23: | Field | Type | Required | Description |\n\n**Content Preview:**\n```\n---\ntitle: \"Reference\"\ndescription: \"Technical reference for the GMP module\"\n\n---\n\ntitle: \"Reference\"\ndescription: \"Technical reference for the GMP module\"\n---\n\n---\n\n\nThe GMP (General Message Passing) module is an IBC middleware that processes messages embedded in IBC transfer packet memo fields.\n\n```\n\n---\n\n## 5. Reference\n**File:** /root/neutron/docs/developers/modules/revenue/reference.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Reference\"\n- Line 3: description: \"Basic reference for the Revenue module\"\n- Line 6: The Revenue module manages validator compensation based on performance metrics and payment schedules.\n- Line 10: | Parameter | Type | Description |\n- Line 13: | `reward_quote` | object | Quotation of the reward asset with amount and asset fields |\n\n**Content Preview:**\n```\n---\ntitle: \"Reference\"\ndescription: \"Basic reference for the Revenue module\"\n\n---\n\ntitle: \"Reference\"\ndescription: \"Basic reference for the Revenue module\"\n---\n\n---\n\n\nThe Revenue module manages validator compensation based on performance metrics and payment schedules.\n\n```\n\n---\n\n## 6. Reference\n**File:** /root/neutron/docs/developers/modules/tokenfactory/reference.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Reference\"\n- Line 3: description: \"Technical reference for the Token Factory module\"\n- Line 6: The Token Factory module enables creation and management of custom tokens with configurable parameters and hooks.\n- Line 10: | Parameter | Type | Description |\n- Line 22: **Fields:**\n\n**Content Preview:**\n```\n---\ntitle: \"Reference\"  \ndescription: \"Technical reference for the Token Factory module\"\n\n---\n\ntitle: \"Reference\"  \ndescription: \"Technical reference for the Token Factory module\"\n---\n\n---\n\n\nThe Token Factory module enables creation and management of custom tokens with configurable parameters and hooks.\n\n```\n\n---\n\n## 7. Reference\n**File:** /root/neutron/docs/developers/modules/transfer/reference.mdx\n**Section:** developers\n**Relevance Score:** 23\n\n**Matching lines:**\n- Line 2: title: \"Reference\"\n- Line 3: description: \"Technical reference for the Neutron Transfer module\"\n- Line 6: The Neutron Transfer module is a wrapper over the standard IBC Transfer module with additional features for smart contract integration.\n- Line 64: // Standard IBC Transfer fields...\n\n**Content Preview:**\n```\n---\ntitle: \"Reference\"\ndescription: \"Technical reference for the Neutron Transfer module\"\n\n---\n\ntitle: \"Reference\"\ndescription: \"Technical reference for the Neutron Transfer module\"\n---\n\n---\n\n\nThe Neutron Transfer module is a wrapper over the standard IBC Transfer module with additional features for smart contract integration.\n\n```\n\n---\n\n## 8. Reference\n**File:** /root/neutron/docs/developers/modules/contractmanager/reference.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Reference\"\n- Line 3: description: \"Technical reference for the Contract Manager module\"\n- Line 6: The Contract Manager module manages sudo call failures and provides resubmission capabilities for IBC-related contract operations.\n- Line 10: | Parameter | Type | Description |\n- Line 80: The module provides middleware that:\n\n**Content Preview:**\n```\n---\ntitle: \"Reference\"\ndescription: \"Technical reference for the Contract Manager module\"\n\n---\n\ntitle: \"Reference\"\ndescription: \"Technical reference for the Contract Manager module\"\n---\n\n---\n\n\nThe Contract Manager module manages sudo call failures and provides resubmission capabilities for IBC-related contract operations.\n\n```\n\n---\n\n## 9. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 10. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "acbd1c46-b268-434a-882a-7b688b96f9d6",
            "tool_call_id": "call_Lo9uSrouS0d7GAAfGoO9jd0V",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_ucVCFuuKoCniDxzCFAlOcVA4",
                        "function": {
                            "arguments": "{\"query\":\"MsgAddSchedule Neutron\", \"section\":\"developers\", \"max_results\": 10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 230,
                    "prompt_tokens": 19170,
                    "total_tokens": 19400,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 192,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 16384
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR8LjP5zyWuUDTN0YosjOz6FAAaF",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--90aa5ee7-7c6f-4c20-8bf8-720678d2a2ce-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "MsgAddSchedule Neutron",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_ucVCFuuKoCniDxzCFAlOcVA4",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 19170,
                "output_tokens": 230,
                "total_tokens": 19400,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 16384
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 192
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"MsgAddSchedule Neutron\":\n\n## 1. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Neutron Modules\"\n- Line 5: Neutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n- Line 73: Most Neutron modules follow consistent patterns when used in CosmWasm smart contracts:\n- Line 77: use neutron_sdk::interchain_queries::...; // for ICQ\n- Line 78: use neutron_sdk::bindings::...; // for other modules\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Modules\"\n---\n\n---\n\n\nNeutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n\n\n---\n\n\nMost Neutron modules follow consistent patterns when used in CosmWasm smart contracts:\n\n```\n\n---\n\n## 2. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"NeutronTemplate\"\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 7: NeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n- Line 10: <strong>Live Demo:</strong> <a href=\"https://neutrontemplate.deploydon.com\" target=\"_blank\" className=\"text-primary hover:underline\">https://NeutronTemplate.Deploydon.com</a>\n- Line 65: git clone https://github.com/Deploydon/NeutronTemplate.git\n\n**Content Preview:**\n```\n---\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n\n---\n\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n\nNeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n\n```\n\n---\n\n## 3. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n- Line 23: ## Getting Started with SubQuery for Neutron\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 4. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 10: - Understanding of Neutron governance processes\n- Line 29: Neutron uses a [modular governance system](/concepts/modular-governance) with specialized subDAOs that handle different aspects of network management. The Security SubDAO can remove schedules in emergency situations, providing a safety mechanism for the network.\n- Line 44: \"@type\": \"/neutron.cron.MsgAddSchedule\",\n- Line 45: \"authority\": \"neutron1...\",\n- Line 50: \"contract\": \"neutron1contract...\",\n\n**Content Preview:**\n```\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n\n---\n\n<Note>\nNeutron uses a [modular governance system](/concepts/modular-governance) with specialized subDAOs that handle different aspects of network management. The Security SubDAO can remove schedules in emergency situations, providing a safety mechanism for the network.\n</Note>\n\n---\n\n    {\n      \"@type\": \"/neutron.cron.MsgAddSchedule\",\n      \"authority\": \"neutron1...\",\n```\n\n---\n\n## 5. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 10: ### MsgAddSchedule\n- Line 15: message MsgAddSchedule {\n- Line 113: neutrond query cron params\n- Line 118: /neutron/cron/params\n- Line 127: neutrond query cron show-schedule [schedule-name]\n\n**Content Preview:**\n```\n\n### MsgAddSchedule\n\n\n---\n\n```protobuf\nmessage MsgAddSchedule {\n  string authority = 1;                      // The address of the governance account\n\n---\n\n```bash\nneutrond query cron params\n```\n```\n\n---\n\n## 6. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 3: description: \"Answers to common technical questions about Neutron development\"\n- Line 12: <li><a href=\"https://t.me/+Q6C_kb0xLaoxYzE1\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Builders Announcements</a></li>\n- Line 13: <li><a href=\"https://t.me/+b9f8m8iybLdhYjE9\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Builders Chat</a></li>\n- Line 21: <Card title=\"Bug Bounty\" icon=\"bug\" iconType=\"duotone\" href=\"https://immunefi.com/bug-bounty/neutron\" target=\"_blank\">\n- Line 30: Check out our bug bounty program on <a href=\"https://immunefi.com/bug-bounty/neutron\" target=\"_blank\" className=\"text-primary hover:underline\">Immunefi</a>.\n\n**Content Preview:**\n```\ntitle: \"Frequently Asked Questions\"\ndescription: \"Answers to common technical questions about Neutron development\"\nicon: \"circle-question\"\n\n---\n\n    <ul className=\"mt-2 space-y-1\">\n      <li><a href=\"https://t.me/+Q6C_kb0xLaoxYzE1\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Builders Announcements</a></li>\n      <li><a href=\"https://t.me/+b9f8m8iybLdhYjE9\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Builders Chat</a></li>\n\n---\n\n      <li><a href=\"https://t.me/+Q6C_kb0xLaoxYzE1\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Builders Announcements</a></li>\n      <li><a href=\"https://t.me/+b9f8m8iybLdhYjE9\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Builders Chat</a></li>\n    </ul>\n```\n\n---\n\n## 7. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 9: **Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 14: The admin module serves as the central governance hub for the Neutron network, designed to handle administrative operations through a secure, controlled framework. The module architecture consists of several key components working together to ensure safe and effective network governance.\n- Line 104: ## Integration with Neutron DAO\n- Line 108: The admin module integrates with Neutron's DAO through specialized WASM bindings:\n- Line 198: This technical foundation ensures that the admin module can serve as a reliable, secure, and efficient governance mechanism for the Neutron network while maintaining the flexibility needed for future evolution.\n\n**Content Preview:**\n```\n<Warning>\n**Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module serves as the central governance hub for the Neutron network, designed to handle administrative operations through a secure, controlled framework. The module architecture consists of several key components working together to ensure safe and effective network governance.\n\n\n---\n\n\n## Integration with Neutron DAO\n\n```\n\n---\n\n## 8. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 6: This guide explains how the admin module works within Neutron's governance system. Unlike other modules that users can interact with directly, the admin module is exclusively accessible by the **Main DAO contract**.\n- Line 9: The admin module cannot be used directly by individual users or external contracts. All interactions must go through Neutron's DAO governance process.\n- Line 25: When the Neutron community wants to execute administrative operations:\n- Line 43: Neutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n- Line 50: - **[governance.neutron.org](https://governance.neutron.org)** - Official governance interface\n\n**Content Preview:**\n```\n\nThis guide explains how the admin module works within Neutron's governance system. Unlike other modules that users can interact with directly, the admin module is exclusively accessible by the **Main DAO contract**.\n\n\n---\n\n<Warning>\nThe admin module cannot be used directly by individual users or external contracts. All interactions must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nWhen the Neutron community wants to execute administrative operations:\n\n```\n\n---\n\n## 9. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 6: The admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n- Line 9: **Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 29: The admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n- Line 50: The admin module is exclusively accessible through Neutron's Main DAO contract via WebAssembly bindings. This tight integration ensures that all network administration flows through the democratic governance process while maintaining the technical capability to execute complex administrative operations.\n- Line 56: 1. **DAO Proposal Creation**: Governance proposals are created and voted on through the Neutron DAO\n\n**Content Preview:**\n```\n\nThe admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n\n\n---\n\n<Warning>\n**Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n\n```\n\n---\n\n## 10. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 9: When developing contracts that use IBC functionality on Neutron, you need to properly handle acknowledgments:\n- Line 42: neutrond query contractmanager failures [contract-address]\n- Line 50: \"address\": \"neutron1...\",\n- Line 69: let request = NeutronQuery::ContractManagerFailures {\n- Line 83: neutrond query contractmanager failure-details [address] [failure_id]\n\n**Content Preview:**\n```\n\nWhen developing contracts that use IBC functionality on Neutron, you need to properly handle acknowledgments:\n\n\n---\n\n```bash\nneutrond query contractmanager failures [contract-address]\n```\n\n---\n\n    {\n      \"address\": \"neutron1...\",\n      \"id\": \"1\",\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "e9a5b6e9-1f02-42cc-bd07-e70126a87ada",
            "tool_call_id": "call_ucVCFuuKoCniDxzCFAlOcVA4",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_PvEtt8KphAWlv16GhO1XFFRm",
                        "function": {
                            "arguments": "{\"query\":\"\\\"MsgAddSchedule\\\" string authority contract period\",\"section\":\"developers\",\"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 488,
                    "prompt_tokens": 23017,
                    "total_tokens": 23505,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 448,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 19072
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR8Sbs07k6E7WB7ALXmYzFau1wXa",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--a68f6e9b-d6c0-4c47-8da4-da4d76a94286-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "\"MsgAddSchedule\" string authority contract period",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_PvEtt8KphAWlv16GhO1XFFRm",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 23017,
                "output_tokens": 488,
                "total_tokens": 23505,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 19072
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 448
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"\"MsgAddSchedule\" string authority contract period\":\n\n## 1. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 17: Test individual contract functions in isolation\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 2. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 10: A simple counter contract that:\n- Line 19: - [Docker](https://docs.docker.com/get-docker/) for contract optimization\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 3. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Part 2: Modules & Contracts\"\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 11: - Inter-contract communication patterns\n- Line 17: - Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n\n**Content Preview:**\n```\n---\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n\n---\n\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 16: string authority = 1;                      // The address of the governance account\n- Line 17: string name = 2;                           // Unique identifier for the schedule\n- Line 18: uint64 period = 3;                         // Number of blocks between executions\n- Line 19: repeated MsgExecuteContract msgs = 4;      // Messages to execute\n- Line 30: string authority = 1;                      // The address of the governance account\n\n**Content Preview:**\n```\nmessage MsgAddSchedule {\n  string authority = 1;                      // The address of the governance account\n  string name = 2;                           // Unique identifier for the schedule\n\n---\n\n  string authority = 1;                      // The address of the governance account\n  string name = 2;                           // Unique identifier for the schedule\n  uint64 period = 3;                         // Number of blocks between executions\n\n---\n\n  string name = 2;                           // Unique identifier for the schedule\n  uint64 period = 3;                         // Number of blocks between executions\n  repeated MsgExecuteContract msgs = 4;      // Messages to execute\n```\n\n---\n\n## 5. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 33: \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn\", // governance authority\n- Line 89: \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn\",\n- Line 171: ### Smart Contract Integration\n- Line 173: CosmWasm contracts can query supported denominations:\n- Line 179: pub fn query_supported_denoms(deps: Deps) -> StdResult<Vec<String>> {\n\n**Content Preview:**\n```\n      \"@type\": \"/neutron.dynamicfees.MsgUpdateParams\",\n      \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn\", // governance authority\n      \"params\": {\n\n---\n\n      \"@type\": \"/neutron.dynamicfees.MsgUpdateParams\", \n      \"authority\": \"neutron10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn\",\n      \"params\": {\n\n---\n\n\n### Smart Contract Integration\n\n```\n\n---\n\n## 6. Reference\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 6: The IBC Rate Limit module provides rate limiting capabilities for IBC transfers by delegating logic to a CosmWasm contract.\n- Line 12: | `contract_address` | string | Address of the CosmWasm contract implementing rate limiting logic |\n- Line 37: **Authority Required**: Governance only\n- Line 40: - `authority`: Governance authority address\n- Line 58: - **Contract-Based**: Rate limiting logic is implemented in a CosmWasm contract\n\n**Content Preview:**\n```\n\nThe IBC Rate Limit module provides rate limiting capabilities for IBC transfers by delegating logic to a CosmWasm contract.\n\n\n---\n\n| --- | --- | --- |\n| `contract_address` | string | Address of the CosmWasm contract implementing rate limiting logic |\n\n\n---\n\n\n**Authority Required**: Governance only\n\n```\n\n---\n\n## 7. Reference\n**File:** /root/neutron/docs/developers/modules/interchain-queries/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 32: Registers a new Interchain Query in the `interchainqueries` module. This message should only be issued by a smart contract. The calling contract is automatically charged a query registration deposit. The deposit is refunded when the query is removed.\n- Line 37: string query_type = 1;                 // Either \"kv\" or \"tx\"\n- Line 39: string transactions_filter = 3;        // TX filter (for TX queries only)\n- Line 40: string connection_id = 4;              // IBC connection ID\n- Line 41: uint64 update_period = 5;              // Minimum blocks between updates\n\n**Content Preview:**\n```\n\nRegisters a new Interchain Query in the `interchainqueries` module. This message should only be issued by a smart contract. The calling contract is automatically charged a query registration deposit. The deposit is refunded when the query is removed.\n\n\n---\n\nmessage MsgRegisterInterchainQuery {\n  string query_type = 1;                 // Either \"kv\" or \"tx\"\n  repeated KVKey keys = 2;               // KV keys (for KV queries only)\n\n---\n\n  repeated KVKey keys = 2;               // KV keys (for KV queries only)\n  string transactions_filter = 3;        // TX filter (for TX queries only)\n  string connection_id = 4;              // IBC connection ID\n```\n\n---\n\n## 8. Reference\n**File:** /root/neutron/docs/developers/modules/revenue/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 12: | `reward_asset` | string | Token denomination used for compensation payments |\n- Line 54: - `payment_schedule`: Current payment schedule with period tracking\n- Line 55: - `effective_period_progress`: Revenue amount multiplier for current period\n- Line 64: **Authority Required**: Governance only\n- Line 67: - `authority`: Governance authority address\n\n**Content Preview:**\n```\n| --- | --- | --- |\n| `reward_asset` | string | Token denomination used for compensation payments |\n| `reward_quote` | object | Quotation of the reward asset with amount and asset fields |\n\n---\n\n**Response:**\n- `payment_schedule`: Current payment schedule with period tracking\n- `effective_period_progress`: Revenue amount multiplier for current period\n\n---\n\n- `payment_schedule`: Current payment schedule with period tracking\n- `effective_period_progress`: Revenue amount multiplier for current period\n- `reward_asset_twap`: Current TWAP of the reward asset\n```\n\n---\n\n## 9. Reference\n**File:** /root/neutron/docs/developers/modules/tokenfactory/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 14: | `fee_collector_address` | string | Address where creation fees are sent |\n- Line 15: | `whitelisted_hooks` | WhitelistedHook[] | List of approved before-send hook contracts |\n- Line 51: - `new_admin`: New admin address (empty string to renounce)\n- Line 66: - `contract_addr`: Hook contract address (empty to remove)\n- Line 82: ### QueryDenomAuthorityMetadata\n\n**Content Preview:**\n```\n| `denom_creation_gas_consume` | uint64 | Additional gas consumed during token creation |\n| `fee_collector_address` | string | Address where creation fees are sent |\n| `whitelisted_hooks` | WhitelistedHook[] | List of approved before-send hook contracts |\n\n---\n\n| `fee_collector_address` | string | Address where creation fees are sent |\n| `whitelisted_hooks` | WhitelistedHook[] | List of approved before-send hook contracts |\n\n\n---\n\n- `denom`: Token denomination\n- `new_admin`: New admin address (empty string to renounce)\n\n```\n\n---\n\n## 10. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: **Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 22: The keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n- Line 24: #### Authority Management\n- Line 25: The authority management system defines which addresses have permission to execute specific types of administrative operations. This system ensures that only authorized entities (typically the DAO) can perform critical network functions.\n- Line 41: - Custom WASM proposals for smart contract operations\n\n**Content Preview:**\n```\n<Warning>\n**Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n#### Keeper\nThe keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n\n\n---\n\n\n#### Authority Management\nThe authority management system defines which addresses have permission to execute specific types of administrative operations. This system ensures that only authorized entities (typically the DAO) can perform critical network functions.\n```\n\n---\n\n## 11. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n- Line 9: **Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 29: The admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n- Line 32: - **Smart Contract Management**: Executing WebAssembly (WASM) proposals for contract instantiation, migration, and administration\n- Line 40: 1. **Legacy Proposals**: Traditional governance proposals rooted in the Cosmos SDK's `x/gov` module, supporting predefined proposals like `MigrateContract`, `InstantiateContract`, and parameter changes. These proposals are processed through dedicated handlers and remain supported for backward compatibility with modules like IBC that haven't fully transitioned to SDK 0.47 patterns.\n\n**Content Preview:**\n```\n\nThe admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n\n\n---\n\n<Warning>\n**Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n\n```\n\n---\n\n## 12. Reference\n**File:** /root/neutron/docs/developers/modules/contractmanager/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Technical reference for the Contract Manager module\"\n- Line 6: The Contract Manager module manages sudo call failures and provides resubmission capabilities for IBC-related contract operations.\n- Line 12: | `sudo_call_gas_limit` | uint64 | Maximum gas that can be used during a sudo call to a contract |\n- Line 20: // Address of the failed contract\n- Line 21: string address = 1;\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Technical reference for the Contract Manager module\"\n---\n\n---\n\n\nThe Contract Manager module manages sudo call failures and provides resubmission capabilities for IBC-related contract operations.\n\n\n---\n\n| --- | --- | --- |\n| `sudo_call_gas_limit` | uint64 | Maximum gas that can be used during a sudo call to a contract |\n\n```\n\n---\n\n## 13. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 20: **Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n- Line 31: - The execution period (in blocks)\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 35: The module stores this schedule in its state and begins executing it according to the specified period.\n- Line 43: current_block_height \u2265 (last_execution_height + period)\n\n**Content Preview:**\n```\n<Warning>\n**Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n</Warning>\n\n---\n\n- A unique name for identification\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n\n---\n\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n```\n\n---\n\n## 14. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 19: - Individual users and contracts cannot directly interact with this module\n- Line 36: To create a schedule, you need to submit a governance proposal using the DAO contract format. Here's the structure for adding a schedule:\n- Line 45: \"authority\": \"neutron1...\",\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n---\n\n- Only governance can create or remove schedules\n- Individual users and contracts cannot directly interact with this module\n- Schedule management requires proposals to either:\n```\n\n---\n\n## 15. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 23: - **Periodic Tasks**: Set up recurring executions every N blocks\n- Line 29: - Contracts cannot directly create schedules\n- Line 48: - The execution period (in blocks)\n\n**Content Preview:**\n```\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n\n---\n\n- **Scheduled Block Executions**: Register messages to be executed at specific block intervals\n- **Periodic Tasks**: Set up recurring executions every N blocks\n- **Governance-Controlled Scheduling**: All schedule creation requires governance approval\n```\n\n---\n\n## 16. Dynamic Fees Technical Details\n**File:** /root/neutron/docs/developers/modules/dynamicfees/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 31: func (k Keeper) ConvertToDenom(ctx sdk.Context, fromCoin sdk.DecCoin, toDenom string) (sdk.DecCoin, error) {\n- Line 56: func (k Keeper) ExtraDenoms(ctx sdk.Context) ([]string, error) {\n- Line 58: denoms := make([]string, 0, params.NtrnPrices.Len())\n- Line 105: // Validate authority\n- Line 106: authority := k.GetAuthority()\n\n**Content Preview:**\n```\n```go\nfunc (k Keeper) ConvertToDenom(ctx sdk.Context, fromCoin sdk.DecCoin, toDenom string) (sdk.DecCoin, error) {\n    params := k.GetParams(ctx)\n\n---\n\n```go\nfunc (k Keeper) ExtraDenoms(ctx sdk.Context) ([]string, error) {\n    params := k.GetParams(ctx)\n\n---\n\n    params := k.GetParams(ctx)\n    denoms := make([]string, 0, params.NtrnPrices.Len())\n    for _, coin := range params.NtrnPrices {\n```\n\n---\n\n## 17. Reference\n**File:** /root/neutron/docs/developers/modules/feeburner/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 12: | `neutron_denom` | string | Denomination of Neutron tokens to burn (typically \"untrn\") |\n- Line 13: | `treasury_address` | string | Address to receive non-NTRN fees |\n- Line 14: | `reserve_address` | string | Deprecated in v0.4.4 - no longer used |\n- Line 35: **Authority Required**: Governance only\n- Line 38: - `authority`: Governance authority address\n\n**Content Preview:**\n```\n| --- | --- | --- |\n| `neutron_denom` | string | Denomination of Neutron tokens to burn (typically \"untrn\") |\n| `treasury_address` | string | Address to receive non-NTRN fees |\n\n---\n\n| `neutron_denom` | string | Denomination of Neutron tokens to burn (typically \"untrn\") |\n| `treasury_address` | string | Address to receive non-NTRN fees |\n| `reserve_address` | string | Deprecated in v0.4.4 - no longer used |\n\n---\n\n| `treasury_address` | string | Address to receive non-NTRN fees |\n| `reserve_address` | string | Deprecated in v0.4.4 - no longer used |\n\n```\n\n---\n\n## 18. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n- Line 7: ## For Smart Contract Developers\n- Line 27: denom: \"untrn\".to_string(),\n- Line 28: amount: \"1000\".to_string(),\n- Line 33: denom: \"untrn\".to_string(),\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n\n\n---\n\n\n## For Smart Contract Developers\n\n\n---\n\n    ack_fee: vec![Coin {\n        denom: \"untrn\".to_string(),\n        amount: \"1000\".to_string(),\n```\n\n---\n\n## 19. How-to\n**File:** /root/neutron/docs/developers/modules/gmp/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 24: \"action\": \"execute_contract\",\n- Line 25: \"contract_address\": \"neutron1...\",\n- Line 39: const payload = JSON.stringify({\n- Line 40: \"action\": \"execute_contract\",\n- Line 41: \"contract_address\": \"neutron1...\",\n\n**Content Preview:**\n```\n{\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n\n---\n\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n  \"msg\": {\n\n---\n\n```javascript\nconst payload = JSON.stringify({\n  \"action\": \"execute_contract\",\n```\n\n---\n\n## 20. Explanation\n**File:** /root/neutron/docs/developers/modules/harpoon/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: This document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n- Line 12: The Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n- Line 63: ### Contract Subscription Storage\n- Line 65: The module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n- Line 71: contract_addresses: []string\n\n**Content Preview:**\n```\n\nThis document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n\n\n---\n\n\nThe Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n\n\n---\n\n\n### Contract Subscription Storage\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "f2d2b9ec-9e86-452f-9e12-4d6d0ab68402",
            "tool_call_id": "call_PvEtt8KphAWlv16GhO1XFFRm",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_IcmZSqFdNAuiKS8sdZSK5ou5",
                        "function": {
                            "arguments": "{\"query\":\"neutrond query cron list-schedules\",\"section\":\"developers\",\"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 423,
                    "prompt_tokens": 29646,
                    "total_tokens": 30069,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 384,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR8erZIypxwBuXO7qzMvlyqc2aQ3",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--bd841ee1-4b4a-4592-a5a0-d8c57a4c29c1-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutrond query cron list-schedules",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_IcmZSqFdNAuiKS8sdZSK5ou5",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 29646,
                "output_tokens": 423,
                "total_tokens": 30069,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 384
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"neutrond query cron list-schedules\":\n\n## 1. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Understanding Cron\"\n- Line 3: description: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n- Line 6: This document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n- Line 8: ## What is the Cron Module?\n- Line 10: The Cron module enables on-chain time-based automation by maintaining a registry of schedules and executing them at the appropriate block heights. Traditional blockchain applications require external triggers for time-sensitive operations, which creates several challenges:\n\n**Content Preview:**\n```\n---\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n\n---\n\ntitle: \"Understanding Cron\"\ndescription: \"Detailed explanation of how the Cron module works and why it's designed this way\"\n---\n\n---\n\n\nThis document provides a technical explanation of the Cron module architecture, concepts, and design choices.\n\n```\n\n---\n\n## 2. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Cron Module\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/cron/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\n---\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n## 3. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 8: ## Key Advantages of SubQuery\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 4. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Comprehensive technical reference for the Cron module\"\n- Line 8: The Cron module accepts messages through governance proposals only.\n- Line 50: The primary state object in the Cron module:\n- Line 105: ## Query Methods\n- Line 113: neutrond query cron params\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Comprehensive technical reference for the Cron module\"\n---\n\n---\n\n\nThe Cron module accepts messages through governance proposals only.\n\n\n---\n\n\nThe primary state object in the Cron module:\n\n```\n\n---\n\n## 5. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 98: // Query the price\n- Line 99: queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n- Line 100: resp, err := queryClient.ExchangeRate(context.Background(), &oracletypes.QueryExchangeRateRequest{\n- Line 108: ### 2. Cron Module Tests\n\n**Content Preview:**\n```\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n    \n    // Query the price\n    queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n\n---\n\n    // Query the price\n    queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n    resp, err := queryClient.ExchangeRate(context.Background(), &oracletypes.QueryExchangeRateRequest{\n```\n\n---\n\n## 6. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 61: neutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n- Line 75: neutrond tx wasm submit-proposal proposal.json \\\n- Line 163: ## Querying the Admin Module\n- Line 165: While you cannot submit proposals directly, you can query the admin module's state using standard query commands:\n- Line 168: # Query module parameters (if available)\n\n**Content Preview:**\n```\n# Execute a propose message on the Main DAO contract\nneutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n  '{\"propose\": {\"msg\": {\"propose_single\": {\"title\": \"Your Proposal Title\", \"description\": \"Your proposal description\", \"msgs\": [/* your admin module messages */]}}}}' \\\n\n---\n\n# Submit proposal via WASM module\nneutrond tx wasm submit-proposal proposal.json \\\n  --from=<your-key> \\\n\n---\n\n\n## Querying the Admin Module\n\n```\n\n---\n\n## 7. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 37: To check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n- Line 42: neutrond query contractmanager failures [contract-address]\n- Line 61: You can query failures from within another contract using bindings:\n- Line 64: // Query failures from a CosmWasm contract\n- Line 65: pub fn query_failures(\n\n**Content Preview:**\n```\n\nTo check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n\n\n---\n\n```bash\nneutrond query contractmanager failures [contract-address]\n```\n\n---\n\n\nYou can query failures from within another contract using bindings:\n\n```\n\n---\n\n## 8. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 60: neutrond tx gov submit-proposal proposal.json \\\n- Line 73: neutrond tx gov vote 123 yes \\\n- Line 127: ## Querying Module Information\n- Line 129: ### Query Current Parameters\n- Line 132: # Query current asset prices\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal proposal.json \\\n  --from your-key \\\n\n---\n\n# Vote yes on proposal ID 123\nneutrond tx gov vote 123 yes \\\n  --from your-key \\\n\n---\n\n\n## Querying Module Information\n\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/feeburner/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Fee Burner module, primarily for operators, validators, and users who need to query information about burned fees.\n- Line 7: ## Querying Module Parameters\n- Line 9: You can query the current parameters of the Fee Burner module using the CLI:\n- Line 12: neutrond query feeburner params\n- Line 33: To query the total amount of NTRN tokens that have been burned since genesis:\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Fee Burner module, primarily for operators, validators, and users who need to query information about burned fees.\n\n\n---\n\n\n## Querying Module Parameters\n\n\n---\n\n\nYou can query the current parameters of the Fee Burner module using the CLI:\n\n```\n\n---\n\n## 10. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 99: // Query the module parameters to get minimum required fees\n- Line 100: let params: QueryParamsResponse = deps.querier.query(\n- Line 101: &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n- Line 133: neutrond query feerefunder params\n- Line 191: ## Querying Fee Information\n\n**Content Preview:**\n```\n```rust\n// Query the module parameters to get minimum required fees\nlet params: QueryParamsResponse = deps.querier.query(\n\n---\n\n// Query the module parameters to get minimum required fees\nlet params: QueryParamsResponse = deps.querier.query(\n    &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n\n---\n\nlet params: QueryParamsResponse = deps.querier.query(\n    &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n)?;\n```\n\n---\n\n## 11. Reference\n**File:** /root/neutron/docs/developers/modules/feerefunder/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: ### QueryParams\n- Line 35: **CLI:** `neutrond query feerefunder params`\n- Line 41: ### QueryFeeInfo\n- Line 44: **CLI:** `neutrond query feerefunder fee-info [port_id] [channel_id] [sequence]`\n- Line 68: - **Query-Only for Users**: Users can only query fee information and parameters\n\n**Content Preview:**\n```\n\n### QueryParams\nRetrieve the current module parameters.\n\n---\n\n\n**CLI:** `neutrond query feerefunder params`\n**REST:** `GET /neutron-org/neutron/feerefunder/params`\n\n---\n\n\n### QueryFeeInfo  \nRetrieve fee information for a specific IBC packet.\n```\n\n---\n\n## 12. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 153: **Query Current Parameters:**\n- Line 158: const params = await client.queryContractSmart(\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n- Line 198: neutrond query block [height] | jq '.block.data.txs[] | select(.body.messages[].type_url | contains(\"MsgVote\"))'\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n\n**Query Current Parameters:**\n\n\n---\n\n\nconst params = await client.queryContractSmart(\n  \"neutron1...\", // Global fee module address\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 306: neutrond tx gov submit-proposal /path/to/proposal.json \\\n- Line 319: neutrond tx gov vote <proposal-id> yes \\\n- Line 331: ## Querying Hook Subscriptions\n- Line 333: You can query to see which contracts are subscribed to specific hook types.\n- Line 338: neutrond query harpoon subscribed-contracts HOOK_TYPE_BEFORE_DELEGATION_CREATED\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal /path/to/proposal.json \\\n  --from <your-key> \\\n\n---\n\n```bash\nneutrond tx gov vote <proposal-id> yes \\\n  --from <your-key> \\\n\n---\n\n\n## Querying Hook Subscriptions\n\n```\n\n---\n\n## 14. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: ## How to choose the right IBC connection ID for an Interchain Query and verify it\n- Line 16: Go to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n- Line 26: neutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 44: neutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 69: connection_id: connection-0  << matches the third step's connection-id query parameter\n\n**Content Preview:**\n```\n\n## How to choose the right IBC connection ID for an Interchain Query and verify it\n\n\n---\n\n\nGo to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n\n\n---\n\n```\nneutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\nconnection:\n```\n\n---\n\n## 15. Developer Quickstart\n**File:** /root/neutron/docs/developers/quickstart.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 46: # Build the neutrond binary\n- Line 50: neutrond version\n- Line 68: git clone https://github.com/neutron-org/neutron-query-relayer.git\n- Line 152: neutrond tx wasm store artifacts/my_neutron_contract.wasm \\\n- Line 161: neutrond query wasm list-code --node http://localhost:26657\n\n**Content Preview:**\n```\n    \n    # Build the neutrond binary\n    make install\n\n---\n\n    # Verify installation\n    neutrond version\n    ```\n\n---\n\n    git clone https://github.com/neutron-org/neutron-integration-tests.git\n    git clone https://github.com/neutron-org/neutron-query-relayer.git\n    git clone https://github.com/cosmos/gaia.git\n```\n\n---\n\n## 16. Cosmopark Tutorial\n**File:** /root/neutron/docs/developers/tutorials/onboarding/cosmopark.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 48: git clone https://github.com/neutron-org/neutron-query-relayer.git\n- Line 126: Access the node using the standard `neutrond` CLI:\n- Line 129: # Example: Query account balance\n- Line 130: neutrond q bank balances neutron1m9l358xunhhwds0568za49mzhvuxx9ux8xafx2 --node http://localhost:26657\n- Line 143: # Example: Query account\n\n**Content Preview:**\n```\ngit clone https://github.com/neutron-org/neutron-integration-tests.git\ngit clone https://github.com/neutron-org/neutron-query-relayer.git\n\n\n---\n\n\nAccess the node using the standard `neutrond` CLI:\n\n\n---\n\n```bash\n# Example: Query account balance\nneutrond q bank balances neutron1m9l358xunhhwds0568za49mzhvuxx9ux8xafx2 --node http://localhost:26657\n```\n\n---\n\n## 17. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 29: <Card title=\"Cron\" icon=\"clock\">\n- Line 33: Query data from other IBC-connected chains\n- Line 100: pub enum QueryMsg {\n- Line 134: use neutron_sdk::bindings::query::NeutronQuery;\n\n**Content Preview:**\n```\n\n- How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Inter-contract communication patterns\n\n---\n\n  </Card>\n  <Card title=\"Cron\" icon=\"clock\">\n    Schedule automated contract executions\n\n---\n\n  <Card title=\"ICQ\" icon=\"link\">\n    Query data from other IBC-connected chains\n  </Card>\n```\n\n---\n\n## 18. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 62: ### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n- Line 72: 1. **General Cosmos SDK Query Gas Limit** (`query-gas-limit` in root of app.toml):\n- Line 74: # The maximum gas a query coming over rest/grpc may consume.\n- Line 75: # If this is set to zero, the query can consume an unbounded amount of gas.\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\n### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n\n\n---\n\n\n1. **General Cosmos SDK Query Gas Limit** (`query-gas-limit` in root of app.toml):\n   ```toml\n```\n\n---\n\n## 19. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 44: ### QueryAdmins\n- Line 50: ### QueryParams\n- Line 56: ### QueryWhitelist\n- Line 62: ### QueryProposal\n- Line 71: ### QueryProposals\n\n**Content Preview:**\n```\n\n### QueryAdmins\nRetrieve the list of administrators.\n\n---\n\n\n### QueryParams\nRetrieve module parameters.\n\n---\n\n\n### QueryWhitelist\nRetrieve the message whitelist.\n```\n\n---\n\n## 20. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 3: description: \"Step-by-step instructions for using the Cron module through governance\"\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 14: ## Understanding Cron Module Access\n- Line 16: The Cron module is **governance-gated**, meaning:\n- Line 25: **No Individual Access**: Unlike other modules, the Cron module does not accept direct user transactions. All schedule management must go through governance proposals.\n\n**Content Preview:**\n```\ntitle: \"How-to\"\ndescription: \"Step-by-step instructions for using the Cron module through governance\"\n---\n\n---\n\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n## Understanding Cron Module Access\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "e7976e51-5ddf-4629-887c-92669734a092",
            "tool_call_id": "call_IcmZSqFdNAuiKS8sdZSK5ou5",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "[\n  {\n    \"intent\": \"Create a cron schedule named \\\"daily_rewards\\\" that distributes rewards every 7,200 blocks at END_BLOCKER\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"gather_schedule_inputs\",\n        \"description\": \"Collect the schedule name (daily_rewards), execution period (7200 blocks), execution stage (END_BLOCKER), target contract address, and the MsgExecuteContract payload that handles reward distribution.\"\n      },\n      {\n        \"step\": 2,\n        \"tool\": \"construct_msg_add_schedule\",\n        \"description\": \"Build a MsgAddSchedule object with fields: authority=<DAO address>, name=\\\"daily_rewards\\\", period=7200, msgs=[compiled MsgExecuteContract], execution_stage=\\\"END_BLOCKER\\\".\"\n      },\n      {\n        \"step\": 3,\n        \"tool\": \"wrap_in_dao_proposal\",\n        \"description\": \"Embed the MsgAddSchedule in a DAO governance proposal (propose_single) so that the Main DAO can approve the new schedule.\"\n      },\n      {\n        \"step\": 4,\n        \"tool\": \"sign_and_broadcast_tx\",\n        \"description\": \"Sign the DAO `wasm/execute` transaction that submits the proposal and broadcast it to the network.\"\n      },\n      {\n        \"step\": 5,\n        \"tool\": \"monitor_proposal_status\",\n        \"description\": \"Track the proposal until it reaches the `Executed` state, indicating the schedule has been added.\"\n      },\n      {\n        \"step\": 6,\n        \"tool\": \"query_cron_show_schedule\",\n        \"description\": \"Query the Cron module for \\\"daily_rewards\\\" to confirm the schedule now exists with the correct parameters.\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"The DAO proposal status is `Executed`.\",\n      \"\\\"daily_rewards\\\" appears in `neutrond query cron show-schedule daily_rewards` with period 7200 and stage END_BLOCKER.\"\n    ]\n  },\n  {\n    \"intent\": \"Remove the cron schedule named \\\"daily_rewards\\\"\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"construct_msg_remove_schedule\",\n        \"description\": \"Create a MsgRemoveSchedule with fields: authority=<DAO address>, name=\\\"daily_rewards\\\".\"\n      },\n      {\n        \"step\": 2,\n        \"tool\": \"wrap_in_dao_proposal\",\n        \"description\": \"Place the MsgRemoveSchedule into a DAO proposal for approval.\"\n      },\n      {\n        \"step\": 3,\n        \"tool\": \"sign_and_broadcast_tx\",\n        \"description\": \"Submit the proposal through the Main DAO contract and broadcast the transaction.\"\n      },\n      {\n        \"step\": 4,\n        \"tool\": \"monitor_proposal_status\",\n        \"description\": \"Wait for the proposal to pass and execute, indicating the schedule removal was processed.\"\n      },\n      {\n        \"step\": 5,\n        \"tool\": \"query_cron_show_schedule\",\n        \"description\": \"Attempt to query \\\"daily_rewards\\\" to ensure it no longer exists (expect a not-found error).\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"The DAO proposal status is `Executed`.\",\n      \"`neutrond query cron show-schedule daily_rewards` returns `schedule not found`.\"\n    ]\n  },\n  {\n    \"intent\": \"List all existing cron schedules\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"query_cron_list_schedules\",\n        \"description\": \"Execute `neutrond query cron list-schedules` (or the REST `/neutron/cron/schedules` endpoint) to retrieve the full schedule registry.\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"The command returns a JSON array of schedule objects with their names, periods, and next_execution heights.\"\n    ]\n  },\n  {\n    \"intent\": \"Show details for the cron schedule \\\"protocol_update\\\"\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"query_cron_show_schedule\",\n        \"description\": \"Run `neutrond query cron show-schedule protocol_update` to fetch the schedule's full metadata.\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"The returned object contains the fields name=\\\"protocol_update\\\", period, next_execution_height, execution_stage, and embedded Msgs.\"\n    ]\n  },\n  {\n    \"intent\": \"Update the Cron module limit parameter to 30 schedules per block\",\n    \"workflow\": [\n      {\n        \"step\": 1,\n        \"tool\": \"construct_msg_update_params\",\n        \"description\": \"Build a MsgUpdateParams with fields: authority=<DAO address>, params={\\\"schedules_per_block\\\":30}.\"\n      },\n      {\n        \"step\": 2,\n        \"tool\": \"wrap_in_dao_proposal\",\n        \"description\": \"Insert the MsgUpdateParams into a DAO proposal for network approval.\"\n      },\n      {\n        \"step\": 3,\n        \"tool\": \"sign_and_broadcast_tx\",\n        \"description\": \"Submit the proposal transaction via the Main DAO contract.\"\n      },\n      {\n        \"step\": 4,\n        \"tool\": \"monitor_proposal_status\",\n        \"description\": \"Track the proposal until it is executed, applying the new parameter.\"\n      },\n      {\n        \"step\": 5,\n        \"tool\": \"query_cron_params\",\n        \"description\": \"Query the Cron module parameters (`neutrond query cron params`) to confirm `schedules_per_block` is now 30.\"\n      }\n    ],\n    \"outcome_checks\": [\n      \"The DAO proposal status is `Executed`.\",\n      \"`schedules_per_block` in `neutrond query cron params` equals `30`.\"\n    ]\n  }\n]",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 2761,
                    "prompt_tokens": 35303,
                    "total_tokens": 38064,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 1536,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-CBR8qms6v2h5CJZ1Kuro1lushgjeK",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--0cf893b3-644a-46f8-85b7-f10e6858e936-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 35303,
                "output_tokens": 2761,
                "total_tokens": 38064,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 1536
                }
            }
        }
    ]
}