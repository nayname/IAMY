{
    "messages": [
        {
            "content": "Query All User Balances",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "da007592-f0a8-4648-8253-25552f2fd82f",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_R6cx8CRWnQdK8azONyaXNfZ8",
                        "function": {
                            "arguments": "{\"query\": \"query all balances\", \"section\": \"all\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 230,
                    "prompt_tokens": 266,
                    "total_tokens": 496,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 192,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CArXfXyPa4WRyyzTqMriNGnLFIg",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--fa0352d3-9822-43a6-957d-6d0cf42be982-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "query all balances",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_R6cx8CRWnQdK8azONyaXNfZ8",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 266,
                "output_tokens": 230,
                "total_tokens": 496,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 192
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"query all balances\":\n\n## 1. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 8: ## Key Advantages of SubQuery\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 2. How-to\n**File:** /root/neutron/docs/developers/modules/dex/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 46: - View current token balances on Neutron\n- Line 52: All DEX functionality is available through the `neutrond` command-line interface using positional arguments.\n- Line 190: ## Querying DEX State\n- Line 194: #### List All Pool Metadata\n- Line 197: neutrond query dex list-pool-metadata\n\n**Content Preview:**\n```\n- Transfer tokens from other chains to Neutron\n- View current token balances on Neutron\n- Withdraw tokens back to origin chains\n\n---\n\n\nAll DEX functionality is available through the `neutrond` command-line interface using positional arguments.\n\n\n---\n\n\n## Querying DEX State\n\n```\n\n---\n\n## 3. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Query cross-chain data and receive verification for on-chain use\"\n- Line 8: Interchain Queries allow developers to get verifiable data from other blockchains. This feature is essential for creating secure cross-chain applications. The module uses Merkle proofs and IBC clients to confirm the accuracy of the data retrieved directly from the storage of the target blockchain. It allows any smart contract to register Interchain Queries without needing any special module on the target blockchain.\n- Line 11: While the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n- Line 24: A smart contract can register an Interchain Query to regularly fetch data from a remote chain's state and process it in any way it needs. There are two types of Interchain Queries:\n- Line 26: - **Key-Value Query (KV Query)**: This type retrieves values from the Cosmos-SDK KV-storage on a remote chain, using a set of keys. It can be used to get account balances, governance proposals, staking information, smart contract states, or any other data stored in the remote chain's KV-storage. Learn more about how KV queries work [here](/developers/modules/interchain-queries/explanation#how-do-kv-interchain-queries-work).\n\n**Content Preview:**\n```\ntitle: \"Interchain Queries Module\"\ndescription: \"Query cross-chain data and receive verification for on-chain use\"\n---\n\n---\n\n\nInterchain Queries allow developers to get verifiable data from other blockchains. This feature is essential for creating secure cross-chain applications. The module uses Merkle proofs and IBC clients to confirm the accuracy of the data retrieved directly from the storage of the target blockchain. It allows any smart contract to register Interchain Queries without needing any special module on the target blockchain.\n\n\n---\n\n<Info>\nWhile the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n</Info>\n```\n\n---\n\n## 4. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 43: If you're looking to spin up your own archive node, our <a href=\"https://cosmos-snapshots.neutron.org/\" target=\"_blank\" className=\"text-primary hover:underline\">snapshot service</a> provides a convenient solution, enabling you to skip syncing from scratch. We also offer small pruned snapshots for quick server bootstrapping.\n- Line 56: For the most current information on the status of our RPCs and any scheduled maintenance, please visit our <a href=\"https://status.neutron.org/\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Status</a> page. This page provides real-time updates and alerts regarding the operational status of all Neutron services.\n- Line 62: ### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n- Line 72: 1. **General Cosmos SDK Query Gas Limit** (`query-gas-limit` in root of app.toml):\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\nIf you're looking to spin up your own archive node, our <a href=\"https://cosmos-snapshots.neutron.org/\" target=\"_blank\" className=\"text-primary hover:underline\">snapshot service</a> provides a convenient solution, enabling you to skip syncing from scratch. We also offer small pruned snapshots for quick server bootstrapping.\n\n\n---\n\n\nFor the most current information on the status of our RPCs and any scheduled maintenance, please visit our <a href=\"https://status.neutron.org/\" target=\"_blank\" className=\"text-primary hover:underline\">Neutron Status</a> page. This page provides real-time updates and alerts regarding the operational status of all Neutron services.\n\n```\n\n---\n\n## 5. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: **Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 25: - [Client](/developers/modules/admin/client) \u2014 query client details (no transaction commands available).\n- Line 42: 2. **Message-Based Proposals**: Modern proposal execution introduced with SDK 0.47+, allowing any valid `sdk.Msg` to be executed through governance. This approach provides greater flexibility using the versatile `sdk.Msg` format and requires modules to implement an `authority` field specifying permitted addresses.\n- Line 46: To maintain network security while enabling governance flexibility, the admin module implements a comprehensive whitelisting system. Only pre-approved message types and operations can be executed through the governance process, preventing potential security vulnerabilities while allowing legitimate administrative functions.\n- Line 50: The admin module is exclusively accessible through Neutron's Main DAO contract via WebAssembly bindings. This tight integration ensures that all network administration flows through the democratic governance process while maintaining the technical capability to execute complex administrative operations.\n\n**Content Preview:**\n```\n<Warning>\n**Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n  - [State](/developers/modules/admin/state) \u2014 state management details.\n  - [Client](/developers/modules/admin/client) \u2014 query client details (no transaction commands available).\n\n\n---\n\n\n2. **Message-Based Proposals**: Modern proposal execution introduced with SDK 0.47+, allowing any valid `sdk.Msg` to be executed through governance. This approach provides greater flexibility using the versatile `sdk.Msg` format and requires modules to implement an `authority` field specifying permitted addresses.\n\n```\n\n---\n\n## 6. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: **DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n- Line 21: ### MsgSubmitProposalLegacy\n- Line 44: ### QueryAdmins\n- Line 50: ### QueryParams\n- Line 56: ### QueryWhitelist\n\n**Content Preview:**\n```\n<Warning>\n**DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n</Warning>\n\n---\n\n\n### MsgSubmitProposalLegacy\nSubmit a proposal using legacy format for backward compatibility.\n\n---\n\n\n### QueryAdmins\nRetrieve the list of administrators.\n```\n\n---\n\n## 7. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: 3. **Handle All Message Types**: Implement handlers for all expected sudo message types\n- Line 37: To check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n- Line 42: neutrond query contractmanager failures [contract-address]\n- Line 61: You can query failures from within another contract using bindings:\n- Line 64: // Query failures from a CosmWasm contract\n\n**Content Preview:**\n```\n2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n3. **Handle All Message Types**: Implement handlers for all expected sudo message types\n4. **Prepare for Resubmission**: Design your contract to handle potential resubmission of messages\n\n---\n\n\nTo check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n\n\n---\n\n```bash\nneutrond query contractmanager failures [contract-address]\n```\n```\n\n---\n\n## 8. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 105: ## Query Methods\n- Line 113: neutrond query cron params\n- Line 127: neutrond query cron show-schedule [schedule-name]\n- Line 137: Returns all schedules with pagination support.\n- Line 141: neutrond query cron list-schedule\n\n**Content Preview:**\n```\n\n## Query Methods\n\n\n---\n\n```bash\nneutrond query cron params\n```\n\n---\n\n```bash\nneutrond query cron show-schedule [schedule-name]\n```\n```\n\n---\n\n## 9. DEX API\n**File:** /root/neutron/docs/developers/modules/dex/api.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"REST API endpoints for querying DEX module data\"\n- Line 6: The DEX module provides REST API endpoints for querying pool information, reserves, limit orders, and user positions. All endpoints use GET requests and return JSON responses.\n- Line 10: ### Query Pool by ID\n- Line 18: ### Query Pool by Parameters\n- Line 31: ### Query Pool Reserves\n\n**Content Preview:**\n```\ntitle: \"DEX API\"\ndescription: \"REST API endpoints for querying DEX module data\"\n---\n\n---\n\n\nThe DEX module provides REST API endpoints for querying pool information, reserves, limit orders, and user positions. All endpoints use GET requests and return JSON responses.\n\n\n---\n\n\n### Query Pool by ID\n\n```\n\n---\n\n## 10. Client\n**File:** /root/neutron/docs/developers/modules/dex/client.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 13: The `neutrond` command-line interface allows users to interact with the Dex module using **positional arguments**.\n- Line 117: - `GOOD_TIL_CANCELLED` - Remains active until manually cancelled\n- Line 245: neutrond query dex params\n- Line 263: neutrond query dex show-pool [pair-id] [tick-index] [fee] [flags]\n- Line 270: neutrond query dex show-pool 'untrn&lt;&gt;uatom' 0 3000\n\n**Content Preview:**\n```\n\nThe `neutrond` command-line interface allows users to interact with the Dex module using **positional arguments**.\n\n\n---\n\n- `order-type`: Order type (optional, defaults to `GOOD_TIL_CANCELLED`)\n  - `GOOD_TIL_CANCELLED` - Remains active until manually cancelled\n  - `FILL_OR_KILL` - Must fill completely or fail\n\n---\n\n```bash\nneutrond query dex params\n```\n```\n\n---\n\n## 11. Dynamic Fees Technical Details\n**File:** /root/neutron/docs/developers/modules/dynamicfees/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 53: Returns the list of all supported denominations beyond NTRN:\n- Line 126: 2. **Fee Market Query**: Fee market module queries Dynamic Fees for conversion\n- Line 165: - Fee market falls back to NTRN-only fees\n- Line 209: **Atomic Updates**: All price changes happen atomically through governance proposals\n- Line 226: - Acceptable for small asset lists (< 100 assets)\n\n**Content Preview:**\n```\n\nReturns the list of all supported denominations beyond NTRN:\n\n\n---\n\n1. **User Transaction**: User submits transaction with gas price in any supported asset\n2. **Fee Market Query**: Fee market module queries Dynamic Fees for conversion\n3. **Price Lookup**: Dynamic Fees looks up the asset price in NTRN registry\n\n---\n\n**Handling:**\n- Fee market falls back to NTRN-only fees\n- Transaction may fail if user only has unsupported assets\n```\n\n---\n\n## 12. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 17: **Governance-Only Access**: All parameter updates in the Dynamic Fees module require governance approval. Individual users cannot directly modify asset prices.\n- Line 127: ## Querying Module Information\n- Line 129: ### Query Current Parameters\n- Line 132: # Query current asset prices\n- Line 133: neutrond query dynamicfees params\n\n**Content Preview:**\n```\n<Warning>\n**Governance-Only Access**: All parameter updates in the Dynamic Fees module require governance approval. Individual users cannot directly modify asset prices.\n</Warning>\n\n---\n\n\n## Querying Module Information\n\n\n---\n\n\n### Query Current Parameters\n\n```\n\n---\n\n## 13. Explanation\n**File:** /root/neutron/docs/developers/modules/feeburner/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 28: 1. Identifies all non-NTRN tokens in the designated module account\n- Line 52: 2. Retrieves all token balances from this account\n- Line 69: For all other token denominations:\n- Line 75: If the Treasury address is invalid or not configured, the module will burn these tokens as a fallback measure to prevent accumulation.\n- Line 82: 2. **Total Burned Amount**: A running record of all NTRN tokens burned since genesis\n\n**Content Preview:**\n```\n\n1. Identifies all non-NTRN tokens in the designated module account\n2. Transfers these tokens to the Treasury address specified in the module parameters\n\n---\n\n1. The module accesses the designated module account\n2. Retrieves all token balances from this account\n3. Processes each token denomination according to the module's rules\n\n---\n\n\nFor all other token denominations:\n\n```\n\n---\n\n## 14. Reference\n**File:** /root/neutron/docs/developers/modules/feeburner/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The Fee Burner module automatically burns NTRN tokens and redirects non-NTRN fees to the treasury during fee processing.\n- Line 12: | `neutron_denom` | string | Denomination of Neutron tokens to burn (typically \"untrn\") |\n- Line 18: ### QueryParams\n- Line 24: ### QueryTotalBurnedNeutronsAmount\n- Line 43: - **Automatic Processing**: Fee burning happens automatically during block processing\n\n**Content Preview:**\n```\n\nThe Fee Burner module automatically burns NTRN tokens and redirects non-NTRN fees to the treasury during fee processing.\n\n\n---\n\n| --- | --- | --- |\n| `neutron_denom` | string | Denomination of Neutron tokens to burn (typically \"untrn\") |\n| `treasury_address` | string | Address to receive non-NTRN fees |\n\n---\n\n\n### QueryParams\nRetrieve the current module parameters.\n```\n\n---\n\n## 15. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 99: // Query the module parameters to get minimum required fees\n- Line 100: let params: QueryParamsResponse = deps.querier.query(\n- Line 101: &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n- Line 111: 2. You can only use denominations allowed in the minimum fee parameters\n- Line 118: As a relayer, you don't need to take any special actions to claim fees. The Fee Refunder module automatically:\n\n**Content Preview:**\n```\n```rust\n// Query the module parameters to get minimum required fees\nlet params: QueryParamsResponse = deps.querier.query(\n\n---\n\n// Query the module parameters to get minimum required fees\nlet params: QueryParamsResponse = deps.querier.query(\n    &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n\n---\n\nlet params: QueryParamsResponse = deps.querier.query(\n    &QueryRequest::Custom(NeutronQuery::FeerefunderParams {})\n)?;\n```\n\n---\n\n## 16. Reference\n**File:** /root/neutron/docs/developers/modules/feerefunder/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: ### QueryParams\n- Line 35: **CLI:** `neutrond query feerefunder params`\n- Line 41: ### QueryFeeInfo\n- Line 44: **CLI:** `neutrond query feerefunder fee-info [port_id] [channel_id] [sequence]`\n- Line 65: - **Automatic Distribution**: Fees are automatically distributed when packets are acknowledged or timeout\n\n**Content Preview:**\n```\n\n### QueryParams\nRetrieve the current module parameters.\n\n---\n\n\n**CLI:** `neutrond query feerefunder params`\n**REST:** `GET /neutron-org/neutron/feerefunder/params`\n\n---\n\n\n### QueryFeeInfo  \nRetrieve fee information for a specific IBC packet.\n```\n\n---\n\n## 17. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 63: To allow certain message types to bypass minimum fees:\n- Line 68: \"description\": \"Allow IBC transfers to bypass minimum fee requirements\",\n- Line 153: **Query Current Parameters:**\n- Line 158: const params = await client.queryContractSmart(\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n\n**Content Preview:**\n```\n\nTo allow certain message types to bypass minimum fees:\n\n\n---\n\n  \"title\": \"Add IBC Transfer to Fee Bypass\",\n  \"description\": \"Allow IBC transfers to bypass minimum fee requirements\",\n  \"changes\": [\n\n---\n\n\n**Query Current Parameters:**\n\n```\n\n---\n\n## 18. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 220: Since hook errors can potentially abort transactions or halt the chain, your contract must be designed to handle all possible inputs without errors:\n- Line 331: ## Querying Hook Subscriptions\n- Line 333: You can query to see which contracts are subscribed to specific hook types.\n- Line 338: neutrond query harpoon subscribed-contracts HOOK_TYPE_BEFORE_DELEGATION_CREATED\n- Line 343: From another contract, you can query the Harpoon module to check subscriptions:\n\n**Content Preview:**\n```\n\nSince hook errors can potentially abort transactions or halt the chain, your contract must be designed to handle all possible inputs without errors:\n\n\n---\n\n\n## Querying Hook Subscriptions\n\n\n---\n\n\nYou can query to see which contracts are subscribed to specific hook types.\n\n```\n\n---\n\n## 19. Harpoon Module\n**File:** /root/neutron/docs/developers/modules/harpoon/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks. Its primary purpose is to enable the calculation of historical voting power from the staking module, which is essential for governance systems that rely on historical data at specific block heights.\n- Line 19: The Harpoon module acts as a bridge between the staking module's hooks and CosmWasm smart contracts. When staking-related events occur (such as delegations, unbondings, or validator changes), the module notifies subscribed contracts via `sudo` calls, allowing them to maintain historical records.\n- Line 23: Standard CosmWasm contracts cannot directly query historical staking data. While contracts can query current staking information, they cannot access data from previous block heights. This limitation is particularly problematic for governance systems that need to determine voting power at the time a proposal was created.\n- Line 25: Harpoon solves this by allowing contracts to subscribe to staking events and maintain their own historical records, enabling accurate historical voting power calculations.\n- Line 33: Harpoon supports all the hooks provided by the Cosmos SDK staking module:\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks. Its primary purpose is to enable the calculation of historical voting power from the staking module, which is essential for governance systems that rely on historical data at specific block heights.\n\n\n---\n\n\nThe Harpoon module acts as a bridge between the staking module's hooks and CosmWasm smart contracts. When staking-related events occur (such as delegations, unbondings, or validator changes), the module notifies subscribed contracts via `sudo` calls, allowing them to maintain historical records.\n\n\n---\n\n\nStandard CosmWasm contracts cannot directly query historical staking data. While contracts can query current staking information, they cannot access data from previous block heights. This limitation is particularly problematic for governance systems that need to determine voting power at the time a proposal was created.\n\n```\n\n---\n\n## 20. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 53: - Passing an empty `hooks` array removes all subscriptions for the contract\n- Line 62: service Query {\n- Line 64: rpc SubscribedContracts(QuerySubscribedContractsRequest) returns (QuerySubscribedContractsResponse) {\n- Line 69: message QuerySubscribedContractsRequest {\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n- Removes the contract from hook types not in the list\n- Passing an empty `hooks` array removes all subscriptions for the contract\n\n\n---\n\n```protobuf\nservice Query {\n  // Retrieves contracts subscribed to a specific hook type.\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "5d09c996-9ad8-4618-8876-1ffdb2c0e599",
            "tool_call_id": "call_R6cx8CRWnQdK8azONyaXNfZ8",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "{\n  \"View current token balances on Neutron via neutrond CLI\":\"100\",\n  \"Fetch all token balances for an address through REST API\":\"95\",\n  \"Retrieve cross-chain account balances with Interchain Queries\":\"90\",\n  \"List DEX pool reserve balances to estimate user share\":\"85\",\n  \"Check Fee Burner & Treasury module account balances\":\"80\",\n  \"Monitor account balance changes over time using SubQuery\":\"75\",\n  \"Batch-query balances for multiple addresses in one call\":\"70\",\n  \"Get list of all supported fee denominations (Dynamic Fees)\":\"65\",\n  \"Query minimum-fee asset balances from the Fee Refunder module\":\"60\",\n  \"Retrieve historical balances at a past block height via Harpoon\":\"55\",\n  \"Export all user balances to CSV via REST endpoint\":\"50\",\n  \"Verify module account balances through gRPC queries\":\"45\"\n}",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 1096,
                    "prompt_tokens": 6745,
                    "total_tokens": 7841,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 896,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CAxVNtV6oiVDhvCHrrpUwqtT3j2",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--30732a06-0b8d-49d8-a8d6-731d33aa08cf-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 6745,
                "output_tokens": 1096,
                "total_tokens": 7841,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 896
                }
            }
        }
    ]
}