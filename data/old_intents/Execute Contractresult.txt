{
    "messages": [
        {
            "content": "Execute Contract",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "487cc68b-9dc2-42b6-941e-b5be9b47a17b",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_PXBVn5DNs8jTSjlPMMAG0XdB",
                        "function": {
                            "arguments": "{\"query\":\"Execute Contract\", \"section\":\"all\", \"max_results\":20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 162,
                    "prompt_tokens": 266,
                    "total_tokens": 428,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 128,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CHvdxZfKHMNaxMGIFlU8oDxAR0s",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--f107beed-3f11-4874-b414-1dfe46b3265a-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "Execute Contract",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_PXBVn5DNs8jTSjlPMMAG0XdB",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 266,
                "output_tokens": 162,
                "total_tokens": 428,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 128
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"Execute Contract\":\n\n## 1. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 17: Test individual contract functions in isolation\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 2. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 10: A simple counter contract that:\n- Line 19: - [Docker](https://docs.docker.com/get-docker/) for contract optimization\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 3. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Part 2: Modules & Contracts\"\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 11: - Inter-contract communication patterns\n- Line 17: - Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n\n**Content Preview:**\n```\n---\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n\n---\n\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n```\n\n---\n\n## 4. Bridge Contracts\n**File:** /root/neutron/docs/resources/contracts/bridge.mdx\n**Section:** resources\n**Relevance Score:** 17\n\n**Matching lines:**\n- Line 2: title: \"Bridge Contracts\"\n- Line 3: description: \"Information about Neutron's cross-chain bridge contracts\"\n- Line 7: This page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n- Line 11: | Contract | Address | Code ID |\n- Line 18: | Contract | Address |\n\n**Content Preview:**\n```\n---\ntitle: \"Bridge Contracts\"\ndescription: \"Information about Neutron's cross-chain bridge contracts\"\n\n---\n\ntitle: \"Bridge Contracts\"\ndescription: \"Information about Neutron's cross-chain bridge contracts\"\nicon: \"bridge\"\n\n---\n\n\nThis page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n\n```\n\n---\n\n## 5. Neutron DAO Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-dao.mdx\n**Section:** resources\n**Relevance Score:** 17\n\n**Matching lines:**\n- Line 2: title: \"Neutron DAO Contracts\"\n- Line 3: description: \"Addresses and information for Neutron DAO smart contracts\"\n- Line 7: This page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n- Line 76: To interact with the DAO, you can use the [Neutron DAO UI](https://dao.neutron.org/) or interact directly with the contracts using the `neutrond` CLI.\n- Line 82: neutrond query wasm contract-state smart neutron1suhgf5svhu4usrurvxzlgn54ksxmn8gljarjtxqnapv8kjnp4nrstdxvff '{\"config\":{}}'\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\n\n---\n\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\nicon: \"building-columns\"\n\n---\n\n\nThis page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n\n```\n\n---\n\n## 6. Neutron TGE Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-tge.mdx\n**Section:** resources\n**Relevance Score:** 17\n\n**Matching lines:**\n- Line 2: title: \"Neutron TGE Contracts\"\n- Line 3: description: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n- Line 7: This page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n- Line 13: | Airdrop | `neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56` | [cw20-merkle-airdrop](https://github.com/neutron-org/neutron-tge-contracts) | 196 |\n- Line 14: | Distribution | `neutron1dk9c86h7gmvuaq89cv72cjhq4c97r2wgl5gyfruv6shquwspalgq5u7sy5` | [distribution](https://github.com/neutron-org/neutron-tge-contracts) | 9 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n\n---\n\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\nicon: \"rocket-launch\"\n\n---\n\n\nThis page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n\n```\n\n---\n\n## 7. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 17\n\n**Matching lines:**\n- Line 2: title: \"Neutron Vesting Contracts\"\n- Line 3: description: \"Information about Neutron's token vesting smart contracts\"\n- Line 7: This page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n- Line 13: | Neutron Vesting Investors [no voting power] | `neutron14q5elxj4ghktt7d7d0uw0cs0gqyeay25h5fkree897gjm38gevxqmvqsq5` | [vesting-investors](https://github.com/neutron-org/neutron-tge-contracts) | 28 |\n- Line 14: | Neutron Vesting Investors | `neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9` | [vesting-investors](https://github.com/neutron-org/neutron-tge-contracts) | 28 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\n\n---\n\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\nicon: \"clock\"\n\n---\n\n\nThis page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n\n```\n\n---\n\n## 8. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 62: ### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n- Line 70: This indicates that smart contract queries are hitting the gas limit. There are **two different** gas limit configurations that are often confused:\n- Line 101: This is particularly important for applications making complex or paginated smart contract queries. If you're using a public RPC endpoint, you'll need to either optimize your queries to use less gas or find an RPC provider with higher gas limits.\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\n### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n\n\n---\n\n\nThis indicates that smart contract queries are hitting the gas limit. There are **two different** gas limit configurations that are often confused:\n\n```\n\n---\n\n## 9. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: **Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 25: The authority management system defines which addresses have permission to execute specific types of administrative operations. This system ensures that only authorized entities (typically the DAO) can perform critical network functions.\n- Line 41: - Custom WASM proposals for smart contract operations\n- Line 43: 2. **Handler System**: Legacy proposals are processed through dedicated handlers that understand the specific proposal format and execute the appropriate state changes.\n- Line 51: 1. **Universal Message Support**: Any valid `sdk.Msg` can be executed through governance, providing unlimited flexibility for administrative operations.\n\n**Content Preview:**\n```\n<Warning>\n**Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n#### Authority Management\nThe authority management system defines which addresses have permission to execute specific types of administrative operations. This system ensures that only authorized entities (typically the DAO) can perform critical network functions.\n\n\n---\n\n   - `TextProposal`: Governance signaling proposals\n   - Custom WASM proposals for smart contract operations\n\n```\n\n---\n\n## 10. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: This guide explains how the admin module works within Neutron's governance system. Unlike other modules that users can interact with directly, the admin module is exclusively accessible by the **Main DAO contract**.\n- Line 9: The admin module cannot be used directly by individual users or external contracts. All interactions must go through Neutron's DAO governance process.\n- Line 16: - **Only the Main DAO contract** can send messages to the admin module\n- Line 25: When the Neutron community wants to execute administrative operations:\n- Line 29: 3. **Proposal Execution**: If approved, the Main DAO contract sends messages to the admin module\n\n**Content Preview:**\n```\n\nThis guide explains how the admin module works within Neutron's governance system. Unlike other modules that users can interact with directly, the admin module is exclusively accessible by the **Main DAO contract**.\n\n\n---\n\n<Warning>\nThe admin module cannot be used directly by individual users or external contracts. All interactions must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\n- **Only the Main DAO contract** can send messages to the admin module\n- Messages are sent using WebAssembly bindings from the Main DAO\n```\n\n---\n\n## 11. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n- Line 9: **Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 29: The admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n- Line 32: - **Smart Contract Management**: Executing WebAssembly (WASM) proposals for contract instantiation, migration, and administration\n- Line 40: 1. **Legacy Proposals**: Traditional governance proposals rooted in the Cosmos SDK's `x/gov` module, supporting predefined proposals like `MigrateContract`, `InstantiateContract`, and parameter changes. These proposals are processed through dedicated handlers and remain supported for backward compatibility with modules like IBC that haven't fully transitioned to SDK 0.47 patterns.\n\n**Content Preview:**\n```\n\nThe admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n\n\n---\n\n<Warning>\n**Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n\n```\n\n---\n\n## 12. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 20: **Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n- Line 52: - Executes the messages using the WASM message server\n- Line 53: - Updates the schedule's `last_execute_height` to the current block height\n\n**Content Preview:**\n```\n<Warning>\n**Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n</Warning>\n\n---\n\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n3. For each schedule that meets the execution condition:\n   - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n   - Sets the sender as the Cron module account\n```\n\n---\n\n## 13. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 22: - **Scheduled Block Executions**: Register messages to be executed at specific block intervals\n- Line 29: - Contracts cannot directly create schedules\n- Line 39: - The module has a limit on how many schedules can be executed per block\n\n**Content Preview:**\n```\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n\n---\n\n\n- **Scheduled Block Executions**: Register messages to be executed at specific block intervals\n- **Periodic Tasks**: Set up recurring executions every N blocks\n```\n\n---\n\n## 14. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 19: repeated MsgExecuteContract msgs = 4;      // Messages to execute\n- Line 56: repeated MsgExecuteContract msgs = 3;      // Messages to execute when triggered\n- Line 57: uint64 last_execute_height = 4;           // Last block height when executed\n- Line 62: ### MsgExecuteContract\n- Line 64: Defines the contract and the message to execute:\n\n**Content Preview:**\n```\n  uint64 period = 3;                         // Number of blocks between executions\n  repeated MsgExecuteContract msgs = 4;      // Messages to execute\n  ExecutionStage execution_stage = 5;        // Execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n  uint64 period = 2;                         // Number of blocks between executions\n  repeated MsgExecuteContract msgs = 3;      // Messages to execute when triggered\n  uint64 last_execute_height = 4;           // Last block height when executed\n\n---\n\n  repeated MsgExecuteContract msgs = 3;      // Messages to execute when triggered\n  uint64 last_execute_height = 4;           // Last block height when executed\n  ExecutionStage execution_stage = 5;        // Execution stage\n```\n\n---\n\n## 15. How-to\n**File:** /root/neutron/docs/developers/modules/gmp/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 24: \"action\": \"execute_contract\",\n- Line 25: \"contract_address\": \"neutron1...\",\n- Line 40: \"action\": \"execute_contract\",\n- Line 41: \"contract_address\": \"neutron1...\",\n- Line 166: \"action\": \"execute_contract\",\n\n**Content Preview:**\n```\n{\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n\n---\n\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n  \"msg\": {\n\n---\n\nconst payload = JSON.stringify({\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n```\n\n---\n\n## 16. Explanation\n**File:** /root/neutron/docs/developers/modules/harpoon/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: This document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n- Line 12: The Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n- Line 26: This setup ensures that whenever the staking module executes a hook, both the slashing module and the Harpoon module receive the notification.\n- Line 63: ### Contract Subscription Storage\n- Line 65: The module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n\n**Content Preview:**\n```\n\nThis document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n\n\n---\n\n\nThe Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n\n\n---\n\n\nThis setup ensures that whenever the staking module executes a hook, both the slashing module and the Harpoon module receive the notification.\n\n```\n\n---\n\n## 17. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 14: Manages hook subscriptions for a contract address. Can only be executed by the module's authority (governance).\n- Line 20: // Updates hook subscriptions for a specific contract address.\n- Line 22: // Can only be executed by the module's authority.\n- Line 40: // Contract address to update subscriptions for\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n\nManages hook subscriptions for a contract address. Can only be executed by the module's authority (governance).\n\n\n---\n\n\n  // Updates hook subscriptions for a specific contract address.\n  // To remove a subscription, pass an empty array to `hook_subscription.hooks`.\n```\n\n---\n\n## 18. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 88: Imagine you need your Interchain Query-based smart contract to track undelegations made by `cosmos17s3uhcvrwrsp2ldjvxp8rseyc3ulpchdry87hp` on CosmosHub.\n- Line 143: This guide provides a brief guide to registering a KV Interchain Query and handling its results using the [neutron-std](https://docs.rs/neutron-std/4.2.2-rc/neutron_std) and [neutron-sdk](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk) libraries in a smart contract.\n- Line 153: Create an `execute` message handler in your contract to register the Interchain Query using the helper function as a [submessage](https://docs.cosmwasm.com/docs/smart-contracts/message/submessage/).\n- Line 162: pub fn execute(\n- Line 166: msg: ExecuteMsg,\n\n**Content Preview:**\n```\n\nImagine you need your Interchain Query-based smart contract to track undelegations made by `cosmos17s3uhcvrwrsp2ldjvxp8rseyc3ulpchdry87hp` on CosmosHub.\n\n\n---\n\n\nThis guide provides a brief guide to registering a KV Interchain Query and handling its results using the [neutron-std](https://docs.rs/neutron-std/4.2.2-rc/neutron_std) and [neutron-sdk](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk) libraries in a smart contract.\n\n\n---\n\n\nCreate an `execute` message handler in your contract to register the Interchain Query using the helper function as a [submessage](https://docs.cosmwasm.com/docs/smart-contracts/message/submessage/).\n\n```\n\n---\n\n## 19. Reference\n**File:** /root/neutron/docs/developers/modules/interchain-queries/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: Registers a new Interchain Query in the `interchainqueries` module. This message should only be issued by a smart contract. The calling contract is automatically charged a query registration deposit. The deposit is refunded when the query is removed.\n- Line 108: Removes an Interchain Query and refunds the deposit. Can only be executed by the query owner during the submit timeout, or by anyone after the timeout expires.\n- Line 122: Updates the parameters of a registered Interchain Query. Can only be executed by the query owner.\n- Line 139: Updates the module parameters. Can only be executed by the module authority.\n- Line 353: **Note:** TX query results are not stored in state; they are passed directly to smart contracts via sudo callbacks.\n\n**Content Preview:**\n```\n\nRegisters a new Interchain Query in the `interchainqueries` module. This message should only be issued by a smart contract. The calling contract is automatically charged a query registration deposit. The deposit is refunded when the query is removed.\n\n\n---\n\n\nRemoves an Interchain Query and refunds the deposit. Can only be executed by the query owner during the submit timeout, or by anyone after the timeout expires.\n\n\n---\n\n\nUpdates the parameters of a registered Interchain Query. Can only be executed by the query owner.\n\n```\n\n---\n\n## 20. ICTX Explanation\n**File:** /root/neutron/docs/developers/modules/interchaintxs/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: The Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n- Line 9: The module operates on the principles of the IBC protocol and the Interchain Accounts (ICA) specification, with custom extensions to make these capabilities available to smart contracts.\n- Line 13: A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n- Line 16: B -->|Execute Tx| C\n- Line 25: When a contract wants to interact with a remote chain, it must first register an interchain account. This process involves:\n\n**Content Preview:**\n```\n\nThe Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n\n\n---\n\n\nThe module operates on the principles of the IBC protocol and the Interchain Accounts (ICA) specification, with custom extensions to make these capabilities available to smart contracts.\n\n\n---\n\ngraph TB\n    A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n    A -->|MsgSubmitTx| B\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "2398bf45-14f5-437c-800e-ddc3e93f1df9",
            "tool_call_id": "call_PXBVn5DNs8jTSjlPMMAG0XdB",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "{\n  \"Execute smart contract message via neutrond CLI\":\"100\",\n  \"Schedule automatic contract execution using Cron module\":\"98\",\n  \"Execute contract on remote chain with Interchain Transactions\":\"96\",\n  \"Submit DAO proposal to execute contract messages\":\"94\",\n  \"Trigger execute_contract action through General Message Passing\":\"92\",\n  \"Call execute function from dApp using CosmJS\":\"90\",\n  \"Batch multiple execute messages in a single transaction\":\"88\",\n  \"Simulate contract execution for gas estimation\":\"86\",\n  \"Troubleshoot out-of-gas errors during contract execution\":\"84\",\n  \"Retrieve transaction hash and logs after contract execution\":\"82\",\n  \"Execute CW20 token transfer via contract\":\"80\",\n  \"Migrate contract code via governance WASM proposal\":\"78\",\n  \"Execute contract to update configuration parameters\":\"76\",\n  \"Execute contract to claim Merkle airdrop\":\"74\",\n  \"Execute contract to register an Interchain Query\":\"72\",\n  \"Execute contract to register an Interchain Account\":\"70\",\n  \"Execute contract to submit an interchain transaction\":\"68\",\n  \"Execute contract to subscribe to staking hooks (Harpoon)\":\"66\",\n  \"Execute contract to create a new Cron schedule\":\"64\",\n  \"Execute contract via Celatone Explorer UI\":\"62\",\n  \"Execute contract via Keplr wallet\":\"60\",\n  \"Execute contract through WalletConnect provider\":\"58\",\n  \"Execute contract using Python SDK (Cosmpy)\":\"56\",\n  \"Execute contract in Rust integration tests with cw-multi-test\":\"54\",\n  \"Execute contract and parse JSON response\":\"52\",\n  \"Execute contract with attached funds\":\"50\",\n  \"Execute contract containing submessages\":\"48\",\n  \"Execute contract with reply handling\":\"46\",\n  \"Execute contract using Authz delegation\":\"44\",\n  \"Execute contract from a multisig account\":\"42\",\n  \"Execute contract using Ledger hardware wallet\":\"40\",\n  \"Execute contract with neutrond multisign mode\":\"38\",\n  \"Execute contract to delegate tokens cross-chain\":\"36\",\n  \"Execute contract to mint CW20 tokens\":\"34\",\n  \"Execute contract to burn CW20 tokens\":\"32\",\n  \"Execute contract to create a DAO proposal\":\"30\",\n  \"Execute contract to cast a DAO vote\":\"28\",\n  \"Execute contract to withdraw staking rewards\":\"26\",\n  \"Execute contract to swap tokens via DEX\":\"24\",\n  \"Execute contract to provide liquidity to a pool\":\"22\",\n  \"Execute contract to withdraw liquidity from a pool\":\"20\",\n  \"Execute contract to set contract-level admin\":\"18\",\n  \"Execute contract to freeze token transfers\":\"16\",\n  \"Execute contract to unfreeze token transfers\":\"14\",\n  \"Execute contract to pause protocol operations\":\"12\",\n  \"Execute contract to unpause protocol operations\":\"10\",\n  \"Execute contract to emit custom events\":\"8\",\n  \"Execute contract with deterministic address instantiation\":\"6\",\n  \"Execute contract as part of a governance batch transaction\":\"4\"\n}",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 2683,
                    "prompt_tokens": 7426,
                    "total_tokens": 10109,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 2048,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CHzfpisfq8LBWXZDce68L6dmlkt",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--0c487535-ec53-4426-8a1e-7e2a7cf70620-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 7426,
                "output_tokens": 2683,
                "total_tokens": 10109,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 2048
                }
            }
        }
    ]
}