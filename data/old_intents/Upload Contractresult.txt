{
    "messages": [
        {
            "content": "Upload Contract",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "c78d98a4-4d87-4b40-8bca-fa22d5def19a",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_W8exIdqhIUQgt2UZ6wPHFJQr",
                        "function": {
                            "arguments": "{\"query\":\"Upload Contract Neutron Cosmwasm\", \"section\":\"all\", \"max_results\":20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 487,
                    "prompt_tokens": 267,
                    "total_tokens": 754,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 448,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CEzlyUUGRSRbCKgJGlnJtNPgH9O",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--0594b4af-4566-496e-b7e8-cfe4ee214a5e-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "Upload Contract Neutron Cosmwasm",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_W8exIdqhIUQgt2UZ6wPHFJQr",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 267,
                "output_tokens": 487,
                "total_tokens": 754,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 448
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"Upload Contract Neutron Cosmwasm\":\n\n## 1. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"NeutronTemplate\"\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 7: NeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n- Line 10: <strong>Live Demo:</strong> <a href=\"https://neutrontemplate.deploydon.com\" target=\"_blank\" className=\"text-primary hover:underline\">https://NeutronTemplate.Deploydon.com</a>\n- Line 40: <Card title=\"Smart Contract\" icon=\"file-contract\" iconType=\"duotone\">\n\n**Content Preview:**\n```\n---\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n\n---\n\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n\nNeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n\n```\n\n---\n\n## 2. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n- Line 10: Interchain Accounts are a powerful IBC feature that allows a smart contract on Neutron to control accounts on other IBC-connected chains. This enables a wide range of cross-chain applications, from managing assets across chains to controlling governance on remote chains.\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n\n```\n\n---\n\n## 3. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n- Line 10: Interchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n- Line 16: 3. Build a simple contract that reacts to state changes on another chain\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n\n```\n\n---\n\n## 4. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 3: description: \"A gentle introduction to smart contract development on Neutron\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 8: ## What is a Smart Contract?\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n---\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n```\n\n---\n\n## 5. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 10: A simple counter contract that:\n- Line 19: - [Docker](https://docs.docker.com/get-docker/) for contract optimization\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 6. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Neutron Modules\"\n- Line 5: Neutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n- Line 9: These modules are designed for direct integration with your smart contracts and DeFi applications:\n- Line 21: Schedule automated contract executions\n- Line 28: <Card title=\"Contract Manager\" icon=\"shield\" href=\"/developers/modules/contractmanager/overview\">\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Modules\"\n---\n\n---\n\n\nNeutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n\n\n---\n\n\nThese modules are designed for direct integration with your smart contracts and DeFi applications:\n\n```\n\n---\n\n## 7. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 17: Test individual contract functions in isolation\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 8. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Part 2: Modules & Contracts\"\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 11: - Inter-contract communication patterns\n\n**Content Preview:**\n```\n---\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n\n---\n\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n```\n\n---\n\n## 9. Bridge Contracts\n**File:** /root/neutron/docs/resources/contracts/bridge.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"Bridge Contracts\"\n- Line 3: description: \"Information about Neutron's cross-chain bridge contracts\"\n- Line 7: This page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n- Line 9: ## Mainnet (neutron-1)\n- Line 11: | Contract | Address | Code ID |\n\n**Content Preview:**\n```\n---\ntitle: \"Bridge Contracts\"\ndescription: \"Information about Neutron's cross-chain bridge contracts\"\n\n---\n\ntitle: \"Bridge Contracts\"\ndescription: \"Information about Neutron's cross-chain bridge contracts\"\nicon: \"bridge\"\n\n---\n\n\nThis page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n\n```\n\n---\n\n## 10. Neutron DAO Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-dao.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"Neutron DAO Contracts\"\n- Line 3: description: \"Addresses and information for Neutron DAO smart contracts\"\n- Line 7: This page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n- Line 9: ## Mainnet (neutron-1)\n- Line 13: | Neutron DAO Core | `neutron1suhgf5svhu4usrurvxzlgn54ksxmn8gljarjtxqnapv8kjnp4nrstdxvff` | [cwd-core](https://github.com/neutron-org/neutron-dao) | 325 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\n\n---\n\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\nicon: \"building-columns\"\n\n---\n\n\nThis page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n\n```\n\n---\n\n## 11. Neutron TGE Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-tge.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"Neutron TGE Contracts\"\n- Line 3: description: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n- Line 7: This page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n- Line 9: ## Mainnet (neutron-1)\n- Line 13: | Airdrop | `neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56` | [cw20-merkle-airdrop](https://github.com/neutron-org/neutron-tge-contracts) | 196 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n\n---\n\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\nicon: \"rocket-launch\"\n\n---\n\n\nThis page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n\n```\n\n---\n\n## 12. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"Neutron Vesting Contracts\"\n- Line 3: description: \"Information about Neutron's token vesting smart contracts\"\n- Line 7: This page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n- Line 9: ## Mainnet (neutron-1)\n- Line 13: | Neutron Vesting Investors [no voting power] | `neutron14q5elxj4ghktt7d7d0uw0cs0gqyeay25h5fkree897gjm38gevxqmvqsq5` | [vesting-investors](https://github.com/neutron-org/neutron-tge-contracts) | 28 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\n\n---\n\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\nicon: \"clock\"\n\n---\n\n\nThis page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n\n```\n\n---\n\n## 13. DeFi on Neutron\n**File:** /root/neutron/docs/defi/overview.mdx\n**Section:** defi\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"DeFi on Neutron\"\n- Line 3: description: \"Neutron's integrated financial infrastructure powers capital-efficient DeFi products\"\n- Line 7: Neutron is purpose-built for next-generation decentralized finance, offering integrated infrastructure that enables unprecedented capital efficiency, low latency, and seamless composability across a thriving ecosystem of applications.\n- Line 19: The Cron module enables scheduled, conditional, and gasless contract execution without relying on external keepers or bots, ensuring reliable automation.\n- Line 42: Neutron's architectural advantage comes from how its core modules work together to create a unified DeFi experience:\n\n**Content Preview:**\n```\n---\ntitle: \"DeFi on Neutron\"\ndescription: \"Neutron's integrated financial infrastructure powers capital-efficient DeFi products\"\n\n---\n\ntitle: \"DeFi on Neutron\"\ndescription: \"Neutron's integrated financial infrastructure powers capital-efficient DeFi products\"\nicon: \"chart-line\"\n\n---\n\n\nNeutron is purpose-built for next-generation decentralized finance, offering integrated infrastructure that enables unprecedented capital efficiency, low latency, and seamless composability across a thriving ecosystem of applications.\n\n```\n\n---\n\n## 14. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n- Line 23: ## Getting Started with SubQuery for Neutron\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 15. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Contract Manager module, including handling failures and resubmitting failed operations.\n- Line 7: ## Handling IBC Acknowledgments in Smart Contracts\n- Line 9: When developing contracts that use IBC functionality on Neutron, you need to properly handle acknowledgments:\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 14: pub fn sudo(deps: DepsMut, env: Env, msg: SudoMsg) -> Result<Response, ContractError> {\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Contract Manager module, including handling failures and resubmitting failed operations.\n\n\n---\n\n\n## Handling IBC Acknowledgments in Smart Contracts\n\n\n---\n\n\nWhen developing contracts that use IBC functionality on Neutron, you need to properly handle acknowledgments:\n\n```\n\n---\n\n## 16. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 20: **Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 39: The module hooks into Neutron's block production process to check for schedules due for execution:\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n- Line 65: repeated MsgExecuteContract msgs = 3;      // Messages to execute\n\n**Content Preview:**\n```\n<Warning>\n**Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n</Warning>\n\n---\n\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n\nThe module hooks into Neutron's block production process to check for schedules due for execution:\n\n```\n\n---\n\n## 17. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 10: - Understanding of Neutron governance processes\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 19: - Individual users and contracts cannot directly interact with this module\n- Line 29: Neutron uses a [modular governance system](/concepts/modular-governance) with specialized subDAOs that handle different aspects of network management. The Security SubDAO can remove schedules in emergency situations, providing a safety mechanism for the network.\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n\n---\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n```\n\n---\n\n## 18. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n- Line 7: ## For Smart Contract Developers\n- Line 14: // Example in CosmWasm\n- Line 17: use neutron_sdk::bindings::msg::NeutronMsg;\n- Line 18: use neutron_sdk::bindings::types::{Fee as IbcFee, Coin};\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n\n\n---\n\n\n## For Smart Contract Developers\n\n\n---\n\n```rust\n// Example in CosmWasm\n\n```\n\n---\n\n## 19. Explanation\n**File:** /root/neutron/docs/developers/modules/harpoon/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: This document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n- Line 12: The Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n- Line 52: panic(\"BeforeValidatorSlashed shouldn't ever be called for neutron harpoon hooks since it has BeforeValidatorSlashedWithTokensToBurn hook\")\n- Line 63: ### Contract Subscription Storage\n- Line 65: The module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n\n**Content Preview:**\n```\n\nThis document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n\n\n---\n\n\nThe Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n\n\n---\n\nfunc (h Hooks) BeforeValidatorSlashed(_ context.Context, _ sdk.ValAddress, _ sdkmath.LegacyDec) error {\n    panic(\"BeforeValidatorSlashed shouldn't ever be called for neutron harpoon hooks since it has BeforeValidatorSlashedWithTokensToBurn hook\")\n}\n```\n\n---\n\n## 20. How-to\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 7: ## Configuring the Rate Limit Contract\n- Line 9: The IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n- Line 13: To check the current contract address parameter:\n- Line 16: neutron query rate-limited-ibc params\n- Line 23: \"contract_address\": \"neutron1abcdef...\"\n\n**Content Preview:**\n```\n\n## Configuring the Rate Limit Contract\n\n\n---\n\n\nThe IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n\n\n---\n\n\nTo check the current contract address parameter:\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "c7134ccc-5975-4cac-9536-09131c84631c",
            "tool_call_id": "call_W8exIdqhIUQgt2UZ6wPHFJQr",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_Y0gpb6qbQzOHUpvjPKuODmlB",
                        "function": {
                            "arguments": "{\"query\":\"UploadCodeProposal Contract Manager Neutron\", \"section\":\"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 360,
                    "prompt_tokens": 6796,
                    "total_tokens": 7156,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 320,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CF70XmYSgqYTupy6Gvw4heVJj6X",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--181dc24f-e407-41d9-bf3e-d0b7cf91dbb3-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "UploadCodeProposal Contract Manager Neutron",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_Y0gpb6qbQzOHUpvjPKuODmlB",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 6796,
                "output_tokens": 360,
                "total_tokens": 7156,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 320
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"UploadCodeProposal Contract Manager Neutron\":\n\n## 1. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Neutron Modules\"\n- Line 5: Neutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n- Line 9: These modules are designed for direct integration with your smart contracts and DeFi applications:\n- Line 21: Schedule automated contract executions\n- Line 28: <Card title=\"Contract Manager\" icon=\"shield\" href=\"/developers/modules/contractmanager/overview\">\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Modules\"\n---\n\n---\n\n\nNeutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n\n\n---\n\n\nThese modules are designed for direct integration with your smart contracts and DeFi applications:\n\n```\n\n---\n\n## 2. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"NeutronTemplate\"\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 7: NeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n- Line 10: <strong>Live Demo:</strong> <a href=\"https://neutrontemplate.deploydon.com\" target=\"_blank\" className=\"text-primary hover:underline\">https://NeutronTemplate.Deploydon.com</a>\n- Line 40: <Card title=\"Smart Contract\" icon=\"file-contract\" iconType=\"duotone\">\n\n**Content Preview:**\n```\n---\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n\n---\n\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n\nNeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n\n```\n\n---\n\n## 3. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 10: A simple counter contract that:\n- Line 19: - [Docker](https://docs.docker.com/get-docker/) for contract optimization\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 4. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Part 2: Modules & Contracts\"\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 11: - Inter-contract communication patterns\n\n**Content Preview:**\n```\n---\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n\n---\n\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n```\n\n---\n\n## 5. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n- Line 23: ## Getting Started with SubQuery for Neutron\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 6. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 17: Test individual contract functions in isolation\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 7. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Contract Manager module, including handling failures and resubmitting failed operations.\n- Line 7: ## Handling IBC Acknowledgments in Smart Contracts\n- Line 9: When developing contracts that use IBC functionality on Neutron, you need to properly handle acknowledgments:\n- Line 14: pub fn sudo(deps: DepsMut, env: Env, msg: SudoMsg) -> Result<Response, ContractError> {\n- Line 20: // Return success - failures will be captured by Contract Manager\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Contract Manager module, including handling failures and resubmitting failed operations.\n\n\n---\n\n\n## Handling IBC Acknowledgments in Smart Contracts\n\n\n---\n\n\nWhen developing contracts that use IBC functionality on Neutron, you need to properly handle acknowledgments:\n\n```\n\n---\n\n## 8. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: **Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 14: The admin module serves as the central governance hub for the Neutron network, designed to handle administrative operations through a secure, controlled framework. The module architecture consists of several key components working together to ensure safe and effective network governance.\n- Line 41: - Custom WASM proposals for smart contract operations\n- Line 61: 1. **Submission**: Proposals are submitted through the DAO's governance contracts or directly via the admin module's message interface.\n- Line 104: ## Integration with Neutron DAO\n\n**Content Preview:**\n```\n<Warning>\n**Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module serves as the central governance hub for the Neutron network, designed to handle administrative operations through a secure, controlled framework. The module architecture consists of several key components working together to ensure safe and effective network governance.\n\n\n---\n\n   - `TextProposal`: Governance signaling proposals\n   - Custom WASM proposals for smart contract operations\n\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: This guide explains how the admin module works within Neutron's governance system. Unlike other modules that users can interact with directly, the admin module is exclusively accessible by the **Main DAO contract**.\n- Line 9: The admin module cannot be used directly by individual users or external contracts. All interactions must go through Neutron's DAO governance process.\n- Line 16: - **Only the Main DAO contract** can send messages to the admin module\n- Line 25: When the Neutron community wants to execute administrative operations:\n- Line 29: 3. **Proposal Execution**: If approved, the Main DAO contract sends messages to the admin module\n\n**Content Preview:**\n```\n\nThis guide explains how the admin module works within Neutron's governance system. Unlike other modules that users can interact with directly, the admin module is exclusively accessible by the **Main DAO contract**.\n\n\n---\n\n<Warning>\nThe admin module cannot be used directly by individual users or external contracts. All interactions must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\n- **Only the Main DAO contract** can send messages to the admin module\n- Messages are sent using WebAssembly bindings from the Main DAO\n```\n\n---\n\n## 10. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n- Line 9: **Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 29: The admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n- Line 32: - **Smart Contract Management**: Executing WebAssembly (WASM) proposals for contract instantiation, migration, and administration\n- Line 40: 1. **Legacy Proposals**: Traditional governance proposals rooted in the Cosmos SDK's `x/gov` module, supporting predefined proposals like `MigrateContract`, `InstantiateContract`, and parameter changes. These proposals are processed through dedicated handlers and remain supported for backward compatibility with modules like IBC that haven't fully transitioned to SDK 0.47 patterns.\n\n**Content Preview:**\n```\n\nThe admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n\n\n---\n\n<Warning>\n**Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n\n```\n\n---\n\n## 11. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: The Contract Manager module implements a crucial safety mechanism for IBC-enabled smart contracts. This document explains the principles, architecture, and internal mechanisms of the module.\n- Line 11: When smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n- Line 13: 1. **IBC Channel Disruption**: If a contract's sudo handler fails when processing an acknowledgment on an ORDERED channel, it can disrupt the entire channel.\n- Line 17: 3. **Attack Vector**: Malicious contracts could deliberately implement failing sudo handlers to attack the network infrastructure.\n- Line 21: To address these challenges, the Contract Manager module implements a pattern where:\n\n**Content Preview:**\n```\n\nThe Contract Manager module implements a crucial safety mechanism for IBC-enabled smart contracts. This document explains the principles, architecture, and internal mechanisms of the module.\n\n\n---\n\n\nWhen smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n\n\n---\n\n\n1. **IBC Channel Disruption**: If a contract's sudo handler fails when processing an acknowledgment on an ORDERED channel, it can disrupt the entire channel.\n\n```\n\n---\n\n## 12. Overview\n**File:** /root/neutron/docs/developers/modules/contractmanager/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: The Contract Manager module provides a safety mechanism for handling IBC acknowledgment failures in smart contracts. It ensures that malicious or buggy contracts cannot disrupt IBC channels or burden relayers by implementing error handling strategies for sudo calls.\n- Line 9: - **Error Containment**: Prevents contract errors from disrupting IBC channels by capturing and storing errors rather than failing the channel\n- Line 13: - **Failure Recording**: Stores details of contract failures for later retrieval and handling\n- Line 15: - **Failure Resubmission**: Allows contracts to resubmit failed operations outside of the relayer context\n- Line 17: The module is essential for maintaining the reliability of IBC communications while allowing smart contracts to interact with IBC channels safely.\n\n**Content Preview:**\n```\n\nThe Contract Manager module provides a safety mechanism for handling IBC acknowledgment failures in smart contracts. It ensures that malicious or buggy contracts cannot disrupt IBC channels or burden relayers by implementing error handling strategies for sudo calls.\n\n\n---\n\n\n- **Error Containment**: Prevents contract errors from disrupting IBC channels by capturing and storing errors rather than failing the channel\n  \n\n---\n\n\n- **Failure Recording**: Stores details of contract failures for later retrieval and handling\n\n```\n\n---\n\n## 13. Reference\n**File:** /root/neutron/docs/developers/modules/contractmanager/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Technical reference for the Contract Manager module\"\n- Line 6: The Contract Manager module manages sudo call failures and provides resubmission capabilities for IBC-related contract operations.\n- Line 12: | `sudo_call_gas_limit` | uint64 | Maximum gas that can be used during a sudo call to a contract |\n- Line 20: // Address of the failed contract\n- Line 35: Allows contracts to resubmit their own failed operations:\n\n**Content Preview:**\n```\ntitle: \"Reference\"\ndescription: \"Technical reference for the Contract Manager module\"\n---\n\n---\n\n\nThe Contract Manager module manages sudo call failures and provides resubmission capabilities for IBC-related contract operations.\n\n\n---\n\n| --- | --- | --- |\n| `sudo_call_gas_limit` | uint64 | Maximum gas that can be used during a sudo call to a contract |\n\n```\n\n---\n\n## 14. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 20: **Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 39: The module hooks into Neutron's block production process to check for schedules due for execution:\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n- Line 65: repeated MsgExecuteContract msgs = 3;      // Messages to execute\n\n**Content Preview:**\n```\n<Warning>\n**Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n</Warning>\n\n---\n\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n\nThe module hooks into Neutron's block production process to check for schedules due for execution:\n\n```\n\n---\n\n## 15. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 10: - Understanding of Neutron governance processes\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 19: - Individual users and contracts cannot directly interact with this module\n- Line 29: Neutron uses a [modular governance system](/concepts/modular-governance) with specialized subDAOs that handle different aspects of network management. The Security SubDAO can remove schedules in emergency situations, providing a safety mechanism for the network.\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n\n---\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n```\n\n---\n\n## 16. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 29: - Contracts cannot directly create schedules\n- Line 33: The Cron module operates within Neutron's [modular governance system](/concepts/modular-governance), which uses specialized subDAOs to handle different aspects of network management. The Cron SubDAO specifically manages scheduling-related proposals.\n\n**Content Preview:**\n```\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n## 17. Explanation\n**File:** /root/neutron/docs/developers/modules/feeburner/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: ### Fee Collection in Sovereign Neutron\n- Line 11: Following the Mercury upgrade in April 2025, Neutron operates as a fully sovereign network with its own validator set and native NTRN staking. Transaction fees collected on Neutron are processed entirely within the network through the Fee Burner module.\n- Line 20: - **Supply Contraction**: As usage of the network increases, more fees are collected and burned, creating stronger deflationary pressure\n- Line 22: This mechanism helps maintain long-term value for NTRN token holders while supporting Neutron's fixed supply tokenomics model introduced with the Mercury upgrade.\n- Line 32: The Treasury can then use these funds for ecosystem development, grants, and other initiatives as governed by the Neutron DAO.\n\n**Content Preview:**\n```\n\n### Fee Collection in Sovereign Neutron\n\n\n---\n\n\nFollowing the Mercury upgrade in April 2025, Neutron operates as a fully sovereign network with its own validator set and native NTRN staking. Transaction fees collected on Neutron are processed entirely within the network through the Fee Burner module.\n\n\n---\n\n- **Systematic Burning**: By destroying NTRN tokens collected as fees, the module reduces the total supply over time\n- **Supply Contraction**: As usage of the network increases, more fees are collected and burned, creating stronger deflationary pressure\n\n```\n\n---\n\n## 18. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n- Line 7: ## For Smart Contract Developers\n- Line 17: use neutron_sdk::bindings::msg::NeutronMsg;\n- Line 18: use neutron_sdk::bindings::types::{Fee as IbcFee, Coin};\n- Line 39: let msg = NeutronMsg::IbcTransfer {\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n\n\n---\n\n\n## For Smart Contract Developers\n\n\n---\n\n// Import necessary types\nuse neutron_sdk::bindings::msg::NeutronMsg;\nuse neutron_sdk::bindings::types::{Fee as IbcFee, Coin};\n```\n\n---\n\n## 19. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 20: --chain-id neutron-1 \\\n- Line 118: \"github.com/neutron-org/neutron/v6/x/globalfee/keeper\"\n- Line 119: \"github.com/neutron-org/neutron/v6/x/globalfee/types\"\n- Line 158: const params = await client.queryContractSmart(\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n  --from validator \\\n  --chain-id neutron-1 \\\n  --gas auto \\\n\n---\n\nimport (\n    \"github.com/neutron-org/neutron/v6/x/globalfee/keeper\"\n    \"github.com/neutron-org/neutron/v6/x/globalfee/types\"\n```\n\n---\n\n## 20. How-to\n**File:** /root/neutron/docs/developers/modules/gmp/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 24: \"action\": \"execute_contract\",\n- Line 25: \"contract_address\": \"neutron1...\",\n- Line 40: \"action\": \"execute_contract\",\n- Line 41: \"contract_address\": \"neutron1...\",\n- Line 71: neutrond tx ibc-transfer transfer \\\n\n**Content Preview:**\n```\n{\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n\n---\n\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n  \"msg\": {\n\n---\n\nconst payload = JSON.stringify({\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "3d9007f4-9d67-479f-b1ef-4e6b251ea619",
            "tool_call_id": "call_Y0gpb6qbQzOHUpvjPKuODmlB",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_P7OJu1B9cu7k7ifCwmIxFGNX",
                        "function": {
                            "arguments": "{\"query\": \"upload contract neutrond tx wasm store\", \"section\": \"all\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 426,
                    "prompt_tokens": 13538,
                    "total_tokens": 13964,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 384,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 6784
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CFFErhOjW4Igo7LtHSy5qrcV84K",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--6f049cb2-c2e6-42ea-bdf1-49c48246cd81-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "upload contract neutrond tx wasm store",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_P7OJu1B9cu7k7ifCwmIxFGNX",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 13538,
                "output_tokens": 426,
                "total_tokens": 13964,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 6784
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 384
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"upload contract neutrond tx wasm store\":\n\n## 1. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 3: description: \"A gentle introduction to smart contract development on Neutron\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 8: ## What is a Smart Contract?\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n---\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n```\n\n---\n\n## 2. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 10: A simple counter contract that:\n- Line 11: - Stores a `Uint128` value in persistent storage\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 3. Neutron DAO Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-dao.mdx\n**Section:** resources\n**Relevance Score:** 21\n\n**Matching lines:**\n- Line 2: title: \"Neutron DAO Contracts\"\n- Line 3: description: \"Addresses and information for Neutron DAO smart contracts\"\n- Line 7: This page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n- Line 76: To interact with the DAO, you can use the [Neutron DAO UI](https://dao.neutron.org/) or interact directly with the contracts using the `neutrond` CLI.\n- Line 82: neutrond query wasm contract-state smart neutron1suhgf5svhu4usrurvxzlgn54ksxmn8gljarjtxqnapv8kjnp4nrstdxvff '{\"config\":{}}'\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\n\n---\n\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\nicon: \"building-columns\"\n\n---\n\n\nThis page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n\n```\n\n---\n\n## 4. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n- Line 10: Interchain Accounts are a powerful IBC feature that allows a smart contract on Neutron to control accounts on other IBC-connected chains. This enables a wide range of cross-chain applications, from managing assets across chains to controlling governance on remote chains.\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n\n```\n\n---\n\n## 5. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n- Line 10: Interchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n- Line 16: 3. Build a simple contract that reacts to state changes on another chain\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n\n```\n\n---\n\n## 6. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 17: Test individual contract functions in isolation\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 7. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Part 2: Modules & Contracts\"\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 11: - Inter-contract communication patterns\n- Line 17: - Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n\n**Content Preview:**\n```\n---\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n\n---\n\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n```\n\n---\n\n## 8. Bridge Contracts\n**File:** /root/neutron/docs/resources/contracts/bridge.mdx\n**Section:** resources\n**Relevance Score:** 17\n\n**Matching lines:**\n- Line 2: title: \"Bridge Contracts\"\n- Line 3: description: \"Information about Neutron's cross-chain bridge contracts\"\n- Line 7: This page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n- Line 11: | Contract | Address | Code ID |\n- Line 18: | Contract | Address |\n\n**Content Preview:**\n```\n---\ntitle: \"Bridge Contracts\"\ndescription: \"Information about Neutron's cross-chain bridge contracts\"\n\n---\n\ntitle: \"Bridge Contracts\"\ndescription: \"Information about Neutron's cross-chain bridge contracts\"\nicon: \"bridge\"\n\n---\n\n\nThis page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n\n```\n\n---\n\n## 9. Neutron TGE Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-tge.mdx\n**Section:** resources\n**Relevance Score:** 17\n\n**Matching lines:**\n- Line 2: title: \"Neutron TGE Contracts\"\n- Line 3: description: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n- Line 7: This page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n- Line 13: | Airdrop | `neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56` | [cw20-merkle-airdrop](https://github.com/neutron-org/neutron-tge-contracts) | 196 |\n- Line 14: | Distribution | `neutron1dk9c86h7gmvuaq89cv72cjhq4c97r2wgl5gyfruv6shquwspalgq5u7sy5` | [distribution](https://github.com/neutron-org/neutron-tge-contracts) | 9 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n\n---\n\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\nicon: \"rocket-launch\"\n\n---\n\n\nThis page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n\n```\n\n---\n\n## 10. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 17\n\n**Matching lines:**\n- Line 2: title: \"Neutron Vesting Contracts\"\n- Line 3: description: \"Information about Neutron's token vesting smart contracts\"\n- Line 7: This page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n- Line 13: | Neutron Vesting Investors [no voting power] | `neutron14q5elxj4ghktt7d7d0uw0cs0gqyeay25h5fkree897gjm38gevxqmvqsq5` | [vesting-investors](https://github.com/neutron-org/neutron-tge-contracts) | 28 |\n- Line 14: | Neutron Vesting Investors | `neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9` | [vesting-investors](https://github.com/neutron-org/neutron-tge-contracts) | 28 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\n\n---\n\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\nicon: \"clock\"\n\n---\n\n\nThis page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n\n```\n\n---\n\n## 11. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 58: ### What CosmWasm version is used?\n- Line 60: We are using a patched 0.51.0 version of wasmd.\n- Line 62: ### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n- Line 67: out of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\n### What CosmWasm version is used?\n\n\n---\n\n\nWe are using a patched 0.51.0 version of wasmd.\n\n```\n\n---\n\n## 12. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 20: **Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 35: The module stores this schedule in its state and begins executing it according to the specified period.\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n- Line 52: - Executes the messages using the WASM message server\n\n**Content Preview:**\n```\n<Warning>\n**Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n</Warning>\n\n---\n\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n\nThe module stores this schedule in its state and begins executing it according to the specified period.\n\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/feeburner/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 12: neutrond query feeburner params\n- Line 36: neutrond query feeburner total-burned-neutrons-amount\n- Line 106: const queryClient = await cosmwasm.SigningCosmWasmClient.connect(rpcEndpoint);\n- Line 107: const params = await queryClient.queryContractSmart(\n- Line 114: const burnedAmount = await queryClient.queryContractSmart(\n\n**Content Preview:**\n```\n```bash\nneutrond query feeburner params\n```\n\n---\n\n```bash\nneutrond query feeburner total-burned-neutrons-amount\n```\n\n---\n\n// Query Fee Burner module parameters\nconst queryClient = await cosmwasm.SigningCosmWasmClient.connect(rpcEndpoint);\nconst params = await queryClient.queryContractSmart(\n```\n\n---\n\n## 14. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 156: const client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n- Line 158: const params = await client.queryContractSmart(\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n- Line 198: neutrond query block [height] | jq '.block.data.txs[] | select(.body.messages[].type_url | contains(\"MsgVote\"))'\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n```javascript\nconst client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n\n\n---\n\n\nconst params = await client.queryContractSmart(\n  \"neutron1...\", // Global fee module address\n```\n\n---\n\n## 15. Explanation\n**File:** /root/neutron/docs/developers/modules/harpoon/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: This document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n- Line 12: The Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n- Line 63: ### Contract Subscription Storage\n- Line 65: The module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n- Line 71: contract_addresses: []string\n\n**Content Preview:**\n```\n\nThis document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n\n\n---\n\n\nThe Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n\n\n---\n\n\n### Contract Subscription Storage\n\n```\n\n---\n\n## 16. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: Interchain Queries allow developers to get verifiable data from other blockchains. This feature is essential for creating secure cross-chain applications. The module uses Merkle proofs and IBC clients to confirm the accuracy of the data retrieved directly from the storage of the target blockchain. It allows any smart contract to register Interchain Queries without needing any special module on the target blockchain.\n- Line 11: While the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n- Line 24: A smart contract can register an Interchain Query to regularly fetch data from a remote chain's state and process it in any way it needs. There are two types of Interchain Queries:\n- Line 26: - **Key-Value Query (KV Query)**: This type retrieves values from the Cosmos-SDK KV-storage on a remote chain, using a set of keys. It can be used to get account balances, governance proposals, staking information, smart contract states, or any other data stored in the remote chain's KV-storage. Learn more about how KV queries work [here](/developers/modules/interchain-queries/explanation#how-do-kv-interchain-queries-work).\n- Line 30: Interchain Queries, like IBC, rely on an intermediary infrastructure called an [Interchain Query relayer](/developers/modules/interchain-queries/explanation#what-is-an-interchain-query-relayer) to serve smart contracts. The relayer is responsible for collecting the requested information (along with cryptographic proofs to verify its validity) based on the parameters of the Interchain Query. It then delivers this data to the `interchainqueries` module, which forwards it to the smart contracts for processing.\n\n**Content Preview:**\n```\n\nInterchain Queries allow developers to get verifiable data from other blockchains. This feature is essential for creating secure cross-chain applications. The module uses Merkle proofs and IBC clients to confirm the accuracy of the data retrieved directly from the storage of the target blockchain. It allows any smart contract to register Interchain Queries without needing any special module on the target blockchain.\n\n\n---\n\n<Info>\nWhile the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n</Info>\n\n---\n\n\nA smart contract can register an Interchain Query to regularly fetch data from a remote chain's state and process it in any way it needs. There are two types of Interchain Queries:\n\n```\n\n---\n\n## 17. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/tokenfactory/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 44: - Once renounced, admin powers cannot be restored\n- Line 86: - Metadata is stored on-chain\n- Line 93: - Implemented as CosmWasm contracts\n- Line 97: - Only whitelisted contracts can be used as hooks\n- Line 129: - Only approved contracts can be used as hooks\n\n**Content Preview:**\n```\n- Admin can be set to empty (renouncing control)\n- Once renounced, admin powers cannot be restored\n\n\n---\n\n- Only admin can set/update metadata\n- Metadata is stored on-chain\n- Used by wallets and exchanges for display\n\n---\n\n- Custom logic executed before token transfers\n- Implemented as CosmWasm contracts\n- Can block, modify, or allow transfers\n```\n\n---\n\n## 18. Developer Quickstart\n**File:** /root/neutron/docs/developers/quickstart.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 7: This guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n- Line 22: rustup target add wasm32-unknown-unknown\n- Line 46: # Build the neutrond binary\n- Line 50: neutrond version\n- Line 83: # Download Neutron DAO contracts\n\n**Content Preview:**\n```\n\nThis guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n\n\n---\n\n    rustup default stable\n    rustup target add wasm32-unknown-unknown\n    \n\n---\n\n    \n    # Build the neutrond binary\n    make install\n```\n\n---\n\n## 19. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 152: Create handler functions in the `src/mappings/` directory to process blockchain data and store it according to your schema:\n- Line 282: ### Smart Contract Events\n- Line 284: To index events emitted by smart contracts:\n- Line 288: handler: 'handleContractEvent',\n- Line 291: type: 'wasm',\n\n**Content Preview:**\n```\n\nCreate handler functions in the `src/mappings/` directory to process blockchain data and store it according to your schema:\n\n\n---\n\n\n### Smart Contract Events\n\n\n---\n\n\nTo index events emitted by smart contracts:\n\n```\n\n---\n\n## 20. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 10: - Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 25: # For Rust-based contract tests\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 119: Msgs: []crontypes.MsgExecuteContract{\n\n**Content Preview:**\n```\n\n- Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n- Basic understanding of Go and Rust testing frameworks\n\n---\n\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "405363a1-7b5c-43d6-8fb9-fa5d69c583bf",
            "tool_call_id": "call_P7OJu1B9cu7k7ifCwmIxFGNX",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_ciUZxN4LGe7ouMJsQ4z98kVD",
                        "function": {
                            "arguments": "{\"query\":\"neutrond tx wasm store\", \"section\":\"all\", \"max_results\": 50}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 295,
                    "prompt_tokens": 20288,
                    "total_tokens": 20583,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 256,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 13440
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CFQeQjedH2CNs0nmNNU7cMBg1KO",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--8833e041-0177-4f52-b05d-fdd531c2babc-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutrond tx wasm store",
                        "section": "all",
                        "max_results": 50
                    },
                    "id": "call_ciUZxN4LGe7ouMJsQ4z98kVD",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 20288,
                "output_tokens": 295,
                "total_tokens": 20583,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 13440
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 256
                }
            }
        },
        {
            "content": "Found 50 result(s) for \"neutrond tx wasm store\":\n\n## 1. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n- Line 12: The counter contract template can be found in [this GitHub repository](https://github.com/CosmWasm/cw-template).\n- Line 56: `State` handles the state of the database where smart contract data is stored and accessed.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n\n---\n\n\nLet's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n```\n\n---\n\n## 2. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n- Line 25: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 29: Start by creating a new CosmWasm project using cargo-generate:\n- Line 32: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-ica-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 3. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 22: - Have a basic understanding of CosmWasm smart contract development\n- Line 24: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 28: Start by creating a new CosmWasm project using cargo-generate:\n- Line 31: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 4. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 17: // Store the data instead of processing it immediately\n- Line 30: 1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n- Line 31: 2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n- Line 42: neutrond query contractmanager failures [contract-address]\n\n**Content Preview:**\n```\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n        SudoMsg::Response { request, data } => {\n            // Store the data instead of processing it immediately\n            PENDING_RESPONSES.save(deps.storage, &data)?;\n\n---\n\n\n1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n```\n\n---\n\n## 5. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 91: neutrond query harpoon subscribed-contracts [hook-type]\n- Line 99: neutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n- Line 140: The module stores subscriptions with the following structure:\n- Line 173: - **StoreKey**: `\"harpoon\"`\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts [hook-type]\n```\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n```\n```\n\n---\n\n## 6. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 16: Go to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n- Line 26: neutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 44: neutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 153: Create an `execute` message handler in your contract to register the Interchain Query using the helper function as a [submessage](https://docs.cosmwasm.com/docs/smart-contracts/message/submessage/).\n- Line 298: To determine how the data path is constructed and what the data model is, you need to investigate the module's code. Start by locating [the gRPC handler](https://github.com/cosmos/cosmos-sdk/blob/853dbbf3e84900214137805d78e325ecd56fd68f/x/auth/keeper/grpc_query.go#L62-L63) in the module that corresponds to the data you're interested in. This handler provides a clue about where the data is stored and what the data model is.\n\n**Content Preview:**\n```\n\nGo to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n\n\n---\n\n```\nneutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\nconnection:\n\n---\n\n```\nneutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\nclient_state:\n```\n\n---\n\n## 7. ICTX Explanation\n**File:** /root/neutron/docs/developers/modules/interchaintxs/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: The Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n- Line 13: A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n- Line 88: The module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n- Line 113: - Failed callback information is stored in the Contract Manager state for potential resubmission\n- Line 158: neutrond q ibc channel end <src-port> <src-channel-id>\n\n**Content Preview:**\n```\n\nThe Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n\n\n---\n\ngraph TB\n    A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n    A -->|MsgSubmitTx| B\n\n---\n\n\nThe module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n\n```\n\n---\n\n## 8. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 203: codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n- Line 207: executeMsg := &wasmtypes.MsgExecuteContract{\n- Line 338: codeID := s.storeContract(\"artifacts/test_contract.wasm\")\n\n**Content Preview:**\n```\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n\n---\n\n    // Deploy a contract that uses IBC\n    codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n    contractAddr := s.instantiateContract(codeID, `{\"channel\":\"channel-0\"}`)\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 43: Neutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n- Line 53: These interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n- Line 55: ### Method 2: Direct WASM Execute\n- Line 57: For programmatic proposal submission, use WASM execute messages to the Main DAO contract:\n- Line 61: neutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n\n**Content Preview:**\n```\n<Warning>\nNeutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n</Warning>\n\n---\n\n\nThese interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n\n\n---\n\n\n### Method 2: Direct WASM Execute\n\n```\n\n---\n\n## 10. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 25: 3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n- Line 26: 4. Contract owners can later query these stored failures and handle them appropriately.\n- Line 35: D -->|Store Failure| E[KVStore]\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n- Line 47: 3. **Records Failures**: Stores sudo call failures for later retrieval and potential resubmission.\n\n**Content Preview:**\n```\n2. If the sudo call succeeds, the state changes are committed.\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n---\n\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n\n---\n\n    B -->|On Error| D[Contract Manager]\n    D -->|Store Failure| E[KVStore]\n    F[Contract Owner] -->|Query| E\n```\n\n---\n\n## 11. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 35: The module stores this schedule in its state and begins executing it according to the specified period.\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n- Line 52: - Executes the messages using the WASM message server\n- Line 109: - Messages must be properly formatted JSON for CosmWasm contracts\n\n**Content Preview:**\n```\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n\nThe module stores this schedule in its state and begins executing it according to the specified period.\n\n\n---\n\n3. For each schedule that meets the execution condition:\n   - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n   - Sets the sender as the Cron module account\n```\n\n---\n\n## 12. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 80: neutrond tx gov submit-proposal [proposal-file.json] \\\n- Line 102: use cosmwasm_std::{\n- Line 348: neutrond query cron list-schedule\n- Line 351: neutrond query cron show-schedule <schedule-name>\n\n**Content Preview:**\n```\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n---\n\n# Submit governance proposal\nneutrond tx gov submit-proposal [proposal-file.json] \\\n  --from=<your-key> \\\n\n---\n\n```rust\nuse cosmwasm_std::{\n    entry_point, DepsMut, Env, MessageInfo, Response, StdResult,\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 60: neutrond tx gov submit-proposal proposal.json \\\n- Line 73: neutrond tx gov vote 123 yes \\\n- Line 133: neutrond query dynamicfees params\n- Line 166: neutrond tx bank send sender recipient 1000untrn \\\n- Line 173: CosmWasm contracts can query supported denominations:\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal proposal.json \\\n  --from your-key \\\n\n---\n\n# Vote yes on proposal ID 123\nneutrond tx gov vote 123 yes \\\n  --from your-key \\\n\n---\n\n# Query current asset prices\nneutrond query dynamicfees params\n```\n```\n\n---\n\n## 14. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 14: // Example in CosmWasm\n- Line 59: // Example in CosmWasm\n- Line 80: let cosmos_msgs: Vec<cosmwasm_std::CosmosMsg> = vec![/* Your Cosmos messages here */];\n- Line 133: neutrond query feerefunder params\n- Line 198: neutrond query feerefunder fee-info [port_id] [channel_id] [sequence]\n\n**Content Preview:**\n```\n```rust\n// Example in CosmWasm\n\n\n---\n\n```rust\n// Example in CosmWasm\n\n\n---\n\n// Create the interchain transaction message with fee\nlet cosmos_msgs: Vec<cosmwasm_std::CosmosMsg> = vec![/* Your Cosmos messages here */];\nlet connection_id = \"connection-0\";\n```\n\n---\n\n## 15. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 156: const client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n- Line 198: neutrond query block [height] | jq '.block.data.txs[] | select(.body.messages[].type_url | contains(\"MsgVote\"))'\n- Line 207: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgSubmitProposal' \\\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n```javascript\nconst client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n\n\n---\n\n# Monitor bypass message types in transactions\nneutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n  --page 1 --limit 100\n```\n\n---\n\n## 16. Explanation\n**File:** /root/neutron/docs/developers/modules/harpoon/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: This document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n- Line 12: The Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n- Line 65: The module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n- Line 195: _, err = k.wasmKeeper.Sudo(sdkCtx, accContractAddress, msgJSONBz)\n- Line 225: The staking module does not store historical data. By subscribing to hooks, contracts can maintain their own historical records, enabling governance systems to calculate voting power at specific block heights.\n\n**Content Preview:**\n```\n\nThis document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n\n\n---\n\n\nThe Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n\n\n---\n\n\nThe module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n\n```\n\n---\n\n## 17. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n- Line 14: use cosmwasm_std::{Decimal, Uint128};\n- Line 147: use cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n- Line 306: neutrond tx gov submit-proposal /path/to/proposal.json \\\n- Line 319: neutrond tx gov vote <proposal-id> yes \\\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n\n\n---\n\n```rust\nuse cosmwasm_std::{Decimal, Uint128};\n\n\n---\n\n```rust\nuse cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n\n```\n\n---\n\n## 18. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 11: While the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n- Line 26: - **Key-Value Query (KV Query)**: This type retrieves values from the Cosmos-SDK KV-storage on a remote chain, using a set of keys. It can be used to get account balances, governance proposals, staking information, smart contract states, or any other data stored in the remote chain's KV-storage. Learn more about how KV queries work [here](/developers/modules/interchain-queries/explanation#how-do-kv-interchain-queries-work).\n- Line 42: 1. **Key-Value queries (KV-queries)**: These queries allow retrieving values stored under specific keys in the remote chain's state.\n- Line 101: 2. **Result Access**: Query results are stored in the module's state and can be accessed by contracts through query methods.\n- Line 104: The module is designed to be easily integrated with CosmWasm contracts, providing a simple interface for cross-chain data access.\n\n**Content Preview:**\n```\n<Info>\nWhile the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n</Info>\n\n---\n\n\n- **Key-Value Query (KV Query)**: This type retrieves values from the Cosmos-SDK KV-storage on a remote chain, using a set of keys. It can be used to get account balances, governance proposals, staking information, smart contract states, or any other data stored in the remote chain's KV-storage. Learn more about how KV queries work [here](/developers/modules/interchain-queries/explanation#how-do-kv-interchain-queries-work).\n\n\n---\n\n\n1. **Key-Value queries (KV-queries)**: These queries allow retrieving values stored under specific keys in the remote chain's state.\n\n```\n\n---\n\n## 19. How To\n**File:** /root/neutron/docs/developers/modules/interchaintxs/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical examples for implementing interchain transactions in CosmWasm smart contracts, focusing on registering interchain accounts and executing remote transactions.\n- Line 8: The Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands. All interactions must be programmed into smart contracts.\n- Line 13: ### Using CosmWasm\n- Line 15: In your CosmWasm contract, implement the registration as follows:\n- Line 123: // Store the channel information\n\n**Content Preview:**\n```\n\nThis guide provides practical examples for implementing interchain transactions in CosmWasm smart contracts, focusing on registering interchain accounts and executing remote transactions.\n\n\n---\n\n<Warning>\nThe Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands. All interactions must be programmed into smart contracts.\n</Warning>\n\n---\n\n\n### Using CosmWasm\n\n```\n\n---\n\n## 20. Reference\n**File:** /root/neutron/docs/developers/modules/interchaintxs/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: The Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands.\n- Line 214: The module only supports query CLI commands. There are no transaction CLI commands as the module is exclusively designed for CosmWasm smart contract integration.\n- Line 315: The module parameters are stored in the params subspace:\n- Line 328: The module stores minimal state in the blockchain:\n- Line 332: Stores the code ID threshold for determining fee requirements during ICA registration.\n\n**Content Preview:**\n```\n<Warning>\nThe Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands.\n</Warning>\n\n---\n\n<Info>\nThe module only supports query CLI commands. There are no transaction CLI commands as the module is exclusively designed for CosmWasm smart contract integration.\n</Info>\n\n---\n\n\nThe module parameters are stored in the params subspace:\n\n```\n\n---\n\n## 21. How-to\n**File:** /root/neutron/docs/developers/modules/transfer/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 40: ### From a CosmWasm Contract\n- Line 45: use cosmwasm_std::{\n- Line 148: use cosmwasm_std::{\n- Line 192: return Err(cosmwasm_std::StdError::generic_err(\"Invalid request ID format\"));\n- Line 236: 1. **When sending an IBC transfer**, store the transfer details indexed by channel and sequence:\n\n**Content Preview:**\n```\n\n### From a CosmWasm Contract\n\n\n---\n\n```rust\nuse cosmwasm_std::{\n    Coin, CosmosMsg, IbcMsg, DepsMut, Env, MessageInfo, Response, StdResult,\n\n---\n\n```rust\nuse cosmwasm_std::{\n    to_binary, DepsMut, Env, Response, StdResult, Binary, Empty\n```\n\n---\n\n## 22. Developer Quickstart\n**File:** /root/neutron/docs/developers/quickstart.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 22: rustup target add wasm32-unknown-unknown\n- Line 46: # Build the neutrond binary\n- Line 50: neutrond version\n- Line 121: ## Create and Deploy a CosmWasm Smart Contract\n- Line 124: <Step title=\"Initialize a New CosmWasm Project\">\n\n**Content Preview:**\n```\n    rustup default stable\n    rustup target add wasm32-unknown-unknown\n    \n\n---\n\n    \n    # Build the neutrond binary\n    make install\n\n---\n\n    # Verify installation\n    neutrond version\n    ```\n```\n\n---\n\n## 23. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 11: - Understanding of CosmWasm contract development\n- Line 34: cosmwasm-std = { version = \"1.0\", features = [\"testing\"] }\n- Line 43: use cosmwasm_std::{Addr, Coin, Decimal, Uint128};\n- Line 76: // Store and instantiate contract\n\n**Content Preview:**\n```\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n- Completed [Chain Integration Tests](/developers/tutorials/integration-tests/chain)\n- Understanding of CosmWasm contract development\n- Familiarity with Rust testing frameworks\n\n---\n\ncw-multi-test = \"0.16\"\ncosmwasm-std = { version = \"1.0\", features = [\"testing\"] }\nneutron-sdk = { version = \"0.8\", features = [\"testing\"] }\n```\n\n---\n\n## 24. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 11: - Stores a `Uint128` value in persistent storage\n- Line 17: - [Rust](https://rustup.rs/) installed with `wasm32-unknown-unknown` target\n- Line 24: Neutron is a Cosmos SDK chain that uses CosmWasm for smart contracts. Contracts are WebAssembly modules that can store state and process messages.\n\n**Content Preview:**\n```\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n\n---\n\nA simple counter contract that:\n- Stores a `Uint128` value in persistent storage\n- Allows anyone to increase the value (with a limit of 100 per transaction)\n```\n\n---\n\n## 25. Reference\n**File:** /root/neutron/docs/developers/modules/contractmanager/reference.mdx\n**Section:** developers\n**Relevance Score:** 9\n\n**Matching lines:**\n- Line 31: ## CosmWasm Bindings\n- Line 73: - **Failure Storage**: Failed sudo calls are stored with full context for resubmission\n- Line 74: - **Error Redaction**: Stored errors are redacted (codespace + code only) for determinism\n- Line 82: 2. Captures and stores failures for later resubmission\n\n**Content Preview:**\n```\n\n## CosmWasm Bindings\n\n\n---\n\n- **Sudo Gas Limit**: Sudo calls are limited to prevent infinite recursion\n- **Failure Storage**: Failed sudo calls are stored with full context for resubmission\n- **Error Redaction**: Stored errors are redacted (codespace + code only) for determinism\n\n---\n\n- **Failure Storage**: Failed sudo calls are stored with full context for resubmission\n- **Error Redaction**: Stored errors are redacted (codespace + code only) for determinism\n- **Resubmission**: Contracts can resubmit their own failures without gas limits\n```\n\n---\n\n## 26. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/tokenfactory/explanation.mdx\n**Section:** developers\n**Relevance Score:** 9\n\n**Matching lines:**\n- Line 44: - Once renounced, admin powers cannot be restored\n- Line 86: - Metadata is stored on-chain\n- Line 93: - Implemented as CosmWasm contracts\n- Line 197: - Stores token metadata\n\n**Content Preview:**\n```\n- Admin can be set to empty (renouncing control)\n- Once renounced, admin powers cannot be restored\n\n\n---\n\n- Only admin can set/update metadata\n- Metadata is stored on-chain\n- Used by wallets and exchanges for display\n\n---\n\n- Custom logic executed before token transfers\n- Implemented as CosmWasm contracts\n- Can block, modify, or allow transfers\n```\n\n---\n\n## 27. IBC Relayer\n**File:** /root/neutron/docs/operators/ibc-relayer.mdx\n**Section:** operators\n**Relevance Score:** 9\n\n**Matching lines:**\n- Line 25: nano $HOME/.neutrond/config/app.toml\n- Line 41: nano $HOME/.neutrond/config/config.toml\n- Line 167: store_prefix = 'ibc'\n- Line 198: store_prefix = 'ibc'\n- Line 231: hermes keys restore cosmoshub-4 -m \"24-word mnemonic seed\"\n\n**Content Preview:**\n```\n```bash\nnano $HOME/.neutrond/config/app.toml\n```\n\n---\n\n```bash\nnano $HOME/.neutrond/config/config.toml\n```\n\n---\n\naddress_type = { derivation = 'cosmos' }\nstore_prefix = 'ibc'\ndefault_gas = 2000000\n```\n\n---\n\n## 28. ICQ Relayer\n**File:** /root/neutron/docs/operators/icq-relayer.mdx\n**Section:** operators\n**Relevance Score:** 9\n\n**Matching lines:**\n- Line 23: All registered Interchain Queries and their parameters are stored in the eponymous module and available by its query interface. The Relayer utilises the module's interface in order to initialise the performing list of queries. This is how the Relayer maintains the list of queries to be executed:\n- Line 65: The KV queries are submitted in a fire-and-forget way, i.e. they are submitted once per `update_period` span and never retried forcibly (e.g. on a submission error). The TX queries are a bit more tricky: since they are not stored in the Neutron chain and simply passed to smart contracts, it's needed that each tx is passed and handled by the smart contract only once.\n- Line 142: The keyring folder for Relayer's usage is configured by the `RELAYER_NEUTRON_CHAIN_HOME_DIR` variable. The easiest way is to run `neutrond keys` from the cloned neutron repository and get the default value from the `--keyring-dir` flag:\n- Line 145: neutrond keys\n- Line 158: --home string         directory for config and data (default \"/Users/your-user/.neutrond\")\n\n**Content Preview:**\n```\n\nAll registered Interchain Queries and their parameters are stored in the eponymous module and available by its query interface. The Relayer utilises the module's interface in order to initialise the performing list of queries. This is how the Relayer maintains the list of queries to be executed:\n\n\n---\n\n\nThe KV queries are submitted in a fire-and-forget way, i.e. they are submitted once per `update_period` span and never retried forcibly (e.g. on a submission error). The TX queries are a bit more tricky: since they are not stored in the Neutron chain and simply passed to smart contracts, it's needed that each tx is passed and handled by the smart contract only once.\n\n\n---\n\n\nThe keyring folder for Relayer's usage is configured by the `RELAYER_NEUTRON_CHAIN_HOME_DIR` variable. The easiest way is to run `neutrond keys` from the cloned neutron repository and get the default value from the `--keyring-dir` flag:\n\n```\n\n---\n\n## 29. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 58: ### What CosmWasm version is used?\n- Line 60: We are using a patched 0.51.0 version of wasmd.\n- Line 67: out of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n- Line 79: 2. **CosmWasm Specific Query Gas Limit** (`wasm.query_gas_limit` in [wasm] section):\n- Line 82: ###                                   WASM                                  ###\n\n**Content Preview:**\n```\n\n### What CosmWasm version is used?\n\n\n---\n\n\nWe are using a patched 0.51.0 version of wasmd.\n\n\n---\n\n```\nout of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n```\n```\n\n---\n\n## 30. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 113: neutrond query cron params\n- Line 127: neutrond query cron show-schedule [schedule-name]\n- Line 141: neutrond query cron list-schedule\n- Line 165: The `neutrond` CLI provides commands to query the Cron module:\n- Line 169: neutrond query cron list-schedule\n\n**Content Preview:**\n```\n```bash\nneutrond query cron params\n```\n\n---\n\n```bash\nneutrond query cron show-schedule [schedule-name]\n```\n\n---\n\n```bash\nneutrond query cron list-schedule\n```\n```\n\n---\n\n## 31. Client\n**File:** /root/neutron/docs/developers/modules/dex/client.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 13: The `neutrond` command-line interface allows users to interact with the Dex module using **positional arguments**.\n- Line 22: neutrond tx dex deposit [receiver] [token-a] [token-b] [amounts-a] [amounts-b] [tick-indexes] [fees] [disable-autoswap] [fail-tx-on-bel] [flags]\n- Line 43: neutrond tx dex deposit \\\n- Line 59: neutrond tx dex deposit \\\n- Line 78: neutrond tx dex withdrawal [receiver] [token-a] [token-b] [shares-to-remove] [tick-indexes] [fees]\n\n**Content Preview:**\n```\n\nThe `neutrond` command-line interface allows users to interact with the Dex module using **positional arguments**.\n\n\n---\n\n```bash\nneutrond tx dex deposit [receiver] [token-a] [token-b] [amounts-a] [amounts-b] [tick-indexes] [fees] [disable-autoswap] [fail-tx-on-bel] [flags]\n```\n\n---\n\n```bash\nneutrond tx dex deposit \\\n  alice \\\n```\n\n---\n\n## 32. Tick Liquidity\n**File:** /root/neutron/docs/developers/modules/dex/concepts/tick-liquidity.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 5: `TickLiquidity` structs are used to store liquidity within the Dex. Each tick has a specific price and holds liquidity for a single token. `TickLiquidity` come in two general types:`PoolReserves` for storing LP positions and `LimitOrderTranche`s for storing limit orders. Both `TickLiquidity` types are indexed by a key which shares a number of fields in common. These two types make up the fundamental building blocks of the DEX orderbook, and are critical to the [liquidity iteration mechanism](/developers/modules/dex/concepts/liquidity-iteration). `TickLiquidity`s contain all of the necessary information to perform a swap, namely price and available reserves. Each `TickLiquidity` instance has a `TradePairID`, `TickIndexTakerToMaker`. A `TradePairID` containing the fields `MakerDenom` and `TakerDenom` describes what denom is held in the `TickLiquidity` (`MakerDenom`) and what denom it can be traded with (`TakerDenom`). `TickIndexTakerToMaker` describes the tick at which a certain liquidity is stored and by extension its `MakerPrice`.\n- Line 9: `PairID`s are the canonical way which we refer to the two tokens in a pair. In order to ensure uniqueness the denoms are sorted alphabetically, with the first denom stored as `Token0` and the second as `Token1`.\n- Line 24: A `Pool` contains all the information required for a single constant-priced AMM to exist. It holds liquidity for both sides of a pair, `Token0` and `Token1` named `LowerTick0` and `UpperTick1` respectively. Pools are not explicitly stored anywhere, but their `PoolReserves` content is.\n- Line 54: `ReservesMakerDenom` is used to store the total amount of `MakerDenom` within a given `PoolReserves` instance.\n- Line 70: `LimitOrderTranches` are used to store liquidity in the form of limit orders. Like `PoolReserves`, `LimitOrderTranches` also store a reference to a specific `TradePairId` and `TickIndexTakerToMaker`.\n\n**Content Preview:**\n```\n\n`TickLiquidity` structs are used to store liquidity within the Dex. Each tick has a specific price and holds liquidity for a single token. `TickLiquidity` come in two general types:`PoolReserves` for storing LP positions and `LimitOrderTranche`s for storing limit orders. Both `TickLiquidity` types are indexed by a key which shares a number of fields in common. These two types make up the fundamental building blocks of the DEX orderbook, and are critical to the [liquidity iteration mechanism](/developers/modules/dex/concepts/liquidity-iteration). `TickLiquidity`s contain all of the necessary information to perform a swap, namely price and available reserves. Each `TickLiquidity` instance has a `TradePairID`, `TickIndexTakerToMaker`. A `TradePairID` containing the fields `MakerDenom` and `TakerDenom` describes what denom is held in the `TickLiquidity` (`MakerDenom`) and what denom it can be traded with (`TakerDenom`). `TickIndexTakerToMaker` describes the tick at which a certain liquidity is stored and by extension its `MakerPrice`.\n\n\n---\n\n\n`PairID`s are the canonical way which we refer to the two tokens in a pair. In order to ensure uniqueness the denoms are sorted alphabetically, with the first denom stored as `Token0` and the second as `Token1`.\n\n\n---\n\n## Pool\nA `Pool` contains all the information required for a single constant-priced AMM to exist. It holds liquidity for both sides of a pair, `Token0` and `Token1` named `LowerTick0` and `UpperTick1` respectively. Pools are not explicitly stored anywhere, but their `PoolReserves` content is.\n```go\n```\n\n---\n\n## 33. How-to\n**File:** /root/neutron/docs/developers/modules/dex/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 52: All DEX functionality is available through the `neutrond` command-line interface using positional arguments.\n- Line 59: neutrond tx dex deposit \\\n- Line 87: neutrond tx dex deposit \\\n- Line 106: neutrond tx dex withdrawal \\\n- Line 130: neutrond tx dex multi-hop-swap \\\n\n**Content Preview:**\n```\n\nAll DEX functionality is available through the `neutrond` command-line interface using positional arguments.\n\n\n---\n\n```bash\nneutrond tx dex deposit \\\n  alice \\\n\n---\n\n```bash\nneutrond tx dex deposit \\\n  alice \\\n```\n\n---\n\n## 34. How-to\n**File:** /root/neutron/docs/developers/modules/feeburner/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 12: neutrond query feeburner params\n- Line 36: neutrond query feeburner total-burned-neutrons-amount\n- Line 106: const queryClient = await cosmwasm.SigningCosmWasmClient.connect(rpcEndpoint);\n\n**Content Preview:**\n```\n```bash\nneutrond query feeburner params\n```\n\n---\n\n```bash\nneutrond query feeburner total-burned-neutrons-amount\n```\n\n---\n\n// Query Fee Burner module parameters\nconst queryClient = await cosmwasm.SigningCosmWasmClient.connect(rpcEndpoint);\nconst params = await queryClient.queryContractSmart(\n```\n\n---\n\n## 35. Explanation\n**File:** /root/neutron/docs/developers/modules/feerefunder/explanation.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 77: 3. Stores the fee information associated with the packet ID\n- Line 82: 3. Store fee information with packet ID\n- Line 90: 1. Retrieves the stored fee information for the packet\n- Line 96: 1. Retrieve stored fee information for the packet\n- Line 106: 1. Retrieves the stored fee information for the packet\n\n**Content Preview:**\n```\n2. Locks the total fee amount (ack_fee + timeout_fee) in the module's account\n3. Stores the fee information associated with the packet ID\n\n\n---\n\n2. Check fees meet minimum requirements  \n3. Store fee information with packet ID\n4. Transfer total fees to module account\n\n---\n\n\n1. Retrieves the stored fee information for the packet\n2. Sends the acknowledgement fee to the relayer who delivered the ack\n```\n\n---\n\n## 36. How-to\n**File:** /root/neutron/docs/developers/modules/gmp/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 71: neutrond tx ibc-transfer transfer \\\n- Line 236: ### CosmWasm Contract Integration\n- Line 239: use cosmwasm_std::{IbcPacketReceiveMsg, IbcReceiveResponse};\n\n**Content Preview:**\n```\n# Using CLI\nneutrond tx ibc-transfer transfer \\\n  transfer \\\n\n---\n\n\n### CosmWasm Contract Integration\n\n\n---\n\n```rust\nuse cosmwasm_std::{IbcPacketReceiveMsg, IbcReceiveResponse};\nuse serde::{Deserialize, Serialize};\n```\n\n---\n\n## 37. Explanation\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/explanation.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 17: The IBC Rate Limit module employs a minimal Go middleware pattern combined with a CosmWasm contract for the rate limiting logic:\n- Line 22: B --> C[CosmWasm Contract]\n- Line 29: 1. **Governance Flexibility**: The core rate limiting logic is in a CosmWasm contract that can be updated via governance proposals without requiring a chain upgrade\n- Line 79: 3. The middleware calls the CosmWasm contract with the packet details\n- Line 93: 2. The middleware calls the CosmWasm contract with the packet details\n\n**Content Preview:**\n```\n\nThe IBC Rate Limit module employs a minimal Go middleware pattern combined with a CosmWasm contract for the rate limiting logic:\n\n\n---\n\n    A[IBC Transfer Module] --> B[IBC Rate Limit Middleware]\n    B --> C[CosmWasm Contract]\n    B --> D[IBC Core]\n\n---\n\n\n1. **Governance Flexibility**: The core rate limiting logic is in a CosmWasm contract that can be updated via governance proposals without requiring a chain upgrade\n2. **Minimal Chain Code**: The Go middleware is minimal, primarily responsible for routing IBC packets to the contract\n```\n\n---\n\n## 38. How-to\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 9: The IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n- Line 67: neutron query wasm contract-state smart <contract-address> '{\"get_quotas\":{\"channel_id\":\"channel-0\",\"denom\":\"untrn\"}}'\n- Line 96: neutron tx wasm execute <contract-address> '{\n- Line 134: neutron tx wasm execute <contract-address> '{\n- Line 147: neutron tx wasm execute <contract-address> '{\n\n**Content Preview:**\n```\n\nThe IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n\n\n---\n\n```bash\nneutron query wasm contract-state smart <contract-address> '{\"get_quotas\":{\"channel_id\":\"channel-0\",\"denom\":\"untrn\"}}'\n```\n\n---\n\n```bash\nneutron tx wasm execute <contract-address> '{\n  \"add_path\": {\n```\n\n---\n\n## 39. Reference\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 6: The IBC Rate Limit module provides rate limiting capabilities for IBC transfers by delegating logic to a CosmWasm contract.\n- Line 12: | `contract_address` | string | Address of the CosmWasm contract implementing rate limiting logic |\n- Line 58: - **Contract-Based**: Rate limiting logic is implemented in a CosmWasm contract\n- Line 66: The module communicates with a CosmWasm contract that handles:\n- Line 122: **Note**: The contract messages shown above (`send_packet`, `recv_packet`, `undo_send`) are the core messages sent by the Go module to the CosmWasm contract. Additional contract-specific query and execute messages (like `get_quotas`, `add_path`, etc.) depend on the specific contract implementation and may vary between different rate limiting contract versions.\n\n**Content Preview:**\n```\n\nThe IBC Rate Limit module provides rate limiting capabilities for IBC transfers by delegating logic to a CosmWasm contract.\n\n\n---\n\n| --- | --- | --- |\n| `contract_address` | string | Address of the CosmWasm contract implementing rate limiting logic |\n\n\n---\n\n\n- **Contract-Based**: Rate limiting logic is implemented in a CosmWasm contract\n- **IBC Middleware**: Intercepts IBC packets to apply rate limits\n```\n\n---\n\n## 40. ICQ Explanation\n**File:** /root/neutron/docs/developers/modules/interchain-queries/explanation.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 27: 6. The relayer submits the key-value pairs and proofs to the `interchainqueries` module. This operation is called KV Interchain Query result submission. The module verifies the result using the proofs, stores it on-chain, and notifies the owning smart contract about the new result.\n- Line 43: StoreValue           StoreValue\n- Line 46: 1. Each Cosmos SDK module has its own IAVL store\n- Line 109: - [Why doesn't interchainqueries module store TX query results?](#why-doesnt-interchainqueries-module-store-tx-query-results)\n- Line 135: KV Interchain Queries rely heavily on the storage layout of the remote chain, including the paths to IAVL leaf nodes and the data models used to represent the stored information. The accuracy and functionality of KV Interchain Queries depend entirely on the correctness of the paths and the consistency of the data models. This tight coupling introduces several considerations and potential challenges for dApp developers. The [neutron-sdk interchain queries related package](https://docs.rs/neutron-sdk/0.11.0/neutron_sdk/interchain_queries/index.html#) includes target chain version separation precisely for this reasoning.\n\n**Content Preview:**\n```\n\n6. The relayer submits the key-value pairs and proofs to the `interchainqueries` module. This operation is called KV Interchain Query result submission. The module verifies the result using the proofs, stores it on-chain, and notifies the owning smart contract about the new result.  \n\n\n---\n\n           /                 \\\n     StoreValue           StoreValue\n```\n\n---\n\n\n1. Each Cosmos SDK module has its own IAVL store\n2. The Merkle proof shows a path from the app hash to the requested value\n```\n\n---\n\n## 41. Reference\n**File:** /root/neutron/docs/developers/modules/interchain-queries/reference.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 46: string path = 1;                       // Store path (e.g., \"bank\", \"staking\")\n- Line 99: string storage_prefix = 1;             // Store name (e.g., \"bank\")\n- Line 347: - `RegisteredQueryKey` - Stores registered queries by ID\n- Line 348: - `RegisteredQueryResultKey` - Stores KV query results by ID\n- Line 349: - `SubmittedTxKey` - Stores submitted TX hashes\n\n**Content Preview:**\n```\nmessage KVKey {\n  string path = 1;                       // Store path (e.g., \"bank\", \"staking\")\n  bytes key = 2;                         // Key bytes\n\n---\n\nmessage StorageValue {\n  string storage_prefix = 1;             // Store name (e.g., \"bank\")\n  bytes key = 2;                         // Key bytes\n\n---\n\n\n- `RegisteredQueryKey` - Stores registered queries by ID\n- `RegisteredQueryResultKey` - Stores KV query results by ID\n```\n\n---\n\n## 42. How-To Guide\n**File:** /root/neutron/docs/developers/modules/tokenfactory/how-to.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 14: neutrond tx tokenfactory create-denom mytoken \\\n- Line 27: neutrond tx tokenfactory create-denom gamecoins \\\n- Line 39: neutrond tx tokenfactory set-denom-metadata \\\n- Line 54: neutrond tx tokenfactory set-denom-metadata \\\n- Line 74: neutrond tx tokenfactory mint \\\n\n**Content Preview:**\n```\n```bash\nneutrond tx tokenfactory create-denom mytoken \\\n  --from creator \\\n\n---\n\n```bash\nneutrond tx tokenfactory create-denom gamecoins \\\n  --from creator \\\n\n---\n\n```bash\nneutrond tx tokenfactory set-denom-metadata \\\n  factory/neutron1abc.../mytoken \\\n```\n\n---\n\n## 43. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 42: <li>Complete CosmWasm contract included</li>\n- Line 55: # Install Rust and wasm-pack for contract development\n- Line 57: rustup target add wasm32-unknown-unknown\n- Line 89: The included CosmWasm contract provides several example functions that demonstrate common patterns:\n\n**Content Preview:**\n```\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n    <ul className=\"mt-2 text-sm\">\n      <li>Complete CosmWasm contract included</li>\n      <li>User state management</li>\n\n---\n\n# Install Node.js (v18 or higher)\n# Install Rust and wasm-pack for contract development\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n---\n\n## 44. Cosmopark Tutorial\n**File:** /root/neutron/docs/developers/tutorials/onboarding/cosmopark.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 126: Access the node using the standard `neutrond` CLI:\n- Line 130: neutrond q bank balances neutron1m9l358xunhhwds0568za49mzhvuxx9ux8xafx2 --node http://localhost:26657\n- Line 195: - Deploy test CosmWasm contracts to Neutron\n\n**Content Preview:**\n```\n\nAccess the node using the standard `neutrond` CLI:\n\n\n---\n\n# Example: Query account balance\nneutrond q bank balances neutron1m9l358xunhhwds0568za49mzhvuxx9ux8xafx2 --node http://localhost:26657\n```\n\n---\n\n\n- Deploy test CosmWasm contracts to Neutron\n- Test IBC transfers between Neutron and Gaia\n```\n\n---\n\n## 45. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 8\n\n**Matching lines:**\n- Line 19: - Familiarity with CosmWasm message patterns\n- Line 47: cosmwasm-std = \"1.0\"\n- Line 58: use cosmwasm_std::{Uint128, Decimal};\n- Line 81: use cosmwasm_std::{Uint128, Decimal};\n- Line 129: use cosmwasm_std::{\n\n**Content Preview:**\n```\n- Basic understanding of the Cosmos SDK\n- Familiarity with CosmWasm message patterns\n\n\n---\n\n[dependencies]\ncosmwasm-std = \"1.0\"\ncw-storage-plus = \"1.0\"\n\n---\n\n```rust\nuse cosmwasm_std::{Uint128, Decimal};\nuse cw_storage_plus::Item;\n```\n\n---\n\n## 46. Harpoon Module\n**File:** /root/neutron/docs/developers/modules/harpoon/overview.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 3: description: \"Subscribe to staking module hooks from CosmWasm smart contracts\"\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks. Its primary purpose is to enable the calculation of historical voting power from the staking module, which is essential for governance systems that rely on historical data at specific block heights.\n- Line 19: The Harpoon module acts as a bridge between the staking module's hooks and CosmWasm smart contracts. When staking-related events occur (such as delegations, unbondings, or validator changes), the module notifies subscribed contracts via `sudo` calls, allowing them to maintain historical records.\n- Line 23: Standard CosmWasm contracts cannot directly query historical staking data. While contracts can query current staking information, they cannot access data from previous block heights. This limitation is particularly problematic for governance systems that need to determine voting power at the time a proposal was created.\n\n**Content Preview:**\n```\ntitle: \"Harpoon Module\"\ndescription: \"Subscribe to staking module hooks from CosmWasm smart contracts\"\n---\n\n---\n\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks. Its primary purpose is to enable the calculation of historical voting power from the staking module, which is essential for governance systems that rely on historical data at specific block heights.\n\n\n---\n\n\nThe Harpoon module acts as a bridge between the staking module's hooks and CosmWasm smart contracts. When staking-related events occur (such as delegations, unbondings, or validator changes), the module notifies subscribed contracts via `sudo` calls, allowing them to maintain historical records.\n\n```\n\n---\n\n## 47. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 152: Create handler functions in the `src/mappings/` directory to process blockchain data and store it according to your schema:\n- Line 291: type: 'wasm',\n\n**Content Preview:**\n```\n\nCreate handler functions in the `src/mappings/` directory to process blockchain data and store it according to your schema:\n\n\n---\n\n  filter: {\n    type: 'wasm',\n    messageFilter: {\n```\n\n---\n\n## 48. Running a Node\n**File:** /root/neutron/docs/operators/running-a-node.mdx\n**Section:** operators\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 84: wget https://github.com/neutron-org/neutron/releases/download/v6.0.2/neutrond-linux-amd64\n- Line 85: chmod +x neutrond-linux-amd64\n- Line 86: sudo mv neutrond-linux-amd64 /usr/local/bin/neutrond\n- Line 93: neutrond init [your-moniker] --chain-id neutron-1\n- Line 104: wget -O $HOME/.neutrond/config/genesis.json https://snapshots.kjnodes.com/neutron/genesis.json\n\n**Content Preview:**\n```\n        ```bash\n        wget https://github.com/neutron-org/neutron/releases/download/v6.0.2/neutrond-linux-amd64\n        chmod +x neutrond-linux-amd64\n\n---\n\n        wget https://github.com/neutron-org/neutron/releases/download/v6.0.2/neutrond-linux-amd64\n        chmod +x neutrond-linux-amd64\n        sudo mv neutrond-linux-amd64 /usr/local/bin/neutrond\n\n---\n\n        chmod +x neutrond-linux-amd64\n        sudo mv neutrond-linux-amd64 /usr/local/bin/neutrond\n        ```\n```\n\n---\n\n## 49. Neutron DAO Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-dao.mdx\n**Section:** resources\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 76: To interact with the DAO, you can use the [Neutron DAO UI](https://dao.neutron.org/) or interact directly with the contracts using the `neutrond` CLI.\n- Line 82: neutrond query wasm contract-state smart neutron1suhgf5svhu4usrurvxzlgn54ksxmn8gljarjtxqnapv8kjnp4nrstdxvff '{\"config\":{}}'\n- Line 85: neutrond query wasm contract-state smart neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh '{\"list_proposals\":{\"limit\":10}}'\n\n**Content Preview:**\n```\n\nTo interact with the DAO, you can use the [Neutron DAO UI](https://dao.neutron.org/) or interact directly with the contracts using the `neutrond` CLI.\n\n\n---\n\n# Query DAO config\nneutrond query wasm contract-state smart neutron1suhgf5svhu4usrurvxzlgn54ksxmn8gljarjtxqnapv8kjnp4nrstdxvff '{\"config\":{}}'\n\n\n---\n\n# Query active proposals\nneutrond query wasm contract-state smart neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh '{\"list_proposals\":{\"limit\":10}}'\n```\n```\n\n---\n\n## 50. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 69: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n- Line 73: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n- Line 77: neutrond tx wasm execute neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n\n**Content Preview:**\n```\n# Query vesting info\nneutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n'{\"vesting_info\":{\"address\":\"your-neutron-address\"}}'\n\n---\n\n# Check claimable amount\nneutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n'{\"claimable\":{\"address\":\"your-neutron-address\"}}'\n\n---\n\n# Claim vested tokens\nneutrond tx wasm execute neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n'{\"claim\":{}}' \\\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "d5e25c07-a1eb-4770-bbd1-1785eca679a7",
            "tool_call_id": "call_ciUZxN4LGe7ouMJsQ4z98kVD",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "{\n  \"Upload CosmWasm contract to Neutron\":\"100\",\n  \"Instantiate smart contract on Neutron\":\"98\",\n  \"Execute contract message\":\"96\",\n  \"Query contract smart state\":\"95\",\n  \"Migrate contract to new code\":\"94\",\n  \"Register Interchain Query from contract\":\"93\",\n  \"Register Interchain Account via CosmWasm\":\"92\",\n  \"Schedule automated contract execution with Cron\":\"91\",\n  \"Resubmit failed IBC sudo using Contract Manager\":\"90\",\n  \"Handle IBC acknowledgment in contract\":\"89\",\n  \"Store IBC fees using Fee Refunder\":\"88\",\n  \"Create DAO proposal via contract execute\":\"87\",\n  \"Vote on DAO proposal via CLI\":\"86\",\n  \"Deploy minimal counter contract\":\"85\",\n  \"Run local Neutron node for testing\":\"84\",\n  \"Run integration tests with cw-multi-test\":\"83\",\n  \"Set global minimum fees\":\"82\",\n  \"Query burned fees\":\"81\",\n  \"Create token factory denom\":\"80\",\n  \"Mint tokenfactory tokens\":\"79\",\n  \"Set token metadata\":\"78\",\n  \"Add IBC rate limit path\":\"77\",\n  \"Query rate limit quotas\":\"76\",\n  \"Add Harpoon staking hook subscription\":\"75\",\n  \"Query subscribed contracts in Harpoon\":\"74\",\n  \"Submit interchain transaction\":\"73\",\n  \"Query ICQ results from chain\":\"72\",\n  \"Execute DEX deposit\":\"71\",\n  \"Execute DEX withdrawal\":\"70\",\n  \"Execute DEX swap\":\"69\",\n  \"Query TickLiquidity\":\"68\",\n  \"Deploy bridge contracts info\":\"67\",\n  \"Claim vesting tokens\":\"66\",\n  \"Query vesting info\":\"65\",\n  \"Claim TGE airdrop\":\"64\",\n  \"Query DAO config\":\"63\",\n  \"List DAO proposals\":\"62\",\n  \"Start IBC relayer with Hermes\":\"61\",\n  \"Start ICQ relayer\":\"60\",\n  \"Setup validator node\":\"59\",\n  \"Query cron schedule\":\"58\",\n  \"Remove cron schedule via governance\":\"57\",\n  \"Query contractmanager failures\":\"56\",\n  \"Set dynamic fee oracle price\":\"55\",\n  \"Query dynamic fee params\":\"54\",\n  \"Generate SubQuery project\":\"53\",\n  \"Index contract events with SubQuery\":\"52\",\n  \"Query interchain-queries params\":\"51\",\n  \"Query interchaintxs params\":\"50\",\n  \"Query tokenfactory admin\":\"49\",\n  \"Renounce tokenfactory admin\":\"48\",\n  \"Configure fee granter for transfers\":\"47\",\n  \"Query global fee params\":\"46\",\n  \"Burn collected fees\":\"45\",\n  \"Query dex pool reserves\":\"44\",\n  \"Query ibc channel end\":\"43\",\n  \"Query staking delegations\":\"42\",\n  \"Set Cron execution stage\":\"41\",\n  \"Read module explanation docs\":\"40\",\n  \"Access NeutronTemplate dApp\":\"39\"\n}",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 2346,
                    "prompt_tokens": 36410,
                    "total_tokens": 38756,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 1728,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 20224
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CFXpNu5cc36g3wrXBchdjhLdGol",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--86637a03-1c56-48c0-9bda-863056eab951-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 36410,
                "output_tokens": 2346,
                "total_tokens": 38756,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 20224
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 1728
                }
            }
        }
    ]
}