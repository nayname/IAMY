{"cargo_generate": {"count": 1, "descriptions": ["Generate new CosmWasm project from template using cargo-generate with cw-template"]}, "project_initializer": {"count": 2, "descriptions": ["Initialize project structure with proper Cargo.toml configuration for CosmWasm development", "Initialize new CosmWasm project for airdrop functionality"]}, "neutron_sdk_setup": {"count": 1, "descriptions": ["Add Neutron SDK dependencies for interacting with Neutron-specific modules"]}, "cosmwasm_template": {"count": 1, "descriptions": ["Use CosmWasm template to generate basic contract structure with entry points"]}, "test_generator": {"count": 1, "descriptions": ["Create sample unit tests and integration tests for contract functionality"]}, "neutron_contract_setup": {"count": 1, "descriptions": ["Configure contract for Neutron-specific features like ICQ and ICA"]}, "cargo_workspace": {"count": 1, "descriptions": ["Create Cargo workspace configuration for multiple contracts"]}, "project_structure": {"count": 1, "descriptions": ["Set up directory structure for multiple related contracts"]}, "shared_dependencies": {"count": 1, "descriptions": ["Configure shared dependencies and common libraries across contracts"]}, "project_bootstrap": {"count": 1, "descriptions": ["Initialize new CosmWasm project with Neutron configuration"]}, "network_configurator": {"count": 1, "descriptions": ["Set up mainnet RPC endpoints, chain-id, and network parameters"]}, "deployment_config": {"count": 1, "descriptions": ["Configure deployment scripts for mainnet deployment"]}, "template_cloner": {"count": 1, "descriptions": ["Clone CosmWasm template repository to specified directory"]}, "ide_launcher": {"count": 1, "descriptions": ["Open project in VS Code with proper workspace configuration"]}, "extension_setup": {"count": 1, "descriptions": ["Configure VS Code extensions for Rust and CosmWasm development"]}, "project_generator": {"count": 1, "descriptions": ["Generate new CosmWasm project with CI/CD configuration"]}, "ci_pipeline_setup": {"count": 1, "descriptions": ["Set up GitHub Actions or similar CI pipeline for testing and deployment"]}, "automated_testing": {"count": 1, "descriptions": ["Configure automated contract testing and optimization workflows"]}, "project_creator": {"count": 1, "descriptions": ["Create new CosmWasm project with comprehensive dependency setup"]}, "dependency_installer": {"count": 1, "descriptions": ["Install all required Rust, CosmWasm, and Neutron dependencies"]}, "development_environment": {"count": 1, "descriptions": ["Set up complete development environment with all tools"]}, "project_cleaner": {"count": 1, "descriptions": ["Remove existing build artifacts and clean project directory"]}, "fresh_bootstrap": {"count": 1, "descriptions": ["Re-initialize project from template with clean state"]}, "build_optimizer": {"count": 1, "descriptions": ["Set up optimized build configuration for fresh start"]}, "demo_project_generator": {"count": 1, "descriptions": ["Create demo CosmWasm project with example functionality"]}, "sample_data_generator": {"count": 1, "descriptions": ["Generate sample instantiate messages and test data"]}, "documentation_creator": {"count": 1, "descriptions": ["Create documentation and examples for demo usage"]}, "docker_compose_setup": {"count": 1, "descriptions": ["Set up Docker Compose configuration for local blockchain testing"]}, "cosmopark_integration": {"count": 1, "descriptions": ["Configure integration with Cosmopark for multi-chain testing environment"]}, "create_airdrop_project": {"count": 1, "descriptions": ["Initialize a new airdrop smart contract project using Neutron templates and CosmWasm structure"]}, "setup_docker_compose": {"count": 1, "descriptions": ["Create Docker Compose configuration for local Neutron testing environment with Cosmopark"]}, "cargo_fmt_runner": {"count": 1, "descriptions": ["Execute cargo fmt command across the entire Rust workspace to format all source files"]}, "rustfmt_config_manager": {"count": 1, "descriptions": ["Manage rustfmt configuration settings and apply consistent formatting rules"]}, "workspace_formatter": {"count": 1, "descriptions": ["Run cargo fmt --all to format all crates and packages in the workspace"]}, "format_validator": {"count": 1, "descriptions": ["Validate that all files conform to Rust formatting standards after formatting"]}, "style_analyzer": {"count": 1, "descriptions": ["Analyze current code style and identify formatting inconsistencies"]}, "comprehensive_formatter": {"count": 1, "descriptions": ["Apply rustfmt with custom configuration for consistent code style"]}, "crate_discoverer": {"count": 1, "descriptions": ["Discover all Rust crates in the repository structure"]}, "multi_crate_formatter": {"count": 1, "descriptions": ["Apply rustfmt to each discovered crate individually"]}, "standard_enforcer": {"count": 1, "descriptions": ["Enforce Rust standard formatting rules across the entire codebase"]}, "compliance_checker": {"count": 1, "descriptions": ["Verify that all code follows Rust formatting standards"]}, "cosmwasm_formatter": {"count": 1, "descriptions": ["Format CosmWasm-specific Rust code with appropriate styling for smart contracts"]}, "contract_style_optimizer": {"count": 1, "descriptions": ["Optimize code style specifically for CosmWasm contract readability"]}, "consistency_formatter": {"count": 1, "descriptions": ["Execute cargo fmt --all to ensure consistent formatting across all workspace members"]}, "uniformity_validator": {"count": 1, "descriptions": ["Validate that formatting is uniform across all project files"]}, "issue_detector": {"count": 1, "descriptions": ["Detect and identify specific formatting issues in Rust source files"]}, "automatic_fixer": {"count": 1, "descriptions": ["Automatically fix detected formatting issues using rustfmt"]}, "pre_commit_formatter": {"count": 1, "descriptions": ["Format all staged Rust files before committing to version control"]}, "commit_style_validator": {"count": 1, "descriptions": ["Ensure code meets formatting standards before allowing commit"]}, "in_place_formatter": {"count": 1, "descriptions": ["Format all Rust files in the project directory structure in place"]}, "backup_manager": {"count": 1, "descriptions": ["Create backups before in-place formatting and provide rollback capability"]}, "query_bank_balance_cli": {"count": 1, "descriptions": ["Query NTRN token balance using neutrond CLI with specific address and denom parameters"]}, "query_bank_balance_rest": {"count": 1, "descriptions": ["Query balance via REST API endpoint using HTTP GET request to /cosmos/bank/v1beta1/balances/{address}"]}, "query_bank_balance_grpc": {"count": 1, "descriptions": ["Query balance using gRPC client connection to cosmos.bank.v1beta1.Query/Balance"]}, "parse_address_validation": {"count": 1, "descriptions": ["Validate neutron address format and ensure it follows bech32 neutron prefix standards"]}, "query_all_balances_cli": {"count": 1, "descriptions": ["Query all token balances for the dev wallet address using neutrond query bank balances command"]}, "query_all_balances_rest": {"count": 1, "descriptions": ["Retrieve all balances via REST API endpoint /cosmos/bank/v1beta1/balances/{address}"]}, "query_all_balances_grpc": {"count": 1, "descriptions": ["Query all balances using gRPC AllBalances method"]}, "format_balance_display": {"count": 2, "descriptions": ["Format and display multiple token denominations including NTRN, IBC tokens, and TokenFactory denoms", "Format and display balance information in human-readable format with token symbols"]}, "query_bank_balances": {"count": 2, "descriptions": ["Query bank module balances for the specified neutron address", "Query all token balances for a specific Neutron address using the bank module's balances endpoint"]}, "query_balance_by_denom": {"count": 1, "descriptions": ["Query balance for specific denominations including untrn, IBC tokens, and factory tokens"]}, "validate_neutron_address": {"count": 1, "descriptions": ["Validate the neutron address format and checksum"]}, "format_balance_response": {"count": 1, "descriptions": ["Format balance response with proper denomination labels and decimal places"]}, "query_untrn_balance": {"count": 1, "descriptions": ["Query specific untrn (micro-NTRN) balance using --denom=untrn parameter"]}, "query_bank_balance_specific": {"count": 1, "descriptions": ["Query bank balance for validator payout account with untrn denomination filter"]}, "convert_untrn_to_ntrn": {"count": 1, "descriptions": ["Convert micro-NTRN (untrn) to NTRN display format with proper decimal conversion"]}, "validate_validator_address": {"count": 1, "descriptions": ["Validate that the address corresponds to a validator payout account"]}, "query_contract_balances": {"count": 1, "descriptions": ["Query all token balances held by the smart contract address"]}, "query_bank_all_balances": {"count": 1, "descriptions": ["Retrieve all denominations and amounts for the contract address"]}, "identify_token_types": {"count": 1, "descriptions": ["Identify and categorize different token types (native NTRN, IBC tokens, TokenFactory tokens)"]}, "format_contract_balance": {"count": 1, "descriptions": ["Format balance display specifically for smart contract addresses"]}, "query_untrn_precise": {"count": 1, "descriptions": ["Query exact untrn balance without decimal conversion for precise micro-NTRN amounts"]}, "query_bank_balance_raw": {"count": 1, "descriptions": ["Get raw balance data in base denomination (untrn) without formatting"]}, "validate_address_format": {"count": 2, "descriptions": ["Validate neutron address format and ensure proper bech32 encoding", "Validate that the provided address is a valid Neutron address"]}, "return_precise_amount": {"count": 1, "descriptions": ["Return exact micro-NTRN amount as integer without decimal conversion"]}, "query_multisig_balances": {"count": 1, "descriptions": ["Query all token balances for multisig treasury address"]}, "query_treasury_funds": {"count": 1, "descriptions": ["Retrieve comprehensive balance information for treasury management"]}, "categorize_treasury_assets": {"count": 1, "descriptions": ["Categorize different asset types held in treasury (NTRN, IBC tokens, etc.)"]}, "format_treasury_report": {"count": 1, "descriptions": ["Format balance information suitable for treasury reporting and management"]}, "query_deployment_funds": {"count": 1, "descriptions": ["Query available funds for contract deployment account"]}, "check_gas_funds": {"count": 1, "descriptions": ["Verify sufficient NTRN balance for deployment gas fees"]}, "query_all_available_assets": {"count": 1, "descriptions": ["Check all available token types and amounts for deployment"]}, "estimate_deployment_costs": {"count": 1, "descriptions": ["Compare available funds against estimated deployment costs"]}, "query_grpc_balances": {"count": 1, "descriptions": ["Query token balances using gRPC connection to main Neutron node"]}, "connect_grpc_endpoint": {"count": 1, "descriptions": ["Establish gRPC connection to main Neutron network endpoint"]}, "query_airdrop_balances": {"count": 1, "descriptions": ["Query balances for airdrop destination address"]}, "format_grpc_response": {"count": 1, "descriptions": ["Format gRPC query response for token holdings display"]}, "query_default_endpoint": {"count": 1, "descriptions": ["Query balance using default Neutron RPC/REST endpoint configuration"]}, "query_cold_storage_balance": {"count": 1, "descriptions": ["Retrieve balance information for cold storage security address"]}, "use_default_neutron_config": {"count": 1, "descriptions": ["Connect to default Neutron network endpoints for balance queries"]}, "secure_balance_query": {"count": 1, "descriptions": ["Perform balance query suitable for cold storage address verification"]}, "query_bank_balance_by_denom": {"count": 1, "descriptions": ["Query balance for a specific token denomination at a given address"]}, "query_ibc_denoms": {"count": 1, "descriptions": ["Retrieve information about IBC token denominations available on Neutron"]}, "query_tokenfactory_denoms": {"count": 1, "descriptions": ["Query TokenFactory-created denominations and their metadata"]}, "query_all_balances": {"count": 1, "descriptions": ["Retrieve complete list of all token balances including native, IBC, and TokenFactory tokens"]}, "query_ibc_balances": {"count": 1, "descriptions": ["Specifically query IBC token balances using IBC denomination format"]}, "enumerate_all_coins": {"count": 1, "descriptions": ["List all coin denominations and their amounts held by the address"]}, "get_token_metadata": {"count": 1, "descriptions": ["Retrieve token metadata including symbols, decimals, and descriptions"]}, "calculate_total_value": {"count": 1, "descriptions": ["Calculate total portfolio value if price data is available"]}, "categorize_assets": {"count": 1, "descriptions": ["Categorize assets by type (native, IBC, TokenFactory, etc.)"]}, "get_asset_details": {"count": 1, "descriptions": ["Retrieve detailed information about each asset including origin chain"]}, "format_asset_breakdown": {"count": 1, "descriptions": ["Present assets in organized categories with full details"]}, "fetch_all_denominations": {"count": 1, "descriptions": ["Retrieve all token denominations held by the address"]}, "resolve_denom_names": {"count": 1, "descriptions": ["Convert denomination strings to human-readable token names"]}, "display_denom_balances": {"count": 1, "descriptions": ["Show balance for each denomination with proper formatting"]}, "generate_balance_sheet": {"count": 1, "descriptions": ["Create comprehensive balance sheet view of all holdings"]}, "include_staking_balances": {"count": 1, "descriptions": ["Include staked tokens and delegation information"]}, "show_liquid_vs_locked": {"count": 1, "descriptions": ["Differentiate between liquid and locked/vested tokens"]}, "query_held_denominations": {"count": 1, "descriptions": ["Query all denominations with non-zero balances"]}, "get_denomination_info": {"count": 1, "descriptions": ["Retrieve information about each denomination including metadata"]}, "list_denomination_sources": {"count": 1, "descriptions": ["Show origin information for IBC and TokenFactory tokens"]}, "count_tokens_by_type": {"count": 1, "descriptions": ["Count and categorize tokens by type (native, IBC, TokenFactory)"]}, "get_token_amounts": {"count": 1, "descriptions": ["Retrieve specific amounts for each token type"]}, "summarize_holdings": {"count": 1, "descriptions": ["Provide summary statistics of token holdings"]}, "query_bank_module": {"count": 1, "descriptions": ["Query the bank module for all balances"]}, "format_bank_display": {"count": 1, "descriptions": ["Format bank balances in user-friendly display format"]}, "include_fee_tokens": {"count": 1, "descriptions": ["Identify which tokens can be used for transaction fees"]}, "retrieve_complete_balances": {"count": 1, "descriptions": ["Retrieve comprehensive list of all token balances"]}, "parse_balance_data": {"count": 1, "descriptions": ["Parse and structure balance data for presentation"]}, "bank_send": {"count": 4, "descriptions": ["Send native NTRN tokens from one address to another using the bank module", "Transfer USDC tokens (likely axlUSDC IBC denom) to specified address", "Execute NTRN transfer using bank module", "Transfer NTRN tokens using bank module"]}, "wallet_balance_check": {"count": 1, "descriptions": ["Query wallet balance to ensure sufficient funds before transfer"]}, "transaction_fee_calculator": {"count": 1, "descriptions": ["Calculate appropriate gas fees for the transaction"]}, "address_validator": {"count": 3, "descriptions": ["Validate the recipient address format and checksum", "Validate both recipient addresses", "Validate Neutron addresses for sender and recipient"]}, "ibc_transfer": {"count": 2, "descriptions": ["Execute IBC transfer of ATOM tokens to Cosmos Hub using IBC channels", "Transfer stkATOM tokens (likely IBC denomination)"]}, "balance_checker": {"count": 3, "descriptions": ["Verify sufficient ATOM balance in wallet", "Verify sufficient stkATOM balance", "Verify sufficient USDT balance for total distribution"]}, "ibc_channel_resolver": {"count": 1, "descriptions": ["Determine correct IBC channel for Cosmos Hub transfers"]}, "gas_estimator": {"count": 4, "descriptions": ["Calculate gas fees for IBC transfer transaction", "Estimate gas requirements for the store transaction", "Use automatic gas estimation for the transaction", "Estimate gas requirements for contract execution transactions"]}, "balance_validator": {"count": 2, "descriptions": ["Check available USDC balance before transfer", "Check available bridged ETH balance"]}, "address_formatter": {"count": 1, "descriptions": ["Ensure cold storage address is properly formatted"]}, "fee_calculator": {"count": 1, "descriptions": ["Calculate transaction fees for USDC transfer"]}, "balance_query": {"count": 1, "descriptions": ["Query total wBTC balance to determine transfer amount"]}, "cross_chain_bridge": {"count": 1, "descriptions": ["Bridge wBTC to Bitcoin network (if supported)"]}, "gas_default_setter": {"count": 1, "descriptions": ["Use default gas settings for the transaction"]}, "address_converter": {"count": 1, "descriptions": ["Handle Bitcoin address format conversion if needed"]}, "ledger_signer": {"count": 2, "descriptions": ["Interface with Ledger hardware wallet for transaction signing", "Use Ledger hardware wallet for transaction signing"]}, "address_book": {"count": 1, "descriptions": ["Resolve 'Alice's Neutron wallet' to actual neutron address"]}, "transaction_builder": {"count": 3, "descriptions": ["Construct transaction for Ledger signing", "Build and format contract execution message", "Build contract execution messages with custom gas settings"]}, "rpc_connector": {"count": 1, "descriptions": ["Connect to public RPC node for transaction broadcast"]}, "transaction_broadcaster": {"count": 10, "descriptions": ["Broadcast transaction via public RPC endpoint", "Broadcast the store transaction to the Neutron network", "Submit the store transaction with default gas parameters", "Submit store transaction through the gRPC connection", "Submit the store transaction to Neutron", "Submit the deployment transaction to the network", "Submit the store transaction to the testnet", "Submit the store transaction with auto gas settings", "Submit the publish transaction to the blockchain", "Submit the upload transaction to Neutron"]}, "bridge_transfer": {"count": 1, "descriptions": ["Handle bridged ETH transfer (likely axlWETH)"]}, "gas_optimizer": {"count": 1, "descriptions": ["Set low gas prices for cost-effective transaction"]}, "contact_resolver": {"count": 1, "descriptions": ["Resolve 'Bob' to actual wallet address"]}, "multisig_transfer": {"count": 1, "descriptions": ["Execute transfer to multisig treasury address"]}, "hot_key_signer": {"count": 1, "descriptions": ["Sign transaction using hot key (non-hardware wallet)"]}, "multisig_address_resolver": {"count": 1, "descriptions": ["Resolve treasury multisig address"]}, "batch_transfer": {"count": 1, "descriptions": ["Execute multiple transfers in single transaction"]}, "bank_multi_send": {"count": 1, "descriptions": ["Send USDT to multiple recipients simultaneously"]}, "balance_query_all": {"count": 1, "descriptions": ["Query all token balances in the faucet account"]}, "multi_denom_transfer": {"count": 1, "descriptions": ["Transfer all different token types to destination"]}, "account_cleaner": {"count": 1, "descriptions": ["Ensure account is completely emptied of all assets"]}, "testnet_token_handler": {"count": 1, "descriptions": ["Handle various testnet token denominations"]}, "cargo_wasm_build": {"count": 1, "descriptions": ["Compile the Rust smart contract to WebAssembly using 'cargo wasm' command"]}, "docker_optimizer": {"count": 1, "descriptions": ["Run the CosmWasm Rust optimizer using Docker to produce optimized .wasm binary for deployment"]}, "artifact_retrieval": {"count": 1, "descriptions": ["Locate and retrieve the optimized .wasm file from the artifacts directory"]}, "cargo_build_target": {"count": 1, "descriptions": ["Build the contract for arm64 architecture using cargo with specific target flags"]}, "rust_optimizer_arm64": {"count": 1, "descriptions": ["Use CosmWasm rust-optimizer with arm64 support for cross-platform optimization"]}, "binary_verification": {"count": 1, "descriptions": ["Verify the built binary is correctly compiled for arm64 architecture"]}, "cargo_build_x86": {"count": 1, "descriptions": ["Build the contract for x86_64 architecture using cargo with appropriate target"]}, "rust_optimizer_x86": {"count": 1, "descriptions": ["Use CosmWasm rust-optimizer for x86_64 optimization"]}, "cross_compilation": {"count": 1, "descriptions": ["Handle cross-compilation settings for non-arm64 target architectures"]}, "docker_rust_optimizer": {"count": 1, "descriptions": ["Execute cosmwasm/rust-optimizer Docker container to optimize the contract"]}, "volume_mounting": {"count": 1, "descriptions": ["Mount project directory and cache volumes for Docker optimization process"]}, "deployment_artifact": {"count": 1, "descriptions": ["Generate deployment-ready optimized .wasm file in artifacts directory"]}, "workspace_builder": {"count": 1, "descriptions": ["Build all contracts in the workspace using cargo workspace commands"]}, "batch_optimizer": {"count": 1, "descriptions": ["Run optimization process on multiple contracts in the contracts directory"]}, "binary_listing": {"count": 1, "descriptions": ["List and display all generated optimized .wasm binaries with their locations"]}, "contract_compiler": {"count": 1, "descriptions": ["Compile the specific crowdfunding contract using cargo wasm"]}, "wasm_optimizer": {"count": 1, "descriptions": ["Apply CosmWasm optimization to reduce binary size and gas costs"]}, "contract_validator": {"count": 1, "descriptions": ["Validate the optimized contract meets deployment requirements"]}, "build_pipeline": {"count": 1, "descriptions": ["Run complete build pipeline from source compilation to optimization"]}, "neutron_preparation": {"count": 1, "descriptions": ["Prepare contract for Neutron network deployment with proper configurations"]}, "upload_readiness": {"count": 1, "descriptions": ["Ensure contract is ready for upload to Neutron with correct format and size"]}, "project_compiler": {"count": 1, "descriptions": ["Compile the current CosmWasm project using cargo build tools"]}, "wasm_optimization": {"count": 1, "descriptions": ["Optimize the compiled WebAssembly for production deployment"]}, "final_output": {"count": 1, "descriptions": ["Generate and locate the final optimized .wasm file for deployment"]}, "workspace_optimizer": {"count": 1, "descriptions": ["Use CosmWasm workspace-optimizer for multi-contract optimization"]}, "build_execution": {"count": 1, "descriptions": ["Execute the optimization process across the entire workspace"]}, "binary_location": {"count": 1, "descriptions": ["Identify and report the location of generated optimized binaries"]}, "production_compiler": {"count": 1, "descriptions": ["Compile auction contract with production-ready settings and optimizations"]}, "size_optimizer": {"count": 1, "descriptions": ["Apply aggressive size optimization techniques for minimal binary size"]}, "production_validator": {"count": 1, "descriptions": ["Validate contract meets production deployment standards for Neutron"]}, "cargo_test_runner": {"count": 3, "descriptions": ["Execute cargo test command to run all unit and integration tests for the specified contract", "Execute cargo test command for auction contract validation", "Run cargo test with verbose output for detailed results"]}, "test_environment_setup": {"count": 1, "descriptions": ["Initialize testing environment with mock dependencies and test fixtures"]}, "contract_test_validator": {"count": 1, "descriptions": ["Validate test results and ensure all test cases pass successfully"]}, "test_coverage_analyzer": {"count": 1, "descriptions": ["Generate test coverage reports and identify untested code paths"]}, "cargo_test_executor": {"count": 4, "descriptions": ["Run cargo test command specifically for the nft_marketplace contract module", "Execute all tests to ensure they pass", "Run cargo test command and capture results", "Run cargo test and monitor for failures"]}, "rust_test_framework": {"count": 1, "descriptions": ["Utilize Rust's built-in testing framework for contract validation"]}, "cosmwasm_test_runner": {"count": 1, "descriptions": ["Execute CosmWasm-specific tests using mock dependencies and test utilities"]}, "test_output_formatter": {"count": 1, "descriptions": ["Format and display test results in a readable format"]}, "vesting_test_suite": {"count": 1, "descriptions": ["Execute comprehensive test suite for vesting contract functionality"]}, "cargo_test_launcher": {"count": 1, "descriptions": ["Launch cargo test with appropriate flags and configurations"]}, "mock_environment_setup": {"count": 1, "descriptions": ["Set up mock blockchain environment for testing vesting logic"]}, "test_result_reporter": {"count": 1, "descriptions": ["Generate detailed test reports and identify any failures"]}, "unit_test_runner": {"count": 1, "descriptions": ["Execute unit tests for individual functions and components"]}, "integration_test_executor": {"count": 1, "descriptions": ["Run integration tests that test component interactions"]}, "cargo_test_manager": {"count": 1, "descriptions": ["Manage and coordinate different types of test execution"]}, "test_suite_orchestrator": {"count": 1, "descriptions": ["Orchestrate both unit and integration test execution in sequence"]}, "auction_test_validator": {"count": 1, "descriptions": ["Validate auction contract against its specifications"]}, "spec_compliance_checker": {"count": 1, "descriptions": ["Verify contract behavior matches defined specifications"]}, "test_assertion_validator": {"count": 1, "descriptions": ["Validate all test assertions and ensure spec compliance"]}, "cosmwasm_test_executor": {"count": 1, "descriptions": ["Execute CosmWasm-specific tests for staking rewards contract"]}, "test_output_displayer": {"count": 1, "descriptions": ["Capture and display comprehensive test output and results"]}, "staking_test_validator": {"count": 1, "descriptions": ["Validate staking rewards logic and contract behavior"]}, "cargo_build_validator": {"count": 1, "descriptions": ["Verify contract compiles successfully without errors"]}, "build_test_orchestrator": {"count": 1, "descriptions": ["Coordinate both build verification and test execution"]}, "cw721_test_suite": {"count": 1, "descriptions": ["Run CW721-specific test suite for NFT contract validation"]}, "oracle_test_runner": {"count": 1, "descriptions": ["Execute tests specific to oracle adapter functionality"]}, "test_result_collector": {"count": 1, "descriptions": ["Collect and format test results for return"]}, "oracle_integration_tester": {"count": 1, "descriptions": ["Test oracle integration and data feed functionality"]}, "test_suite_launcher": {"count": 1, "descriptions": ["Launch comprehensive test suite for commission sales contract"]}, "cargo_test_orchestrator": {"count": 1, "descriptions": ["Orchestrate execution of all test categories"]}, "commission_test_validator": {"count": 1, "descriptions": ["Validate commission calculation and sales logic"]}, "full_test_suite_runner": {"count": 1, "descriptions": ["Execute complete test suite including edge cases"]}, "multi_sig_test_runner": {"count": 1, "descriptions": ["Execute multi-signature wallet specific tests"]}, "failure_reporter": {"count": 1, "descriptions": ["Identify, collect, and report any test failures with details"]}, "multi_sig_validator": {"count": 1, "descriptions": ["Validate multi-signature logic and security requirements"]}, "wasm_store": {"count": 9, "descriptions": ["Store a WASM contract binary on Neutron blockchain and return the assigned code ID", "Store a WASM contract binary on Neutron blockchain using default gas settings", "Store WASM contract binary via specified gRPC endpoint", "Store the optimized WASM binary and retrieve the assigned code ID", "Upload contract binary to Neutron using the default signing key", "Store the rebuilt staking contract on Neutron testnet", "Store WASM contract with automatic gas estimation using specified signer", "Publish WASM contract to Neutron blockchain and return code ID", "Upload the treasury contract binary to Neutron"]}, "file_reader": {"count": 10, "descriptions": ["Read the WASM binary file from the specified path", "Read the compiled WASM binary from the target directory", "Read the auction.wasm binary file", "Read the optimized WASM file from the build directory", "Read the contract binary from the release directory", "Access the launchpad.wasm file from the contracts directory", "Read the updated staking.wasm binary file", "Read the IBC bridge contract from the out directory", "Read the marketplace contract from the temporary directory", "Read the treasury.wasm file from the release directory"]}, "code_id_extractor": {"count": 4, "descriptions": ["Extract and return the code ID from the transaction response", "Parse and return the code ID from the transaction result", "Extract and display the code ID from the command output", "Extract and return the assigned code ID"]}, "network_selector": {"count": 2, "descriptions": ["Configure connection to Neutron mainnet", "Configure connection to Neutron test-1 testnet"]}, "grpc_client": {"count": 2, "descriptions": ["Connect to the specified Neutron gRPC node endpoint", "Connect to Neutron gRPC endpoint for transaction submission"]}, "response_formatter": {"count": 2, "descriptions": ["Format the response to clearly display the resulting code ID", "Present the code ID in a clear format"]}, "signer_manager": {"count": 2, "descriptions": ["Use the default configured signer for transaction signing", "Use the 'alice' signing key for transaction authorization"]}, "neutrond_cli": {"count": 1, "descriptions": ["Execute neutrond tx wasm store command with the specified contract file"]}, "transaction_monitor": {"count": 2, "descriptions": ["Monitor the transaction execution and completion", "Monitor transaction status and wait for confirmation"]}, "result_formatter": {"count": 1, "descriptions": ["Format and present the final code ID result"]}, "success_validator": {"count": 1, "descriptions": ["Verify and confirm successful transaction completion"]}, "notification_sender": {"count": 1, "descriptions": ["Provide confirmation notification once upload is successful"]}, "execute_contract": {"count": 3, "descriptions": ["Execute a smart contract method with specified parameters on Neutron blockchain", "Execute withdrawal method on vault contract with specified amount", "Execute claim_rewards method on liquidity provider contract"]}, "rpc_client": {"count": 1, "descriptions": ["Connect to Neutron RPC endpoint for transaction broadcasting"]}, "transaction_signer": {"count": 1, "descriptions": ["Sign transactions using wallet credentials or key management"]}, "gas_auto_estimator": {"count": 2, "descriptions": ["Automatically estimate optimal gas for withdrawal transactions", "Automatically estimate gas for burn transactions"]}, "wallet_signer": {"count": 1, "descriptions": ["Use default wallet signer for transaction authentication"]}, "amount_converter": {"count": 1, "descriptions": ["Convert NTRN amounts to proper denomination (untrn)"]}, "gas_limiter": {"count": 2, "descriptions": ["Set specific gas limit for transaction execution", "Set specific gas limits for oracle transactions"]}, "reward_claimer": {"count": 1, "descriptions": ["Handle LP reward claiming operations"]}, "cw20_executor": {"count": 1, "descriptions": ["Execute CW-20 token contract methods for transfers"]}, "token_transfer": {"count": 1, "descriptions": ["Handle token transfer operations with amount and recipient validation"]}, "amount_formatter": {"count": 2, "descriptions": ["Format token amounts according to CW-20 standards", "Format approval amounts according to token decimals"]}, "staking_executor": {"count": 1, "descriptions": ["Execute staking contract delegation methods"]}, "validator_resolver": {"count": 1, "descriptions": ["Resolve and validate validator addresses"]}, "amount_validator": {"count": 1, "descriptions": ["Validate staking amounts and denominations"]}, "delegation_manager": {"count": 1, "descriptions": ["Handle delegation operations and state tracking"]}, "cw20_approver": {"count": 1, "descriptions": ["Execute CW-20 token approval operations"]}, "dex_router_interface": {"count": 1, "descriptions": ["Interface with DEX router contracts for approvals"]}, "allowance_manager": {"count": 1, "descriptions": ["Manage token allowances and spending limits"]}, "cw20_burner": {"count": 1, "descriptions": ["Execute token burn operations on CW-20 contracts"]}, "burn_validator": {"count": 1, "descriptions": ["Validate burn amounts and permissions"]}, "governance_executor": {"count": 1, "descriptions": ["Execute governance contract voting methods"]}, "proposal_resolver": {"count": 1, "descriptions": ["Resolve proposal IDs and validate voting options"]}, "vote_formatter": {"count": 1, "descriptions": ["Format voting messages according to governance standards"]}, "dao_interface": {"count": 1, "descriptions": ["Interface with Neutron DAO governance contracts"]}, "demo_contract_executor": {"count": 1, "descriptions": ["Execute methods on demo/example contracts"]}, "gas_price_setter": {"count": 1, "descriptions": ["Set specific gas prices for transactions"]}, "counter_interface": {"count": 1, "descriptions": ["Interface with counter contract increment methods"]}, "oracle_executor": {"count": 1, "descriptions": ["Execute oracle contract price submission methods"]}, "price_formatter": {"count": 1, "descriptions": ["Format price data according to oracle contract requirements"]}, "query_contract_state": {"count": 2, "descriptions": ["Query smart contract state using neutrond CLI or REST API to get contract configuration", "Execute smart contract query to get crowdfunding state"]}, "parse_contract_response": {"count": 1, "descriptions": ["Parse and format the JSON response from the contract state query"]}, "query_cw20_balance": {"count": 1, "descriptions": ["Query CW20 token contract for specific address balance using smart contract query"]}, "format_token_amount": {"count": 1, "descriptions": ["Format token amounts with proper decimals and denomination"]}, "query_marketplace_listing": {"count": 1, "descriptions": ["Query NFT marketplace contract for specific listing information"]}, "parse_bid_data": {"count": 1, "descriptions": ["Extract and format bid information from marketplace contract response"]}, "parse_funding_data": {"count": 1, "descriptions": ["Extract and format funding amounts and progress from contract state"]}, "query_staking_rewards": {"count": 1, "descriptions": ["Query staking rewards contract for specific address unclaimed rewards"]}, "calculate_reward_amounts": {"count": 1, "descriptions": ["Calculate and format reward amounts with proper denominations"]}, "query_cw20_allowance": {"count": 1, "descriptions": ["Query CW20 contract for allowance between owner and spender addresses"]}, "format_allowance_data": {"count": 1, "descriptions": ["Format allowance information including amounts and expiration"]}, "query_dao_proposal": {"count": 1, "descriptions": ["Query DAO contract for specific proposal status and voting results"]}, "parse_proposal_status": {"count": 1, "descriptions": ["Parse proposal state and determine if passed, pending, or failed"]}, "query_nft_token_uri": {"count": 1, "descriptions": ["Query NFT contract for specific token URI and metadata"]}, "fetch_nft_metadata": {"count": 1, "descriptions": ["Retrieve and parse NFT metadata from token URI"]}, "query_vesting_schedule": {"count": 1, "descriptions": ["Query vesting contract for specific beneficiary schedule"]}, "format_vesting_timeline": {"count": 1, "descriptions": ["Format vesting schedule with dates, amounts, and release periods"]}, "query_vault_position": {"count": 1, "descriptions": ["Query vault contract for specific position liquidation parameters"]}, "calculate_liquidation_price": {"count": 1, "descriptions": ["Calculate and format liquidation price based on position data"]}}