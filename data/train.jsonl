{"text": "(GNU specific) Calculte and output amount of CPU load taken by all processes belonging to user 'abc'.", "labels": ["awk"]}
{"text": "(GNU specific) Display cumulative CPU usage over 5 seconds.", "labels": ["awk"]}
{"text": "(GNU specific) Display numbers of processes in following states: running, sleeping, stopped, and defunct (zombie).", "labels": ["awk"]}
{"text": "(GNU specific) Display the percentage of CPU usage allocated to user processes.", "labels": ["awk"]}
{"text": "(GNU specific) Display various information about process currently taking the most CPU time.", "labels": ["awk"]}
{"text": "(GNU specific) Find the process currently taking the most CPU time.", "labels": ["awk"]}
{"text": "(Linux specific) Find all loadable modules for current kernel, whose name includes \"\"perf\"\"", "labels": ["find"]}
{"text": "Add \"\"execute\"\" to the permissions of all directories in the home directory tree", "labels": ["find"]}
{"text": "Add '.avi' extension to all files/directories with '.mkv' extension under '/volume1/uploads' directory tree", "labels": ["find"]}
{"text": "Add a date time stamp to every line of output in \"\"ping google.com\"\"", "labels": ["xargs"]}
{"text": "Add group write permission to all files in the current directory", "labels": ["find"]}
{"text": "Add read and execute permission to every directory under the current directory", "labels": ["find"]}
{"text": "Add read permission for 'other' for all files/directories named 'rc.conf' under current directory tree", "labels": ["find"]}
{"text": "Add the execute and read permission for all and the write permission for the user to the dir_data directory and all of its sub-directories.", "labels": ["find"]}
{"text": "Append \"\"foo\"\" and \"\"bar\"\" column in file \"\"file\"\" with values dependent on the current table contents", "labels": ["awk"]}
{"text": "Append all PNG and JPG files to tar archive 'images.tar'", "labels": ["find"]}
{"text": "Append all regular files modified in the last 24 hours to the \"\"$archive.tar\"\" tar archive", "labels": ["find"]}
{"text": "Append the parent directory name with a space in all 'text.txt' files in all sub directories of current directory", "labels": ["find"]}
{"text": "Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension", "labels": ["find"]}
{"text": "Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension transforming the full paths to relative paths", "labels": ["find"]}
{"text": "Archive all filepattern-*2009* files/directories under data/ into 2009.tar", "labels": ["find"]}
{"text": "Archive any files changed in the last day from \"\"remote_host\"\" to \"\"local_dir\"\"", "labels": ["find"]}
{"text": "Archive the list of 1st level subdirectories in /fss/fin to /fss/fi/outfile.tar.gz", "labels": ["find"]}
{"text": "Backup all PHP files under the current directory tree", "labels": ["find"]}
{"text": "Backup all of the Java files in the current directory tree by copying them and appending the suffix .bk to each", "labels": ["find"]}
{"text": "Calculate and show md5 sums for every files under current directory tree", "labels": ["find"]}
{"text": "Calculate the md5 sum of \"\"logdir\"\" and print only the hash", "labels": ["awk"]}
{"text": "Calculate the md5 sum of all files in the current directory and formatting the output by removing parenthesis", "labels": ["find"]}
{"text": "Calculate the md5 sum of all the file metadata in the current directory tree excluding \"\".svn\"\"", "labels": ["find"]}
{"text": "Calculate the md5 sum of every \"\".py\"\" file in directory tree \"\"/path\"\"", "labels": ["find"]}
{"text": "Calculate the md5 sum of the contents of the sorted list of files \"\"$FILES\"\"", "labels": ["sort"]}
{"text": "Calculate the md5 sum of the list of files in the current directory", "labels": ["find"]}
{"text": "Calculate the md5sum of all the files with name \"\"MyCProgram.c\"\", ignoring case", "labels": ["find"]}
{"text": "Calculate the total disk usage for each \"\".jpg\"\" file on the system and prepend the system host name to the output", "labels": ["find"]}
{"text": "Change all directories under \"\"./bootstrap/cache/\"\" to owner \"\"apache\"\" and group \"\"laravel\"\"", "labels": ["find"]}
{"text": "Change all directories under \"\"./storage/\"\" to owner \"\"apache\"\" and group \"\"laravel\"\"", "labels": ["find"]}
{"text": "Change all file permissions to 664 and all directory permissions to 775 in directory tree \"\"htdocs\"\"", "labels": ["find"]}
{"text": "Change all files in \"\"~\"\" which are owned by the group \"\"vboxusers\"\" to be owned by the user group \"\"kent\"\"", "labels": ["find"]}
{"text": "Change all files in the current directory tree to owner \"\"xx\"\"", "labels": ["find"]}
{"text": "Change all files with no user under \"\"/var/www\"\" to have owner \"\"root\"\" and group \"\"apache\"\"", "labels": ["find"]}
{"text": "Change directory to the directory containing the executable file of command \"\"oracle\"\"", "labels": ["xargs"]}
{"text": "Change every directory under \"\"/var/www/html/\"\" to have permissions 775", "labels": ["find"]}
{"text": "Change every file under \"\"/var/www/html/\"\" to have permissions 664", "labels": ["find"]}
{"text": "Change every reference to the colour red to green in all CSS files", "labels": ["find"]}
{"text": "Change file permissions on all regular files within a directory", "labels": ["find"]}
{"text": "Change group ownership to `foo' for files with GID=2000", "labels": ["find"]}
{"text": "Change mode of all files ending with \"\".php\"\" under the current folder to 755 and write the output to the console and \"\"logfile.txt\"\" file", "labels": ["find"]}
{"text": "Change permission to 000 of all directories named '.texturedata' under '/path/to/look/in/' directory tree", "labels": ["find"]}
{"text": "Change permissions for all PHP files under the current directory tree to 755", "labels": ["find"]}
{"text": "Change permissions for all PHP files under the current directory tree to 755 and print the number of files changed", "labels": ["find"]}
{"text": "Change permissions of all directories from the current directory tree to 644", "labels": ["find"]}
{"text": "Change permissions of all directories in the ~/dir_data directory tree in accordance with mode `a+xr,u+w'", "labels": ["find"]}
{"text": "Change permissions of all files ending \"\".php\"\" under the current directory to 755 and print a count of modified files", "labels": ["find"]}
{"text": "Change permissions of all files ending in \"\".php\"\" under the current directory to 755 and print a '+' for each file", "labels": ["find"]}
{"text": "Change permissions of all files ending in \"\".php\"\" under the current directory to 755 and print a count of modified files", "labels": ["find"]}
{"text": "Change permissions of all regular files from the current directory tree to 644", "labels": ["find"]}
{"text": "Change permissions of all regular files in the ~/dir_data directory tree in accordance with mode `a-x,u+w'", "labels": ["find"]}
{"text": "Change permissions to 0755 for all directories in the /path directory tree", "labels": ["find"]}
{"text": "Change permissions to 500 for all regular files under and below the current directory", "labels": ["find"]}
{"text": "Change permissions to 600 for all regular .rb files in the current directory tree", "labels": ["find"]}
{"text": "Change permissions to 644 for *.html files under /usr/local", "labels": ["find"]}
{"text": "Change permissions to 644 for all regular files under the /path/to/dir/ tree unless these permissions are already set", "labels": ["find"]}
{"text": "Change permissions to 644 of multiple files with permissions 755", "labels": ["find"]}
{"text": "Change permissions to 644 of multiple regular files with permissions 755", "labels": ["find"]}
{"text": "Change permissions to 644 recursively for PHP files.", "labels": ["find"]}
{"text": "Change permissions to 644 recursively only for files", "labels": ["find"]}
{"text": "Change permissions to 755 for all directories in the /path/to/dir directory tree", "labels": ["find"]}
{"text": "Change permissions to 755 recursively only for directories", "labels": ["find"]}
{"text": "Change permissions to 777 for all directories in the current directory tree", "labels": ["find"]}
{"text": "Change permissions to u=rw,g=r,o= for all files in the current directory tree", "labels": ["find"]}
{"text": "Change permissions to u=rw,g=r,o= for all files inside the current directory tree", "labels": ["find"]}
{"text": "Change permissions to u=rwx,g=rx,o= for all directories in the current directory tree", "labels": ["find"]}
{"text": "Change permissions to u=rwx,g=rx,o= for all directories inside the current directory tree", "labels": ["find"]}
{"text": "Change permssions of *.cgi files under directories htdocs and cgi-bin to 755", "labels": ["find"]}
{"text": "Change string \"\"searc\"\" to \"\"replace\"\" in all files in directory hierarchy", "labels": ["find"]}
{"text": "Change the owner of all \"\".txt\"\" files in directory tree \"\"/mydir\"\" to \"\"root\"\"", "labels": ["find"]}
{"text": "Change the owner of all files in \"\"/empty_dir/\"\" to \"\"root\"\" using at most 10 files at a time", "labels": ["xargs"]}
{"text": "Change the owner of all files in the current directory tree excluding those who match \"\"./var/foo*\"\" to \"\"www-data\"\"", "labels": ["find"]}
{"text": "Change the ownership of all aluno1's files in the current directory and below to aluno2", "labels": ["find"]}
{"text": "Change the ownership of all files in the current directory tree from root to www-data", "labels": ["find"]}
{"text": "Change the ownership of all files in the current directory tree to myuser:a-common-group-name", "labels": ["find"]}
{"text": "Change the ownership to the user daisy for all directories under current directory that are owned by harry", "labels": ["find"]}
{"text": "Change the permission of all regular files under current directory tree to 644", "labels": ["find"]}
{"text": "Change the permission to 0644 for all files under current directory", "labels": ["find"]}
{"text": "Change the permission to 0755 for all directories under current directory", "labels": ["find"]}
{"text": "Change the permissions of all regular files whose names end with .mp3 in the directory tree /var/ftp/mp3", "labels": ["find"]}
{"text": "Change the permissions of every directory in the current directory and all files and directories within them to 700", "labels": ["find"]}
{"text": "Change the permissions of the current directory and all its subdirectories to 755.", "labels": ["find"]}
{"text": "Change the user to daisy for directories and subdirectories owned by harry", "labels": ["find"]}
{"text": "Change to folder where the oracle binary is.", "labels": ["xargs"]}
{"text": "Change user ownership to `foo' for files with UID=1005", "labels": ["find"]}
{"text": "Check if content of all top-level *.txt files in the current directory contain only unique lines", "labels": ["sort"]}
{"text": "Check if directory $some_dir is empty", "labels": ["find"]}
{"text": "Check if the $somedir directory is empty", "labels": ["find"]}
{"text": "Check if the contents of file \"\"subset\"\" is a subset of file \"\"set\"\"", "labels": ["sort"]}
{"text": "Check if the directory tree whose name is given as variable $somedir contains no regular files", "labels": ["find"]}
{"text": "Clean directories and subdirectories of the temporary files generated during normal use", "labels": ["find"]}
{"text": "Clean up all zombie processes by instantly killing their parent process with SIGKILL signal.", "labels": ["awk"]}
{"text": "Clean up all zombie processes by sending SIGTERM signal to their parent process, which requests them to terminate.", "labels": ["awk"]}
{"text": "Compare *.csv files in the current directory tree with their analogs stored in /some/other/path/", "labels": ["find"]}
{"text": "Compare *.csv files in the current directory tree with their analogs stored in /some/other/path/ prompting before running `diff'", "labels": ["find"]}
{"text": "Compare column 3 with column 2 of the next line in \"\"file\"\" and format output as a table", "labels": ["awk"]}
{"text": "Compare each .xml file under the current directory with a file of the same name in \"\"/destination/dir/2\"\"", "labels": ["find"]}
{"text": "Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file, second file, and common ones", "labels": ["sort"]}
{"text": "Compress all \"\".txt\"\" files in the current directory tree with gzip", "labels": ["find"]}
{"text": "Compress all *.img files using bzip2", "labels": ["find"]}
{"text": "Compress all directories found in $LOGDIR wherein a file's data has been modified within the last 24 hours", "labels": ["find"]}
{"text": "Compress all directories found in directory tree $LOGDIR that have been modified within the last 24 hours", "labels": ["find"]}
{"text": "Compress all files in directory \"\"$PATH_TO_LOGS\"\" that were last modified more than \"\"$SOME_NUMBER_OF_DAYS\"\" days ago", "labels": ["find"]}
{"text": "Compress all files in the \"\"$FILE\"\" directory tree that were last modified 30 days ago", "labels": ["find"]}
{"text": "Compress all files in the \"\"$FILE\"\" directory tree that were last modified 30 days ago and have not already been compressed with gzip", "labels": ["find"]}
{"text": "Compress all files with '.txt' extension under current directory", "labels": ["xargs"]}
{"text": "Compress and display the gzip compression ratio of every file on the system that is greater than 100000 bytes and ends in \"\".log\"\"", "labels": ["find"]}
{"text": "Compress and display the original filename of every file on the system that is greater than 100000 bytes and ends in \"\".log\"\"", "labels": ["find"]}
{"text": "Compress every file in the current directory tree that matches \"\"*cache.html\"\" and keep the original file", "labels": ["find"]}
{"text": "Compress every file in the current directory tree with gzip and keep file extensions the same", "labels": ["find"]}
{"text": "Compress files excluding *.Z files", "labels": ["find"]}
{"text": "Continuously print the seconds since Unix epoch and the ping time to \"\"google.com\"\"", "labels": ["awk"]}
{"text": "Continuously send ping requests to broadcast address \"\"10.10.0.255\"\" and print the IP addresses who respond", "labels": ["awk"]}
{"text": "Convert \"\"595a\"\" into characters and then print the hexadecimal and printable characters of each byte", "labels": ["awk"]}
{"text": "Copies file 'file.dat' to each top-level directory in the current directory.", "labels": ["xargs"]}
{"text": "Copies file 'file.txt' to each top-level directory in the current directory.", "labels": ["xargs"]}
{"text": "Copies file 'file1' to each of directories 'dir1', 'dir2', 'dir3'.", "labels": ["xargs"]}
{"text": "Copies file 'fileName.txt' to each of directories listed in the 'allFolders.txt' list.", "labels": ["xargs"]}
{"text": "Copies file 'test' to each of directories like './fs*/*'.", "labels": ["xargs"]}
{"text": "Copy \"\"fileName.txt\"\" to all directories listed in \"\"allFolders.txt\"\" - names may not contain spaces.", "labels": ["xargs"]}
{"text": "Count the number of equal lines in \"\"file1.txt\"\" and \"\"file2.txt\"\"", "labels": ["sort"]}
{"text": "Count the number of times that a single \"\"-----------\\n\"\" separated record contains both \"\"A=2\"\" and \"\"dummy=2\"\" and the number of records that do not have \"\"dummy=2\"\" in compressed file \"\"file.gz\"\"", "labels": ["awk"]}
{"text": "Count the number of times that a single \"\"-----------\\n\"\" separated record contains both \"\"A=2\"\" and \"\"dummy=2\"\" in compressed file \"\"file.gz\"\"", "labels": ["awk"]}
{"text": "Count the number of unique duplicate lines in \"\"file1\"\" and \"\"file2\"\" combined", "labels": ["sort"]}
{"text": "Counts lines in file $file and prints number only.", "labels": ["awk"]}
{"text": "Counts lines in file fileName ignoring empty lines and lines with spaces only.", "labels": ["awk"]}
{"text": "Create 5 empty .txt files", "labels": ["xargs"]}
{"text": "Create a symbolic link in directory \"\"~/newlinks\"\" for each file listed in \"\"results2.txt\"\"", "labels": ["xargs"]}
{"text": "Create a table containing all information from S43.txt and S44.txt, merging lines where the first field of both files matches, and keeping the line that starts with \"\"Gene\"\" at the start of the file.", "labels": ["sort"]}
{"text": "Create an empty file with a carriage return character in its name.", "labels": ["xargs"]}
{"text": "Create empty files (or update timestamps if they exist) with names matching each word in variable \"\"correctFilePathAndName\"\"", "labels": ["xargs"]}
{"text": "Decompress \"\"file2.txt\"\" and \"\"file1.txt\"\" and print lines in \"\"file1.txt\"\" that match the 5th tab separated field in \"\"file2.txt\"\"", "labels": ["awk"]}
{"text": "Decompress and sort \"\"$part0\"\" and \"\"$part1\"\" of files in different processes", "labels": ["sort"]}
{"text": "Delete all but the most recent 5 files", "labels": ["xargs"]}
{"text": "Delete the 4th tab separated column from the output of \"\"finger\"\"", "labels": ["awk"]}
{"text": "Determine DISPLAY variable for the session when logged in via SSH", "labels": ["awk"]}
{"text": "Display a sorted count of all the characters in \"\"filename\"\"", "labels": ["sort"]}
{"text": "Display all lines contained in 'dax-weekly.csv' in reverse order.", "labels": ["awk"]}
{"text": "Display compter's hostname", "labels": ["awk"]}
{"text": "Display file type information for all instances of \"\"file\"\" in the current PATH.", "labels": ["xargs"]}
{"text": "Display inputfile all on one line (replace newlines by spaces)", "labels": ["awk"]}
{"text": "Display source and mount point of the file system containing /some/path.", "labels": ["awk"]}
{"text": "Display the contents of variable \"\"a\"\" converted to lowercase.", "labels": ["awk"]}
{"text": "Display the mount point of a device file \"\"$path\"\"", "labels": ["awk"]}
{"text": "Display the named characters in \"\"Test\\rTesting\\r\\nTester\\rTested\"\"", "labels": ["awk"]}
{"text": "Display the named characters in \"\"line1\\r\\nline2\"\"", "labels": ["awk"]}
{"text": "Display the sizes and filepaths of all files/directories sorted in ascending order of size", "labels": ["sort"]}
{"text": "Display the sizes and filepaths of all files/directories sorted in descending order of size", "labels": ["sort"]}
{"text": "Display variable 'var' without leading and trailing whitespace.", "labels": ["awk"]}
{"text": "Displays the count of of each unique line read from standard input", "labels": ["sort"]}
{"text": "Eliminates partially duplicate lines by column, keeping the last occurrence", "labels": ["sort"]}
{"text": "Execute \"\"awk -F, '$1 ~ /F$/'\"\" on contents of \"\"file.gz\"\"", "labels": ["awk"]}
{"text": "Execute \"\"script.awk\"\" on \"\"file\"\" and format the output as a table", "labels": ["awk"]}
{"text": "Execute awk command '{ ...}' on compressed file \"\"FILE\"\"", "labels": ["awk"]}
{"text": "Execute awk script \"\"script.awk\"\" on \"\"File2\"\" and \"\"File1\"\" and format output as a table", "labels": ["awk"]}
{"text": "Execute awk script \"\"script.awk\"\" that exists in \"\"$PATH\"\" with argument \"\"arg1\"\"", "labels": ["awk"]}
{"text": "Execute awk script \"\"script.awk\"\" with 2 arguments both \"\"file.txt\"\" and format the output as a table", "labels": ["awk"]}
{"text": "Executes 'true'. then makes 'xargs' fail executing 'false' and return 123 exit code.", "labels": ["xargs"]}
{"text": "Extract any line in \"\"f1\"\" or \"\"f2\"\" which does not appear in the other", "labels": ["sort"]}
{"text": "Extract any line in \"\"file1\"\" or \"\"file2\"\" which does not appear in the other", "labels": ["sort"]}
{"text": "Extract any line in \"\"file1.txt\"\" which does not appear as the first \"\";\"\" delimited entry in \"\"file2.txt\"\"", "labels": ["sort"]}
{"text": "Extract any line in \"\"fileA\"\" which does not appear as the first word of any line in \"\"fileB\"\"", "labels": ["sort"]}
{"text": "Extract any line in \"\"set1\"\" which does not appear in \"\"set2\"\"", "labels": ["sort"]}
{"text": "Extract any line in sorted file \"\"A\"\" that does not appear in \"\"B\"\", \"\"C\"\", or \"\"D\"\"", "labels": ["sort"]}
{"text": "Extract number from $filename of the form \"\"something_12345_else\"\" and set the variable \"\"number\"\" to this number.", "labels": ["awk"]}
{"text": "Extract the contents of \"\"Input.txt.gz\"\", list the unique first comma separated field prefixed by the number of occurrences", "labels": ["sort"]}
{"text": "Extract the second-to-last slash-separated path component, ie. \"\"90_2a5\"\" in this case.", "labels": ["xargs"]}
{"text": "Extract two semicolon-separated fields from specified strings, output them separated by a space.", "labels": ["awk"]}
{"text": "Extract, sort and print only group names from /etc/group.", "labels": ["sort"]}
{"text": "File \"\"files.txt\"\" contains a list of files, copy all files listed to host \"\"remote\"\", connecting as ssh user \"\"user\"\", and copying the files to this user's home directory - this will not work with files/directory names containing spaces.", "labels": ["xargs"]}
{"text": "File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.", "labels": ["awk"]}
{"text": "File 'mydatafile' has a number on each line, display the sum of these numbers.", "labels": ["awk"]}
{"text": "Filter contents of 'file' through awk commands written in script.awk, display the result.", "labels": ["awk"]}
{"text": "Filters only directories from long file listing of a current directory, and prints their names.", "labels": ["awk"]}
{"text": "Filters only directories including hidden ones from long file listing of a current directory, and prints their names.", "labels": ["awk"]}
{"text": "Filters unique lines by matching against the first column of a .csv file", "labels": ["sort"]}
{"text": "Find \"\".c\"\" and \"\".h\"\" files in the current directory tree and print line numbers and lines containing \"\"#include\"\"", "labels": ["xargs"]}
{"text": "Find \"\".c\"\" and \"\".h\"\" files in the current directory tree and print lines containing \"\"#include\"\"", "labels": ["xargs"]}
{"text": "Find 10 largest files in the current directory and its subdirectories", "labels": ["sort"]}
{"text": "Find all files/directories with '.in' extension in the directory $directory and its subdirectories", "labels": ["awk"]}
{"text": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.", "labels": ["sort"]}
{"text": "Find and delete all files with a used disk size of 0", "labels": ["awk"]}
{"text": "Find the \"\"erl\"\" executable in $PATH and read the \"\"RELEASES\"\" file to extract the erlang release number", "labels": ["awk"]}
{"text": "Finds IP address of 'en0' network interface.", "labels": ["awk"]}
{"text": "Finds IP address of 'eth0' network interface.", "labels": ["awk"]}
{"text": "Finds IP address of system network interface, that belongs to 192.168.111 subnet.", "labels": ["awk"]}
{"text": "Finds PIDs of all running processes, gets executable binary of each process, and prints containing folder of each binary.", "labels": ["xargs"]}
{"text": "Finds all logged in users.", "labels": ["awk"]}
{"text": "Finds all user session in system, and shows sorted user names with number of sessions of each user.", "labels": ["sort"]}
{"text": "Finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and prints location of such files.", "labels": ["xargs"]}
{"text": "Finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and saves location of such files to 'directories' variable.", "labels": ["xargs"]}
{"text": "Finds users with X session in system and puts the result in USERS variable.", "labels": ["awk"]}
{"text": "Finds users with X session in system and puts the result into USERS variable", "labels": ["awk"]}
{"text": "For each line in 'file', print \"\"result = \"\" followed by the line backwards.", "labels": ["awk"]}
{"text": "For each line of colon-separated information in files 'empsal' and 'empname' whose first field matches in both files, output: first field of empname, second field of empname, fourth field of empname, and third field of empsal.", "labels": ["sort"]}
{"text": "For each line of the sorted output of both file1 and file2, print lines whose first field of file2 does not appear as first field of file1.", "labels": ["sort"]}
{"text": "For each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv", "labels": ["sort"]}
{"text": "For each line which has a common first field in test.1 and test.2, output the first 2 fields of test.2 and the field 2 and 3 of test.1", "labels": ["sort"]}
{"text": "Format each line as 3 columns based on extraneous columns", "labels": ["awk"]}
{"text": "From the list of words (one per line) in list1.txt, display the number of occurrences of this word in list2.txt and sort the results from highest to lowest count.", "labels": ["sort"]}
{"text": "Generates a randomly sorted list of numbers from 1 to 10.", "labels": ["sort"]}
{"text": "Get IP address of your SSH session", "labels": ["awk"]}
{"text": "Get current directory name without full path, ie. the part after the last /", "labels": ["awk"]}
{"text": "Get domain name with 'google' from dig reverse lookup.", "labels": ["awk"]}
{"text": "Get domain names from file '1.txt' and request TXT DNS record for each one", "labels": ["xargs"]}
{"text": "Get from file 'File1.txt' strings starting with 'Q', extract only part of them following after '=' sign, and print which ones are not found in 'File2.txt'", "labels": ["sort"]}
{"text": "Get the current shell's executable name from the output of 'ps'.", "labels": ["awk"]}
{"text": "Gets IP address of 'en0' network interface.", "labels": ["awk"]}
{"text": "Gets IP address of 'en0' selected network interface.", "labels": ["awk"]}
{"text": "Gets IP address of 'en1' network interface.", "labels": ["awk"]}
{"text": "Gets IP address of 'eth0' network interface.", "labels": ["awk"]}
{"text": "Gets IP address of eth0 network interface.", "labels": ["awk"]}
{"text": "Gets IP address of first listed active network interface in system.", "labels": ["awk"]}
{"text": "Gets IP address of first listed network interface in system.", "labels": ["awk"]}
{"text": "Gets IP addresses of all active network interfaces on host.", "labels": ["awk"]}
{"text": "Gets IP addresses of all active network interfaces.", "labels": ["awk"]}
{"text": "Gets IP addresses of all network interfaces.", "labels": ["awk"]}
{"text": "Gets MAC address of eth0 network interface.", "labels": ["awk"]}
{"text": "Gets MAC addresses of all IP4 network interfaces.", "labels": ["awk"]}
{"text": "Gets MAC addresses of all active network interfaces.", "labels": ["awk"]}
{"text": "Gets domain name from dig reverse lookup and save in variable 'go'.", "labels": ["awk"]}
{"text": "Gets domain name from dig reverse lookup.", "labels": ["awk"]}
{"text": "Gets list of IP addresses of all network interfaces.", "labels": ["awk"]}
{"text": "Go to first directory specified in PATH which contains the command 'oracle'", "labels": ["xargs"]}
{"text": "Greps DNS zone transfer info on domain localdomain.com from NS @dc1.localdomain.com, finds strings with any-cased word 'Lawler' and strips last letter from each string.", "labels": ["awk"]}
{"text": "Greps domain $domain IP name from long dig listing.", "labels": ["awk"]}
{"text": "Infinitely ping every host listed in \"\"file-of-ips\"\" with at most 50 processes at once", "labels": ["xargs"]}
{"text": "Inserts \"\"new line\"\" after last occurrence of ScriptAlias in a file", "labels": ["awk"]}
{"text": "Isolate first comma-delimited field of each line in \"\"file\"\", discard consecutive duplicates, and search \"\"file\"\" for first matching occurrence of that field.", "labels": ["xargs"]}
{"text": "Join colon-separated information in 3 files LN.txt PH.txt and AD.txt in a cascade fashion: join LN.txt and PH.txt, then join the result with AD.txt", "labels": ["sort"]}
{"text": "Join columns in \"\"file1\"\" and \"\"file2\"\" if their first field matches and format the output as a table", "labels": ["awk"]}
{"text": "Join comma-separated data in file1 and file2, including extra non-matching information in both files.", "labels": ["sort"]}
{"text": "Join comma-separated information in 4 files", "labels": ["sort"]}
{"text": "Join data in \"\"file1\"\" sorted by the second word of each line with data in \"\"file2\"\" sorted by the first word of each line, keeping the same order as it is found in \"\"file1\"\"", "labels": ["sort"]}
{"text": "Join data in file1 containing one number per line with data in file2 containing a number and other information per line, keeping the same order as it is found in file1.", "labels": ["sort"]}
{"text": "Join lines in file \"\"A\"\" with lines in file \"\"B\"\" if the lines share a common first word", "labels": ["sort"]}
{"text": "Join lines in file \"\"aa\"\" with lines in file \"\"bb\"\" if the lines share a common first word", "labels": ["sort"]}
{"text": "Join lines in file \"\"aa\"\" with lines in file \"\"bb\"\" if the lines share a common first word and sort the result numerically", "labels": ["sort"]}
{"text": "Kill all processes which were executed in background by the current shell.", "labels": ["xargs"]}
{"text": "List \"\".java\"\" files that have the same contents", "labels": ["sort"]}
{"text": "List \"\".java\"\" files that have the same filename and contents", "labels": ["sort"]}
{"text": "List absolute path of files in the current directory", "labels": ["xargs"]}
{"text": "List all IP addresses assigned to current hostname, pausing for user interaction after each page.", "labels": ["awk"]}
{"text": "List all active cron jobs, displaying only the command.", "labels": ["awk"]}
{"text": "List all cron jobs where the minute part is either * or a number from 0 to 14.", "labels": ["awk"]}
{"text": "List all environment variables whose name contains 'ipo', showing only the names of the variables and not their values.", "labels": ["awk"]}
{"text": "List all files and directories in long list format with a time style of \"\"long-iso\"\" and sort from oldest modifed to newest modified", "labels": ["sort"]}
{"text": "List all variables (names only) with names containing X.", "labels": ["awk"]}
{"text": "List any line in \"\"f1\"\" or \"\"f2\"\" which does not appear in the other and delete all tab characters in the output", "labels": ["sort"]}
{"text": "List common files in directories \"\"1\"\" and \"\"2\"\"", "labels": ["sort"]}
{"text": "List each directory in the current directory prefixed with its disk usage in human readable format and sorted from smallest to largest", "labels": ["sort"]}
{"text": "List each file or directory in the current directory prefixed by its filesize in bytes and sorted from smallest to largest", "labels": ["sort"]}
{"text": "List each file or directory in the current directory prefixed by its human readable filesize and sorted from largest to smallest", "labels": ["sort"]}
{"text": "List each file or directory in the current directory prefixed with its filesize in MB and sorted from smallest to largest", "labels": ["sort"]}
{"text": "List each file or directory in the current directory prefixed with its filesize in bytes and sorted from smallest to largest", "labels": ["sort"]}
{"text": "List each unique case insensitive character in \"\"file\"\" prefixed by number of occurrences", "labels": ["sort"]}
{"text": "List each unique case insensitive character in \"\"file\"\" prefixed by number of occurrences and sorted from most frequent to least frequent", "labels": ["sort"]}
{"text": "List each unique character in \"\"file\"\" prefixed by number of occurrences", "labels": ["sort"]}
{"text": "List each unique character in \"\"file\"\" prefixed by number of occurrences and sorted from most frequent to least frequent", "labels": ["sort"]}
{"text": "List environment variables whose name matches \"\".*X.*\"\"", "labels": ["awk"]}
{"text": "List files in \"\"dir1\"\" that are not in \"\"dir2\"\"", "labels": ["sort"]}
{"text": "List files in directory \"\"one\"\" and \"\"two\"\" that do not exist in the other", "labels": ["sort"]}
{"text": "List files in directory \"\"one\"\" that exist in directory \"\"two\"\"", "labels": ["sort"]}
{"text": "List the 10 largest files or directories and their sizes under (and including) \"\"/var\"\"", "labels": ["sort"]}
{"text": "List the number of occurrences of each unique character in \"\"The quick brown fox jumps over the lazy dog\"\" sorted from most frequent to least frequent", "labels": ["sort"]}
{"text": "List the unique second \"\"/\"\" delimited field of every line from standard input prefixed by the number of occurrences", "labels": ["sort"]}
{"text": "List the unique tab delimited field number \"\"$FIELD\"\" in all files, prefix with the number of occurrences, sort from most frequent to least frequent", "labels": ["sort"]}
{"text": "List unique MD5 digests of all files in the current directory ending in .txt", "labels": ["sort"]}
{"text": "List unique series of 3 characters in file \"\"$1\"\" prefixed by the number of occurrences and sorted from most frequent to least frequent", "labels": ["sort"]}
{"text": "Lists all files in a current folder, separating names with comma.", "labels": ["xargs"]}
{"text": "Lists all files in a current folder, separating names with space.", "labels": ["awk"]}
{"text": "Locates Erlang distribution, and prints release number from 'RELEASES' file.", "labels": ["awk"]}
{"text": "Make a copy of file.txt in all directories in current directory - names may not contain spaces.", "labels": ["xargs"]}
{"text": "Make a copy of file1 in dir1, dir2, and dir3.", "labels": ["xargs"]}
{"text": "Make a directory in the current working directory with a random 32 alphanumeric character name", "labels": ["xargs"]}
{"text": "Make directories and parents as needed for each unique second \"\"&\"\" delimited field with \"\" \"\", \"\",\"\", and \"\":\"\" removed in \"\"filetypes.txt\"\"", "labels": ["sort"]}
{"text": "Make directories for each line in \"\"folder_list.txt\"\"", "labels": ["xargs"]}
{"text": "Merge 10 already sorted files and display the result, pausing at each page of output.", "labels": ["sort"]}
{"text": "Merge already sorted files \"\"*.txt\"\" and split the result into files of at most 1000000 lines each with a numeric suffix and a prefix \"\"output\"\"", "labels": ["sort"]}
{"text": "Merge already sorted files \"\"file*.txt\"\" and split the result into files of at most 100000 lines each with a prefix \"\"sorted_file\"\"", "labels": ["sort"]}
{"text": "Merge already sorted files in the current directory ending in \"\".$suffix\"\"", "labels": ["sort"]}
{"text": "Merge already sorted files in the current directory starting with \"\"_tmp\"\" and write the output to \"\"data.tsv.sorted\"\"", "labels": ["sort"]}
{"text": "Merge colon-separated information from file1 and file2 where first field of both files matches", "labels": ["sort"]}
{"text": "Merge colon-separated information from file1 and file2 where second field of both files matches, sorting the result based on this field - for each line, output: first 3 fields of first file, followed by first 3 fields of second file.", "labels": ["sort"]}
{"text": "Merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from both files, replace missing fields with \"\"no-match\"\", and output the second field from standard input and the second and third field from file1.txt", "labels": ["sort"]}
{"text": "Merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from standard input, replace missing fields with \"\"no-match\"\", and output the second field from standard input and the second and third field from file1.txt", "labels": ["sort"]}
{"text": "Merge content of decompressed files \"\"$part0\"\", \"\"$part1\"\", and so on", "labels": ["sort"]}
{"text": "Merge data in file1 and file2 where second field is common in both files", "labels": ["sort"]}
{"text": "Merge file1 and file2 by outputting all lines where the first comma-separated field of both files matches, followed by extra fields in file1 and those in file2", "labels": ["sort"]}
{"text": "Move all files and directories in the current directory to \"\"$TARGET\"\" excluding files matching \"\"$EXCLUDE\"\"", "labels": ["xargs"]}
{"text": "Move all files listed in $i file to dir.$count directory", "labels": ["xargs"]}
{"text": "Move all files that contain \"\"Subject: \\[SPAM\\]\"\" to \"\"DIR\"\"", "labels": ["xargs"]}
{"text": "Move all files that contain \"\"Subject: \\[SPAM\\]\"\" to \"\"your_file\"\"", "labels": ["awk"]}
{"text": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.", "labels": ["sort"]}
{"text": "Numerically sort IPv4 addresses specified on standard input with presedence to first, second, third, then fourth octet", "labels": ["sort"]}
{"text": "Numerically sort each line in file \"\"bb\"\" and output the result to console from greatest value to least value", "labels": ["sort"]}
{"text": "Numerically sort each line in file \"\"out\"\" and print the result to console", "labels": ["sort"]}
{"text": "Numerically sort each line of standard input", "labels": ["sort"]}
{"text": "Numerically sort file \"\"file.dat\"\" by the second word of each line and output from greatest value to least value", "labels": ["sort"]}
{"text": "Numerically sort file \"\"files\"\" by the second \"\"-\"\" separated value of each line ordered from least value to highest value", "labels": ["sort"]}
{"text": "Numerically sort file \"\"table\"\" by the fourth character of the second field, ignoring leading spaces", "labels": ["sort"]}
{"text": "Numerically sort file \"\"temp.txt\"\" by the second \"\"-\"\" separated value of each line ordered from highest value to least value", "labels": ["sort"]}
{"text": "Numerically sort standard input by the second word of each line", "labels": ["sort"]}
{"text": "Numerically sort standard input by the second word of each line and output from greatest value to least value", "labels": ["sort"]}
{"text": "Output all lines in 'file' which contain a tab character.", "labels": ["awk"]}
{"text": "Ping all hosts in file \"\"ips\"\" twice", "labels": ["xargs"]}
{"text": "Ping every address from 192.168.0.1 to 192.168.0.254 with a timeout of 1 second and filter out no responses", "labels": ["xargs"]}
{"text": "Prefix all files and directories in the current directory with \"\"Unix_\"\"", "labels": ["xargs"]}
{"text": "Prefix all files and directories in the current directory with \"\"unix_\"\"", "labels": ["xargs"]}
{"text": "Prefix all files and folders in the current directory with \"\"PRE_\"\"", "labels": ["xargs"]}
{"text": "Prepend date to ping output to google.com", "labels": ["xargs"]}
{"text": "Print \"\"#include\"\" statements found in \"\"file2\"\" that are not in \"\"file1\"\"", "labels": ["sort"]}
{"text": "Print \"\"$1\"\" or default 10 random lines from standard input", "labels": ["sort"]}
{"text": "Print \"\"Total generated: \"\" followed by the number of unique lines in \"\"$generated_ports\"\"", "labels": ["sort"]}
{"text": "Print \"\"echo ping -c 2\"\" on each string in file 'ips'", "labels": ["xargs"]}
{"text": "Print 'file' file, splitting lines into pieces with no more that 3 words in each one.", "labels": ["xargs"]}
{"text": "Print a count of all unique entries in \"\"ips.txt\"\" with the most frequent results at the top", "labels": ["sort"]}
{"text": "Print a count of all unique lines in \"\"ports.txt\"\" sorted from most frequent to least frequent", "labels": ["sort"]}
{"text": "Print a count of case insensitive duplicate filenames in the current directory", "labels": ["sort"]}
{"text": "Print a count of duplicate lines in \"\"filename\"\"", "labels": ["sort"]}
{"text": "Print a count of duplicate lines in \"\"filename\"\" sorted by most frequent", "labels": ["sort"]}
{"text": "Print a count of each unique line from standard input", "labels": ["sort"]}
{"text": "Print a count of each unique line from standard input sorted from least frequent to most frequent", "labels": ["sort"]}
{"text": "Print a count of each unique line in \"\"ip_addresses\"\"", "labels": ["sort"]}
{"text": "Print a count of each unique line in \"\"ip_addresses.txt\"\" sorted numerically", "labels": ["sort"]}
{"text": "Print a space separated list of numbers from 1 to 10", "labels": ["xargs"]}
{"text": "Print a space separated list of numbers from 1 to 10 with no trailing new line", "labels": ["xargs"]}
{"text": "Print command line of process with pid 17709", "labels": ["xargs"]}
{"text": "Print file information of command \"\"studio\"\"", "labels": ["xargs"]}
{"text": "Print joined strings from 'file', using space symbol as separator.", "labels": ["xargs"]}
{"text": "Print numbers from 1 to 10 using up to 4 processes", "labels": ["xargs"]}
{"text": "Print space separated numbers from 1 to 10", "labels": ["xargs"]}
{"text": "Print the base name of the current working directory", "labels": ["xargs"]}
{"text": "Print the characters in $b that match with any character in $a without printing any whitespace in-between", "labels": ["xargs"]}
{"text": "Print the grand total disk usage of all files listed in \"\"files.txt\"\"", "labels": ["xargs"]}
{"text": "Print the text file paths that match 'needle text' in their contents under 'my_folder' recursively", "labels": ["xargs"]}
{"text": "Prints path to folder that contains file \"\"/path/to/vm.vmwarevm/vm.vmx\"\".", "labels": ["xargs"]}
{"text": "Recursively change the owner and group of all files in the current directory to \"\"apache\"\"", "labels": ["xargs"]}
{"text": "Recursively change the ownership of all directories in the current directory excluding \"\"foo\"\" to \"\"Camsoft\"\"", "labels": ["xargs"]}
{"text": "Recursively find strings in all files under current directory, that matching with comma-separated patterns list in file 'searches-txt'", "labels": ["xargs"]}
{"text": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.", "labels": ["xargs"]}
{"text": "Remove blank lines and replace \"\" \"\" with \"\"/\"\" in \"\"struct.txt\"\" as input to make directories with parents as needed", "labels": ["xargs"]}
{"text": "Removes 5 oldest files in the current folder.", "labels": ["xargs"]}
{"text": "Removes all files but $1 newest ones from current folder.", "labels": ["xargs"]}
{"text": "Removes all files but 5 newest ones from current folder.", "labels": ["xargs"]}
{"text": "Removes all files from current folder but 3 newest ones", "labels": ["xargs"]}
{"text": "Removes all files from current folder but 5 newest ones, filtering out directories from initial search.", "labels": ["xargs"]}
{"text": "Removes all files from current folder but 5 newest ones.", "labels": ["xargs"]}
{"text": "Removes all top-level empty folders within the current folder.", "labels": ["xargs"]}
{"text": "Removes everything from current folder but '*ddl*' and '*docs*' files.", "labels": ["xargs"]}
{"text": "Removes first and last parts of path 'test/90_2a5/Windows' and prints the result.", "labels": ["xargs"]}
{"text": "Repeat \"\"image.png\"\" 10 times on a single line", "labels": ["xargs"]}
{"text": "Save number of lines in 'file.txt' file in 'nbLines' variable", "labels": ["xargs"]}
{"text": "Saves space separated content of $RAW_LOG_DIR in FILES variable", "labels": ["xargs"]}
{"text": "Search PATH for utilities called \"\"rename\"\", display the type of file (script, executable, ...) for each match found.", "labels": ["xargs"]}
{"text": "Send reverse requests to get domain name for each address in 'my_ips' list", "labels": ["xargs"]}
{"text": "Set environment variables using assignments are listed in '.env' file and run 'rails' command with defined environment", "labels": ["xargs"]}
{"text": "Suffix all files and folders in the current directory with \"\"_SUF\"\"", "labels": ["xargs"]}
{"text": "Take a file path from standard input and remove it.", "labels": ["xargs"]}
{"text": "Take first text field from file 'file.txt' as a domain name and get short A record for this one.", "labels": ["xargs"]}
{"text": "Takes path list from '.exportfiles.text' file, cuts off first two path segments and last one.", "labels": ["xargs"]}
{"text": "Unzip all files matching \"\"/homes/ndeklein/mzml/*.gz\"\"", "labels": ["xargs"]}
{"text": "kill a number of background jobs", "labels": ["xargs"]}
{"text": "kill all active jobs", "labels": ["xargs"]}
{"text": "kill all background jobs", "labels": ["xargs"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
{"text": "test", "labels": ["others"]}
