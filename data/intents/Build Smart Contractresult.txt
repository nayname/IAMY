{
    "messages": [
        {
            "content": "Build Smart Contract",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "09be5f1d-1faa-41e0-b42c-af5d8e152b2f",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_OpV3NIDB1crQxCukODHKxhDr",
                        "function": {
                            "arguments": "{\"query\":\"Neutron smart contract build deploy developer guide\", \"section\":\"developers\", \"max_results\":20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 488,
                    "prompt_tokens": 268,
                    "total_tokens": 756,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 448,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CDgaPpKGwMi4Uiya6j4Huj91rvT",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--2d3463a8-7ba9-483a-b713-89b87f0e909a-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "Neutron smart contract build deploy developer guide",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_OpV3NIDB1crQxCukODHKxhDr",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 268,
                "output_tokens": 488,
                "total_tokens": 756,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 448
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"Neutron smart contract build deploy developer guide\":\n\n## 1. Developer Quickstart\n**File:** /root/neutron/docs/developers/quickstart.mdx\n**Section:** developers\n**Relevance Score:** 30\n\n**Matching lines:**\n- Line 2: title: \"Developer Quickstart\"\n- Line 3: description: \"Start building on Neutron in minutes\"\n- Line 7: This guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n- Line 10: **New to Neutron development?** We recommend starting with our [Onboarding Tutorial Series](/developers/tutorials/onboarding/overview) which provides a comprehensive, step-by-step introduction to building on Neutron.\n- Line 40: <Step title=\"Clone and Build Neutron\">\n\n**Content Preview:**\n```\n---\ntitle: \"Developer Quickstart\"\ndescription: \"Start building on Neutron in minutes\"\n\n---\n\ntitle: \"Developer Quickstart\"\ndescription: \"Start building on Neutron in minutes\"\nicon: \"rocket\"\n\n---\n\n\nThis guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n\n```\n\n---\n\n## 2. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 28\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 8: ## What You'll Build\n- Line 10: A simple counter contract that:\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 3. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 26\n\n**Matching lines:**\n- Line 2: title: \"Neutron Modules\"\n- Line 5: Neutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n- Line 9: These modules are designed for direct integration with your smart contracts and DeFi applications:\n- Line 12: <Card title=\"Interchain Queries (ICQ)\" icon=\"link\" href=\"/developers/modules/interchain-queries/overview\">\n- Line 16: <Card title=\"Interchain Transactions (ICTX)\" icon=\"arrow-right-arrow-left\" href=\"/developers/modules/interchaintxs/overview\">\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Modules\"\n---\n\n---\n\n\nNeutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n\n\n---\n\n\nThese modules are designed for direct integration with your smart contracts and DeFi applications:\n\n```\n\n---\n\n## 4. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 26\n\n**Matching lines:**\n- Line 2: title: \"NeutronTemplate\"\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 7: NeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n- Line 10: <strong>Live Demo:</strong> <a href=\"https://neutrontemplate.deploydon.com\" target=\"_blank\" className=\"text-primary hover:underline\">https://NeutronTemplate.Deploydon.com</a>\n- Line 40: <Card title=\"Smart Contract\" icon=\"file-contract\" iconType=\"duotone\">\n\n**Content Preview:**\n```\n---\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n\n---\n\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n\nNeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n\n```\n\n---\n\n## 5. Developer Portal\n**File:** /root/neutron/docs/developers/overview.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Developer Portal\"\n- Line 6: Neutron provides developers with a powerful set of native modules, features, and tools to build sophisticated DeFi applications with unparalleled capital efficiency and atomic composability.\n- Line 10: Our developer documentation follows the [Divio documentation system](https://documentation.divio.com/), organizing information into four types:\n- Line 11: - **Tutorials**: Learning-oriented guides for beginners\n- Line 13: - **How-to Guides**: Problem-oriented practical steps\n\n**Content Preview:**\n```\n---\ntitle: \"Developer Portal\"\nicon: \"code\"\n\n---\n\n\nNeutron provides developers with a powerful set of native modules, features, and tools to build sophisticated DeFi applications with unparalleled capital efficiency and atomic composability.\n\n\n---\n\n\nOur developer documentation follows the [Divio documentation system](https://documentation.divio.com/), organizing information into four types:\n- **Tutorials**: Learning-oriented guides for beginners\n```\n\n---\n\n## 6. Part 3: Building a Web App\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-3-web-app.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Part 3: Building a Web App\"\n- Line 3: description: \"Create a modern web application that interacts with your Neutron smart contracts\"\n- Line 6: In this final part of the onboarding series, you'll build a React web application that provides a user-friendly interface for interacting with your smart contract. You'll learn modern Web3 frontend patterns and Neutron-specific integrations.\n- Line 8: ## What You'll Build\n- Line 12: - Real-time contract state display\n\n**Content Preview:**\n```\n---\ntitle: \"Part 3: Building a Web App\"\ndescription: \"Create a modern web application that interacts with your Neutron smart contracts\"\n\n---\n\ntitle: \"Part 3: Building a Web App\"\ndescription: \"Create a modern web application that interacts with your Neutron smart contracts\"\n---\n\n---\n\n\nIn this final part of the onboarding series, you'll build a React web application that provides a user-friendly interface for interacting with your smart contract. You'll learn modern Web3 frontend patterns and Neutron-specific integrations.\n\n```\n\n---\n\n## 7. Developer Tutorials\n**File:** /root/neutron/docs/developers/tutorials/overview.mdx\n**Section:** developers\n**Relevance Score:** 24\n\n**Matching lines:**\n- Line 2: title: \"Developer Tutorials\"\n- Line 3: description: \"Learn to build applications on Neutron through step-by-step tutorials\"\n- Line 6: Welcome to Neutron's developer tutorials! This section contains guided, step-by-step instructions to help you learn how to build applications on Neutron. Our tutorials focus on Neutron's unique integrated architecture and how to leverage its native modules for cross-chain development.\n- Line 10: We recommend following our tutorials in this order for new developers:\n- Line 13: - [Onboarding Tutorial Overview](/developers/tutorials/onboarding/overview) - Complete setup guide and development environment\n\n**Content Preview:**\n```\n---\ntitle: \"Developer Tutorials\"\ndescription: \"Learn to build applications on Neutron through step-by-step tutorials\"\n\n---\n\ntitle: \"Developer Tutorials\"\ndescription: \"Learn to build applications on Neutron through step-by-step tutorials\"\n---\n\n---\n\n\nWelcome to Neutron's developer tutorials! This section contains guided, step-by-step instructions to help you learn how to build applications on Neutron. Our tutorials focus on Neutron's unique integrated architecture and how to leverage its native modules for cross-chain development.\n\n```\n\n---\n\n## 8. SDK & Developer Tools\n**File:** /root/neutron/docs/developers/sdk.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"SDK & Developer Tools\"\n- Line 3: description: \"Libraries, templates, and tools for building on Neutron\"\n- Line 7: Neutron provides a comprehensive suite of SDKs and developer tools to make building on the platform as seamless as possible. This page outlines the core libraries and resources available to developers.\n- Line 12: <Card title=\"Neutron SDK\" icon=\"rust\" iconType=\"duotone\" href=\"https://github.com/neutron-org/neutron-sdk\" target=\"_blank\">\n- Line 13: <p className=\"mt-2\">The official Rust/CosmWasm SDK for interacting with Neutron blockchain features.</p>\n\n**Content Preview:**\n```\n---\ntitle: \"SDK & Developer Tools\"\ndescription: \"Libraries, templates, and tools for building on Neutron\"\n\n---\n\ntitle: \"SDK & Developer Tools\"\ndescription: \"Libraries, templates, and tools for building on Neutron\"\nicon: \"toolbox\"\n\n---\n\n\nNeutron provides a comprehensive suite of SDKs and developer tools to make building on the platform as seamless as possible. This page outlines the core libraries and resources available to developers.\n\n```\n\n---\n\n## 9. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n- Line 21: 4. **Developer Experience**: SubQuery provides a seamless developer experience with detailed documentation, examples, and tooling.\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 10. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 10: - Completed [Chain Integration Tests](/developers/tutorials/integration-tests/chain)\n- Line 11: - Understanding of CosmWasm contract development\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 11. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Part 2: Modules & Contracts\"\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 11: - Inter-contract communication patterns\n\n**Content Preview:**\n```\n---\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n\n---\n\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n```\n\n---\n\n## 12. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 5: # How-To Guide\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 20: --chain-id neutron-1 \\\n- Line 118: \"github.com/neutron-org/neutron/v6/x/globalfee/keeper\"\n- Line 119: \"github.com/neutron-org/neutron/v6/x/globalfee/types\"\n\n**Content Preview:**\n```\n\n# How-To Guide\n\n\n---\n\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n  --from validator \\\n  --chain-id neutron-1 \\\n  --gas auto \\\n```\n\n---\n\n## 13. How-To Guide\n**File:** /root/neutron/docs/developers/modules/tokenfactory/how-to.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 5: # How-To Guide\n- Line 14: neutrond tx tokenfactory create-denom mytoken \\\n- Line 16: --chain-id neutron-1 \\\n- Line 22: This creates: `factory/neutron1.../mytoken`\n- Line 27: neutrond tx tokenfactory create-denom gamecoins \\\n\n**Content Preview:**\n```\n\n# How-To Guide\n\n\n---\n\n```bash\nneutrond tx tokenfactory create-denom mytoken \\\n  --from creator \\\n\n---\n\n  --from creator \\\n  --chain-id neutron-1 \\\n  --gas auto \\\n```\n\n---\n\n## 14. Bull vs. Bear Integration\n**File:** /root/neutron/docs/developers/sdk/bullbear-integration.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 7: Bull vs. Bear is Neutron's innovative narrative trading platform that enables long-short strategies through Clusters. This guide provides developers with the tools and knowledge needed to integrate with the platform or build similar functionality.\n- Line 16: <Card title=\"BullBearLib\" icon=\"code\" iconType=\"duotone\" href=\"https://github.com/Deploydon/BullBearLib\" target=\"_blank\">\n- Line 26: <Card title=\"LocalTesting Setup\" icon=\"vial\" iconType=\"duotone\" href=\"https://github.com/Deploydon/LocalTesting\" target=\"_blank\">\n- Line 27: <p className=\"mt-2\">Local environment setup for testing trading strategies and contract interactions.</p>\n- Line 50: Deploy the entire strategy in a single transaction\n\n**Content Preview:**\n```\n\nBull vs. Bear is Neutron's innovative narrative trading platform that enables long-short strategies through Clusters. This guide provides developers with the tools and knowledge needed to integrate with the platform or build similar functionality.\n\n\n---\n\n<CardGroup cols={3}>\n  <Card title=\"BullBearLib\" icon=\"code\" iconType=\"duotone\" href=\"https://github.com/Deploydon/BullBearLib\" target=\"_blank\">\n    <p className=\"mt-2\">JavaScript helper library for interacting with Bull vs. Bear platform programmatically.</p>\n\n---\n\n  \n  <Card title=\"LocalTesting Setup\" icon=\"vial\" iconType=\"duotone\" href=\"https://github.com/Deploydon/LocalTesting\" target=\"_blank\">\n    <p className=\"mt-2\">Local environment setup for testing trading strategies and contract interactions.</p>\n```\n\n---\n\n## 15. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 16\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n- Line 7: ## For Smart Contract Developers\n- Line 17: use neutron_sdk::bindings::msg::NeutronMsg;\n- Line 18: use neutron_sdk::bindings::types::{Fee as IbcFee, Coin};\n- Line 39: let msg = NeutronMsg::IbcTransfer {\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Fee Refunder module, primarily for smart contract developers who need to include the appropriate fees when sending IBC packets.\n\n\n---\n\n\n## For Smart Contract Developers\n\n\n---\n\n// Import necessary types\nuse neutron_sdk::bindings::msg::NeutronMsg;\nuse neutron_sdk::bindings::types::{Fee as IbcFee, Coin};\n```\n\n---\n\n## 16. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 16\n\n**Matching lines:**\n- Line 3: description: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n- Line 10: Interchain Accounts are a powerful IBC feature that allows a smart contract on Neutron to control accounts on other IBC-connected chains. This enables a wide range of cross-chain applications, from managing assets across chains to controlling governance on remote chains.\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n- Line 24: - Be familiar with [Neutron's architecture](/developers/overview)\n\n**Content Preview:**\n```\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n\n\n---\n\n\nInterchain Accounts are a powerful IBC feature that allows a smart contract on Neutron to control accounts on other IBC-connected chains. This enables a wide range of cross-chain applications, from managing assets across chains to controlling governance on remote chains.\n\n```\n\n---\n\n## 17. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 16\n\n**Matching lines:**\n- Line 3: description: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n- Line 10: Interchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n- Line 16: 3. Build a simple contract that reacts to state changes on another chain\n- Line 22: - Have a basic understanding of CosmWasm smart contract development\n\n**Content Preview:**\n```\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n\n\n---\n\n\nInterchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n\n```\n\n---\n\n## 18. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for interacting with the Contract Manager module, including handling failures and resubmitting failed operations.\n- Line 7: ## Handling IBC Acknowledgments in Smart Contracts\n- Line 9: When developing contracts that use IBC functionality on Neutron, you need to properly handle acknowledgments:\n- Line 14: pub fn sudo(deps: DepsMut, env: Env, msg: SudoMsg) -> Result<Response, ContractError> {\n- Line 20: // Return success - failures will be captured by Contract Manager\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for interacting with the Contract Manager module, including handling failures and resubmitting failed operations.\n\n\n---\n\n\n## Handling IBC Acknowledgments in Smart Contracts\n\n\n---\n\n\nWhen developing contracts that use IBC functionality on Neutron, you need to properly handle acknowledgments:\n\n```\n\n---\n\n## 19. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 10: - Understanding of Neutron governance processes\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 19: - Individual users and contracts cannot directly interact with this module\n- Line 29: Neutron uses a [modular governance system](/concepts/modular-governance) with specialized subDAOs that handle different aspects of network management. The Security SubDAO can remove schedules in emergency situations, providing a safety mechanism for the network.\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n\n---\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n```\n\n---\n\n## 20. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 12: - [Overview](/developers/modules/cron/overview) \u2014 a high-level description of the module.\n- Line 13: - [Explanation](/developers/modules/cron/explanation) \u2014 an explanation of the module's concepts and the reasoning behind its design choices.\n\n**Content Preview:**\n```\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "63d6887a-aa64-45ea-a100-2c62553e8d49",
            "tool_call_id": "call_OpV3NIDB1crQxCukODHKxhDr",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "{\n  \"Set up Neutron development environment\":\"100\",\n  \"Deploy a minimal CosmWasm smart contract\":\"95\",\n  \"Run a local Neutron blockchain for testing\":\"93\",\n  \"Bootstrap a dApp with NeutronTemplate\":\"91\",\n  \"Call Neutron native modules from a contract\":\"89\",\n  \"Add Interchain Queries to a contract\":\"87\",\n  \"Execute transactions via Interchain Accounts\":\"86\",\n  \"Schedule automated executions with Cron\":\"85\",\n  \"Create custom token denoms with TokenFactory\":\"84\",\n  \"Register cross-chain state queries via ICQ\":\"83\",\n  \"Handle IBC fee refunds in smart contracts\":\"82\",\n  \"Write unit tests using cw-multi-test\":\"81\",\n  \"Run full chain integration tests\":\"80\",\n  \"Resubmit failed ops with Contract Manager\":\"79\",\n  \"Build a React frontend for your contract\":\"78\",\n  \"Index on-chain data with SubQuery\":\"77\",\n  \"Propose global fee parameter changes\":\"76\",\n  \"Submit governance proposals for Cron schedules\":\"75\",\n  \"Use Neutron SDK Rust bindings\":\"74\",\n  \"Handle IBC acknowledgments safely\":\"73\",\n  \"Launch a cross-chain DeFi application\":\"72\",\n  \"Deploy contracts to Neutron mainnet\":\"71\",\n  \"Read contract state in a web app\":\"70\",\n  \"Automate builds and scripts with cargo-make\":\"69\",\n  \"Integrate Bull vs Bear helper library\":\"68\",\n  \"Spin up local testing with Docker Compose\":\"67\",\n  \"Fetch oracle price data in contracts\":\"66\",\n  \"Implement modular governance hooks\":\"65\",\n  \"Migrate contract versions on Neutron\":\"64\",\n  \"Optimize gas usage for Neutron txs\":\"63\",\n  \"Send ICS-20 IBC transfers from contract\":\"62\",\n  \"Configure minimum fees via GlobalFee module\":\"61\",\n  \"Create a dashboard for a Neutron dApp\":\"60\",\n  \"Add wallet connect support in NextJS\":\"59\",\n  \"Implement sudo handlers in contracts\":\"58\",\n  \"Publish contract metadata on-chain\":\"57\",\n  \"Use FeeRefunder module in IBC transfers\":\"56\",\n  \"Query chain data from frontend GraphQL\":\"55\",\n  \"Monitor contract events with SubQuery\":\"54\",\n  \"Handle security subDAO emergency actions\":\"53\"\n}",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 2360,
                    "prompt_tokens": 6883,
                    "total_tokens": 9243,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 1856,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CDl29kYOqhJg8jEGijwTminA3RV",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--0495cfb3-6d74-4f52-8990-1035c8e3023e-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 6883,
                "output_tokens": 2360,
                "total_tokens": 9243,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 1856
                }
            }
        }
    ]
}