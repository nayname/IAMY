{
    "messages": [
        {
            "content": "Query Contract State",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "50c49632-aa9b-4494-98f2-4ddb8a1b1dca",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_j1QiVJ1YsntcPX6ccBCkmzAF",
                        "function": {
                            "arguments": "{\"query\":\"Query Contract State Neutron\", \"section\":\"all\", \"max_results\":20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 421,
                    "prompt_tokens": 267,
                    "total_tokens": 688,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 384,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CKon3AVgBLyrynt6aIS9ETVSiVQ",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--ca09bbf6-4b89-47a5-9704-821c7e6ef87e-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "Query Contract State Neutron",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_j1QiVJ1YsntcPX6ccBCkmzAF",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 267,
                "output_tokens": 421,
                "total_tokens": 688,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 384
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"Query Contract State Neutron\":\n\n## 1. Neutron Modules\n**File:** /root/neutron/docs/developers/modules/overview.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Neutron Modules\"\n- Line 5: Neutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n- Line 9: These modules are designed for direct integration with your smart contracts and DeFi applications:\n- Line 13: Query data from any IBC-connected blockchain\n- Line 21: Schedule automated contract executions\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Modules\"\n---\n\n---\n\n\nNeutron offers several specialized modules that provide unique functionality for developers building on the platform. Each module is designed to solve specific problems commonly encountered in DeFi applications.\n\n\n---\n\n\nThese modules are designed for direct integration with your smart contracts and DeFi applications:\n\n```\n\n---\n\n## 2. NeutronTemplate\n**File:** /root/neutron/docs/developers/sdk/neutron-template.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"NeutronTemplate\"\n- Line 3: description: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n- Line 7: NeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n- Line 10: <strong>Live Demo:</strong> <a href=\"https://neutrontemplate.deploydon.com\" target=\"_blank\" className=\"text-primary hover:underline\">https://NeutronTemplate.Deploydon.com</a>\n- Line 34: <li>TanStack Query for data fetching</li>\n\n**Content Preview:**\n```\n---\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\n\n---\n\ntitle: \"NeutronTemplate\"\ndescription: \"Complete NextJS + CosmWasm template for building Neutron dApps\"\nicon: \"code\"\n\n---\n\n\nNeutronTemplate is a comprehensive starting point for building NextJS applications that interact with Neutron. It includes everything needed to create a modern, full-stack dApp with wallet integration, smart contract interaction, and a polished UI.\n\n```\n\n---\n\n## 3. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 10: A simple counter contract that:\n- Line 13: - Provides a query interface to read the current value\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 4. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 8: ## Key Advantages of SubQuery\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 5. Part 2: Modules & Contracts\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-2-modules-contracts.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Part 2: Modules & Contracts\"\n- Line 3: description: \"Learn how to interact with Neutron modules and other smart contracts\"\n- Line 6: In this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n- Line 10: - How to use Neutron's custom modules (Oracle, Cron, ICQ)\n- Line 11: - Inter-contract communication patterns\n\n**Content Preview:**\n```\n---\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n\n---\n\ntitle: \"Part 2: Modules & Contracts\"\ndescription: \"Learn how to interact with Neutron modules and other smart contracts\"\n---\n\n---\n\n\nIn this tutorial, you'll extend your knowledge by learning how to interact with Neutron's unique modules and call other smart contracts. This is where Neutron's power really shines.\n\n```\n\n---\n\n## 6. Bridge Contracts\n**File:** /root/neutron/docs/resources/contracts/bridge.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"Bridge Contracts\"\n- Line 3: description: \"Information about Neutron's cross-chain bridge contracts\"\n- Line 7: This page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n- Line 9: ## Mainnet (neutron-1)\n- Line 11: | Contract | Address | Code ID |\n\n**Content Preview:**\n```\n---\ntitle: \"Bridge Contracts\"\ndescription: \"Information about Neutron's cross-chain bridge contracts\"\n\n---\n\ntitle: \"Bridge Contracts\"\ndescription: \"Information about Neutron's cross-chain bridge contracts\"\nicon: \"bridge\"\n\n---\n\n\nThis page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n\n```\n\n---\n\n## 7. Neutron DAO Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-dao.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"Neutron DAO Contracts\"\n- Line 3: description: \"Addresses and information for Neutron DAO smart contracts\"\n- Line 7: This page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n- Line 9: ## Mainnet (neutron-1)\n- Line 13: | Neutron DAO Core | `neutron1suhgf5svhu4usrurvxzlgn54ksxmn8gljarjtxqnapv8kjnp4nrstdxvff` | [cwd-core](https://github.com/neutron-org/neutron-dao) | 325 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\n\n---\n\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\nicon: \"building-columns\"\n\n---\n\n\nThis page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n\n```\n\n---\n\n## 8. Neutron TGE Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-tge.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"Neutron TGE Contracts\"\n- Line 3: description: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n- Line 7: This page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n- Line 9: ## Mainnet (neutron-1)\n- Line 13: | Airdrop | `neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56` | [cw20-merkle-airdrop](https://github.com/neutron-org/neutron-tge-contracts) | 196 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n\n---\n\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\nicon: \"rocket-launch\"\n\n---\n\n\nThis page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n\n```\n\n---\n\n## 9. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"Neutron Vesting Contracts\"\n- Line 3: description: \"Information about Neutron's token vesting smart contracts\"\n- Line 7: This page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n- Line 9: ## Mainnet (neutron-1)\n- Line 13: | Neutron Vesting Investors [no voting power] | `neutron14q5elxj4ghktt7d7d0uw0cs0gqyeay25h5fkree897gjm38gevxqmvqsq5` | [vesting-investors](https://github.com/neutron-org/neutron-tge-contracts) | 28 |\n\n**Content Preview:**\n```\n---\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\n\n---\n\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\nicon: \"clock\"\n\n---\n\n\nThis page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n\n```\n\n---\n\n## 10. DeFi on Neutron\n**File:** /root/neutron/docs/defi/overview.mdx\n**Section:** defi\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 2: title: \"DeFi on Neutron\"\n- Line 3: description: \"Neutron's integrated financial infrastructure powers capital-efficient DeFi products\"\n- Line 7: Neutron is purpose-built for next-generation decentralized finance, offering integrated infrastructure that enables unprecedented capital efficiency, low latency, and seamless composability across a thriving ecosystem of applications.\n- Line 19: The Cron module enables scheduled, conditional, and gasless contract execution without relying on external keepers or bots, ensuring reliable automation.\n- Line 42: Neutron's architectural advantage comes from how its core modules work together to create a unified DeFi experience:\n\n**Content Preview:**\n```\n---\ntitle: \"DeFi on Neutron\"\ndescription: \"Neutron's integrated financial infrastructure powers capital-efficient DeFi products\"\n\n---\n\ntitle: \"DeFi on Neutron\"\ndescription: \"Neutron's integrated financial infrastructure powers capital-efficient DeFi products\"\nicon: \"chart-line\"\n\n---\n\n\nNeutron is purpose-built for next-generation decentralized finance, offering integrated infrastructure that enables unprecedented capital efficiency, low latency, and seamless composability across a thriving ecosystem of applications.\n\n```\n\n---\n\n## 11. DEX State\n**File:** /root/neutron/docs/developers/modules/dex/state.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"DEX State\"\n- Line 3: description: \"State management and storage in the DEX module\"\n- Line 6: The DEX module maintains state to track pools, reserves, limit orders, and user positions. All state objects are defined in protocol buffer files and stored in the module's key-value store.\n- Line 8: ## Core State Objects\n- Line 175: ## State Management\n\n**Content Preview:**\n```\n---\ntitle: \"DEX State\"\ndescription: \"State management and storage in the DEX module\"\n\n---\n\ntitle: \"DEX State\"\ndescription: \"State management and storage in the DEX module\"\n---\n\n---\n\n\nThe DEX module maintains state to track pools, reserves, limit orders, and user positions. All state objects are defined in protocol buffer files and stored in the module's key-value store.\n\n```\n\n---\n\n## 12. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 17: Test individual contract functions in isolation\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 13. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 6: The admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n- Line 9: **Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 24: - [State](/developers/modules/admin/state) \u2014 state management details.\n- Line 25: - [Client](/developers/modules/admin/client) \u2014 query client details (no transaction commands available).\n- Line 29: The admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n\n**Content Preview:**\n```\n\nThe admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n\n\n---\n\n<Warning>\n**Main DAO Exclusive Access**: The admin module can **only** be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n  - [Events](/developers/modules/admin/events) \u2014 events emitted by the module.\n  - [State](/developers/modules/admin/state) \u2014 state management details.\n  - [Client](/developers/modules/admin/client) \u2014 query client details (no transaction commands available).\n```\n\n---\n\n## 14. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 3: description: \"Query cross-chain data and receive verification for on-chain use\"\n- Line 6: This document explains the `interchainqueries` module for the Neutron network.\n- Line 8: Interchain Queries allow developers to get verifiable data from other blockchains. This feature is essential for creating secure cross-chain applications. The module uses Merkle proofs and IBC clients to confirm the accuracy of the data retrieved directly from the storage of the target blockchain. It allows any smart contract to register Interchain Queries without needing any special module on the target blockchain.\n- Line 11: While the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n- Line 19: - [Reference](/developers/modules/interchain-queries/reference) \u2014 complete technical reference including API endpoints, messages, events, state, and CLI commands.\n\n**Content Preview:**\n```\ntitle: \"Interchain Queries Module\"\ndescription: \"Query cross-chain data and receive verification for on-chain use\"\n---\n\n---\n\n\nThis document explains the `interchainqueries` module for the Neutron network.\n\n\n---\n\n\nInterchain Queries allow developers to get verifiable data from other blockchains. This feature is essential for creating secure cross-chain applications. The module uses Merkle proofs and IBC clients to confirm the accuracy of the data retrieved directly from the storage of the target blockchain. It allows any smart contract to register Interchain Queries without needing any special module on the target blockchain.\n\n```\n\n---\n\n## 15. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 3: description: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n- Line 10: Interchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n- Line 14: 1. Register an interchain query\n- Line 15: 2. Process query results\n\n**Content Preview:**\n```\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n\n\n---\n\n\nInterchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n\n```\n\n---\n\n## 16. Indexer Development Tutorials\n**File:** /root/neutron/docs/developers/tutorials/indexers/overview.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 3: description: \"Learn how to build and use indexers for Neutron data\"\n- Line 6: This section contains tutorials focused on building and using indexers for Neutron data. Indexers are essential tools for efficiently querying and analyzing blockchain data, enabling you to build powerful applications and analytics.\n- Line 14: <Card title=\"SubQuery for Neutron\" icon=\"magnifying-glass-chart\" iconType=\"duotone\" href=\"/developers/tutorials/indexers/subquery\">\n- Line 15: Learn how to set up and use SubQuery to index Neutron data\n- Line 20: - Indexing contract events and state changes\n\n**Content Preview:**\n```\ntitle: \"Indexer Development Tutorials\"\ndescription: \"Learn how to build and use indexers for Neutron data\"\n---\n\n---\n\n\nThis section contains tutorials focused on building and using indexers for Neutron data. Indexers are essential tools for efficiently querying and analyzing blockchain data, enabling you to build powerful applications and analytics.\n\n\n---\n\n  </Card>\n  <Card title=\"SubQuery for Neutron\" icon=\"magnifying-glass-chart\" iconType=\"duotone\" href=\"/developers/tutorials/indexers/subquery\">\n    Learn how to set up and use SubQuery to index Neutron data\n```\n\n---\n\n## 17. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 9: **Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n- Line 14: The admin module serves as the central governance hub for the Neutron network, designed to handle administrative operations through a secure, controlled framework. The module architecture consists of several key components working together to ensure safe and effective network governance.\n- Line 22: The keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n- Line 41: - Custom WASM proposals for smart contract operations\n- Line 43: 2. **Handler System**: Legacy proposals are processed through dedicated handlers that understand the specific proposal format and execute the appropriate state changes.\n\n**Content Preview:**\n```\n<Warning>\n**Main DAO Exclusive Access**: The admin module can only be accessed by the Main DAO contract through WebAssembly bindings. Individual users, external contracts, and CLI commands cannot directly interact with this module. All operations must go through Neutron's DAO governance process.\n</Warning>\n\n---\n\n\nThe admin module serves as the central governance hub for the Neutron network, designed to handle administrative operations through a secure, controlled framework. The module architecture consists of several key components working together to ensure safe and effective network governance.\n\n\n---\n\n#### Keeper\nThe keeper manages the module's state and provides the core functionality for proposal execution, whitelisting, and authority verification. It serves as the interface between the message server and the underlying blockchain state.\n\n```\n\n---\n\n## 18. Reference\n**File:** /root/neutron/docs/developers/modules/admin/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 6: The admin module provides governance-level administrative functions for the Neutron network.\n- Line 9: **DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n- Line 44: ### QueryAdmins\n- Line 50: ### QueryParams\n- Line 56: ### QueryWhitelist\n\n**Content Preview:**\n```\n\nThe admin module provides governance-level administrative functions for the Neutron network.\n\n\n---\n\n<Warning>\n**DAO-Only Access**: All admin module message types can only be executed by the Main DAO contract through WebAssembly bindings. Individual users cannot directly submit these messages via CLI or other transaction methods.\n</Warning>\n\n---\n\n\n### QueryAdmins\nRetrieve the list of administrators.\n```\n\n---\n\n## 19. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 20: **Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 35: The module stores this schedule in its state and begins executing it according to the specified period.\n- Line 39: The module hooks into Neutron's block production process to check for schedules due for execution:\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n\n**Content Preview:**\n```\n<Warning>\n**Governance-Only Access**: The Cron module is governance-gated. Only the Main DAO or Security SubDAO can create, modify, or remove schedules. Individual users and contracts cannot directly interact with this module.\n</Warning>\n\n---\n\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n\nThe module stores this schedule in its state and begins executing it according to the specified period.\n\n```\n\n---\n\n## 20. Cron Module\n**File:** /root/neutron/docs/developers/modules/cron/overview.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 3: description: \"Schedule automated smart contract executions with block-based timing\"\n- Line 6: This document explains the `cron` module for the Neutron network.\n- Line 8: The Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n- Line 16: - [Reference](/developers/modules/cron/reference) \u2014 comprehensive technical details including messages, events, state, client, and API documentation.\n- Line 29: - Contracts cannot directly create schedules\n\n**Content Preview:**\n```\ntitle: \"Cron Module\"\ndescription: \"Schedule automated smart contract executions with block-based timing\"\n---\n\n---\n\n\nThis document explains the `cron` module for the Neutron network.\n\n\n---\n\n\nThe Cron module allows scheduling automatic smart contract executions at predefined block intervals, similar to Unix cron jobs. This feature enables time-based automation in blockchain applications through governance-controlled schedule management.\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "eb474f66-2618-49f2-8acf-c182ebd9d94a",
            "tool_call_id": "call_j1QiVJ1YsntcPX6ccBCkmzAF",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "{\n\"Get current counter value from deployed counter contract\":100,\n\"Query contract config parameters\":98,\n\"Query contract state with CLI command wasm query contract-state smart\":96,\n\"Query contract state via Neutron LCD REST endpoint\":94,\n\"Query contract state using cosmjs wasmClient.queryContractSmart\":92,\n\"Query contract state from a TypeScript dApp\":90,\n\"Query list of tokens held by an address via a CW20 contract\":88,\n\"Get CW20 token balance for a user\":86,\n\"Query CW20 token allowance\":84,\n\"Query total supply of a CW20 token\":82,\n\"Query DAO proposal state from Neutron DAO core contract\":80,\n\"Query DAO member voting power\":78,\n\"Query vesting contract schedule details\":76,\n\"Query bridge contract transfer record\":74,\n\"Query DEX pool reserves state\":72,\n\"Query DEX limit order book state\":70,\n\"Query Cron module schedule for a contract\":68,\n\"Query admin module whitelist state\":66,\n\"Query interchain query registration status\":64,\n\"Register an ICQ to query remote chain contract state\":62,\n\"Query ICQ result for remote contract\":60,\n\"Query IBC light-client consensus state\":58,\n\"Use SubQuery GraphQL to fetch contract events\":56,\n\"Use SubQuery to fetch historical contract state changes\":54,\n\"Query contract state in testnet environment\":52,\n\"Query contract state on mainnet (neutron-1)\":50,\n\"Query module parameters via CLI --node\":48,\n\"Query contract code info\":46,\n\"Query contract history to track upgrades\":44,\n\"Query contract metadata and schema\":42,\n\"Query contract\u2019s WASM bytecode checksum\":40,\n\"Query smart contract\u2019s instantiate message\":38,\n\"Query contract admin address via WASM state\":36,\n\"Query CW721 NFT metadata\":34,\n\"Query CW721 NFT owner of a tokenId\":32,\n\"Query CW721 contract config\":30,\n\"Query CW4 group members list\":28,\n\"Query CW4 group admin\":26,\n\"Query Cron module pending executions for a contract\":24,\n\"Query fee-grant state for a contract\":22,\n\"Query governance proposals affecting a contract\":20,\n\"Query module states via gRPC\":18,\n\"Query contract state using a Python SDK\":16,\n\"Query contract state in a NextJS dApp with TanStack Query\":14,\n\"Query contract state from a mobile wallet\":12,\n\"Query contract state using a block explorer\":10,\n\"Query raw protobuf storage of a contract\":8,\n\"Query contract state after a migration\":6,\n\"Query contract state snapshot for backup\":4,\n\"Query contract state with pagination options\":2\n}",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 2121,
                    "prompt_tokens": 7187,
                    "total_tokens": 9308,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 1536,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C4CKxNa1OClAefQJ5wcUEm6QxeJTs",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--d96e0432-a18e-402e-9dfa-8f7413f52aff-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 7187,
                "output_tokens": 2121,
                "total_tokens": 9308,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 1536
                }
            }
        }
    ]
}