{
    "Bootstrap Project": {
        "Initialize a new CosmWasm project on Neutron": "100",
        "Bootstrap a Neutron node for RPC access": "97",
        "Generate a project with the Neutron boilerplate template": "95",
        "Create a minimal smart-contract using cargo new": "93",
        "Configure project structure for Interchain Accounts (ICA)": "91",
        "Configure project structure for Interchain Queries (ICQ)": "90",
        "Set up a SubQuery indexing project for Neutron": "88",
        "Install the Rust/CosmWasm toolchain and other dependencies": "87",
        "Prepare an integration-testing workspace": "85",
        "Use the NeutronTemplate full-stack demo as a starter": "84",
        "Add TokenFactory module interaction code to a new project": "82",
        "Create and populate .env / config files for local and testnet": "81",
        "Initialize Git and commit the starter sources": "80",
        "Compile the contract with cargo wasm": "79",
        "Optimize the Wasm binary for on-chain upload": "78",
        "Write instantiate/execute/query entry points": "77",
        "Generate JSON schema files for messages": "76",
        "Write unit tests for contract logic in Rust": "75",
        "Run a local Neutron testnet for contract debugging": "74",
        "Deploy the contract to Neutron testnet": "73",
        "Interact with the contract via Neutron CLI": "72",
        "Debug common build or linking errors": "71",
        "Set up CI workflows for continuous testing": "70",
        "Add multiple crates to a CosmWasm workspace": "69",
        "Handle storage and state migrations in a project": "68",
        "Import and use Neutron-specific SDK crates": "67",
        "Generate a cw-template project with cargo generate": "66",
        "Update Cargo.toml dependencies to latest versions": "65",
        "Add an ICS (ICA) example execution flow": "64",
        "Use cosmwasm-multi-test for contract tests": "63",
        "Mock dependencies in unit tests": "62",
        "Implement on-chain state migration patterns": "61",
        "Spin up nodes quickly using snapshot playbooks": "60",
        "Bootstrap a validator node after full sync": "59",
        "Use Neutron snapshot service to skip initial sync": "58",
        "Tune config.toml and app.toml for optimal performance": "57",
        "Expose RPC, REST and gRPC ports securely": "56",
        "Monitor node health, logs and metrics": "55",
        "Back up and restore validator keys safely": "54",
        "Perform a binary upgrade without downtime": "53"
    }
}