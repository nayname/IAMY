{
	"project_initialization": {
		"description": "Comprehensive project setup and initialization tools for creating new CosmWasm projects on Neutron. This consolidated tool handles project generation from templates, dependency setup, workspace configuration, and initial project structure creation with proper Neutron-specific configurations.",
		"scaffold": "ProjectInitializer class with methods: generate_from_template(), setup_dependencies(), configure_workspace(), initialize_structure(), setup_neutron_config(), create_demo_project()",
		"tools_included": [
			"cargo_generate",
			"project_initializer",
			"neutron_sdk_setup",
			"cosmwasm_template",
			"neutron_contract_setup",
			"cargo_workspace",
			"project_structure",
			"shared_dependencies",
			"project_bootstrap",
			"template_cloner",
			"project_generator",
			"project_creator",
			"create_airdrop_project",
			"demo_project_generator"
		]
	},
	"development_environment": {
		"description": "Complete development environment setup and management tools for Neutron development. Handles IDE configuration, extension setup, dependency installation, environment cleanup, and local blockchain testing environment setup including Docker Compose and Cosmopark integration.",
		"scaffold": "EnvironmentManager class with methods: setup_ide(), install_dependencies(), configure_extensions(), setup_docker_environment(), integrate_cosmopark(), clean_environment(), bootstrap_fresh()",
		"tools_included": [
			"network_configurator",
			"deployment_config",
			"ide_launcher",
			"extension_setup",
			"ci_pipeline_setup",
			"automated_testing",
			"dependency_installer",
			"development_environment",
			"project_cleaner",
			"fresh_bootstrap",
			"build_optimizer",
			"sample_data_generator",
			"documentation_creator",
			"docker_compose_setup",
			"cosmopark_integration",
			"setup_docker_compose"
		]
	},
	"code_formatting": {
		"description": "Comprehensive Rust code formatting and style management tools specifically designed for CosmWasm contracts. Handles workspace-wide formatting, style validation, compliance checking, and automated formatting with backup and rollback capabilities.",
		"scaffold": "CodeFormatter class with methods: format_workspace(), validate_style(), check_compliance(), format_contracts(), fix_issues_automatically(), create_backups(), enforce_standards()",
		"tools_included": [
			"cargo_fmt_runner",
			"rustfmt_config_manager",
			"workspace_formatter",
			"format_validator",
			"style_analyzer",
			"comprehensive_formatter",
			"crate_discoverer",
			"multi_crate_formatter",
			"standard_enforcer",
			"compliance_checker",
			"cosmwasm_formatter",
			"contract_style_optimizer",
			"consistency_formatter",
			"uniformity_validator",
			"issue_detector",
			"automatic_fixer",
			"pre_commit_formatter",
			"commit_style_validator",
			"in_place_formatter",
			"backup_manager"
		]
	},
	"balance_querying": {
		"description": "Comprehensive balance and token information querying tools for Neutron addresses. Supports multiple query methods (CLI, REST, gRPC), handles various token types (NTRN, IBC, TokenFactory), provides formatted output, and includes address validation and denomination resolution.",
		"scaffold": "BalanceQuerier class with methods: query_balance(), query_all_balances(), validate_address(), format_display(), categorize_tokens(), query_by_denom(), convert_denominations(), get_metadata()",
		"tools_included": [
			"query_bank_balance_cli",
			"query_bank_balance_rest",
			"query_bank_balance_grpc",
			"parse_address_validation",
			"query_all_balances_cli",
			"query_all_balances_rest",
			"query_all_balances_grpc",
			"format_balance_display",
			"query_bank_balances",
			"query_balance_by_denom",
			"validate_neutron_address",
			"format_balance_response",
			"query_untrn_balance",
			"query_bank_balance_specific",
			"convert_untrn_to_ntrn",
			"validate_validator_address",
			"query_contract_balances",
			"query_bank_all_balances",
			"identify_token_types",
			"format_contract_balance",
			"query_untrn_precise",
			"query_bank_balance_raw",
			"validate_address_format",
			"return_precise_amount",
			"query_multisig_balances",
			"query_treasury_funds",
			"categorize_treasury_assets",
			"format_treasury_report",
			"query_deployment_funds",
			"check_gas_funds",
			"query_all_available_assets",
			"estimate_deployment_costs",
			"query_grpc_balances",
			"connect_grpc_endpoint",
			"query_airdrop_balances",
			"format_grpc_response",
			"query_default_endpoint",
			"query_cold_storage_balance",
			"use_default_neutron_config",
			"secure_balance_query",
			"query_bank_balance_by_denom",
			"query_ibc_denoms",
			"query_tokenfactory_denoms",
			"query_all_balances",
			"query_ibc_balances",
			"enumerate_all_coins",
			"get_token_metadata",
			"calculate_total_value",
			"categorize_assets",
			"get_asset_details",
			"format_asset_breakdown",
			"fetch_all_denominations",
			"resolve_denom_names",
			"display_denom_balances",
			"generate_balance_sheet",
			"include_staking_balances",
			"show_liquid_vs_locked",
			"query_held_denominations",
			"get_denomination_info",
			"list_denomination_sources",
			"count_tokens_by_type",
			"get_token_amounts",
			"summarize_holdings",
			"query_bank_module",
			"format_bank_display",
			"include_fee_tokens",
			"retrieve_complete_balances",
			"parse_balance_data"
		]
	},
	"token_transfer": {
		"description": "Comprehensive token transfer and transaction management tools for Neutron. Handles native NTRN transfers, IBC transfers, multi-token operations, address validation, fee calculation, and transaction broadcasting with support for various wallet types and signing methods.",
		"scaffold": "TokenTransfer class with methods: transfer_native(), transfer_ibc(), validate_addresses(), calculate_fees(), sign_transaction(), broadcast_transaction(), handle_multisig(), batch_transfer()",
		"tools_included": [
			"bank_send",
			"wallet_balance_check",
			"transaction_fee_calculator",
			"address_validator",
			"ibc_transfer",
			"balance_checker",
			"ibc_channel_resolver",
			"gas_estimator",
			"balance_validator",
			"address_formatter",
			"fee_calculator",
			"balance_query",
			"cross_chain_bridge",
			"gas_default_setter",
			"address_converter",
			"ledger_signer",
			"address_book",
			"transaction_builder",
			"rpc_connector",
			"transaction_broadcaster",
			"bridge_transfer",
			"gas_optimizer",
			"contact_resolver",
			"multisig_transfer",
			"hot_key_signer",
			"multisig_address_resolver",
			"batch_transfer",
			"bank_multi_send",
			"balance_query_all",
			"multi_denom_transfer",
			"account_cleaner",
			"testnet_token_handler"
		]
	},
	"contract_compilation": {
		"description": "Complete smart contract compilation and optimization pipeline for CosmWasm contracts on Neutron. Handles Rust compilation to WebAssembly, Docker-based optimization, cross-platform builds, artifact management, and production-ready binary generation.",
		"scaffold": "ContractCompiler class with methods: compile_wasm(), optimize_binary(), build_for_architecture(), generate_artifacts(), validate_contract(), prepare_for_deployment()",
		"tools_included": [
			"cargo_wasm_build",
			"docker_optimizer",
			"artifact_retrieval",
			"cargo_build_target",
			"rust_optimizer_arm64",
			"binary_verification",
			"cargo_build_x86",
			"rust_optimizer_x86",
			"cross_compilation",
			"docker_rust_optimizer",
			"volume_mounting",
			"deployment_artifact",
			"workspace_builder",
			"batch_optimizer",
			"binary_listing",
			"contract_compiler",
			"wasm_optimizer",
			"contract_validator",
			"build_pipeline",
			"neutron_preparation",
			"upload_readiness",
			"project_compiler",
			"wasm_optimization",
			"final_output",
			"workspace_optimizer",
			"build_execution",
			"binary_location",
			"production_compiler",
			"size_optimizer",
			"production_validator"
		]
	},
	"contract_testing": {
		"description": "Comprehensive testing framework for CosmWasm smart contracts including unit tests, integration tests, and contract validation. Supports cargo test execution, test environment setup, coverage analysis, and specialized testing for different contract types.",
		"scaffold": "ContractTester class with methods: run_unit_tests(), run_integration_tests(), setup_test_environment(), analyze_coverage(), validate_contracts(), generate_reports()",
		"tools_included": [
			"cargo_test_runner",
			"test_environment_setup",
			"contract_test_validator",
			"test_coverage_analyzer",
			"cargo_test_executor",
			"rust_test_framework",
			"cosmwasm_test_runner",
			"test_output_formatter",
			"vesting_test_suite",
			"cargo_test_launcher",
			"mock_environment_setup",
			"test_result_reporter",
			"unit_test_runner",
			"integration_test_executor",
			"cargo_test_manager",
			"test_suite_orchestrator",
			"auction_test_validator",
			"spec_compliance_checker",
			"test_assertion_validator",
			"cosmwasm_test_executor",
			"test_output_displayer",
			"staking_test_validator",
			"cargo_build_validator",
			"build_test_orchestrator",
			"cw721_test_suite",
			"oracle_test_runner",
			"test_result_collector",
			"oracle_integration_tester",
			"test_suite_launcher",
			"cargo_test_orchestrator",
			"commission_test_validator",
			"full_test_suite_runner",
			"multi_sig_test_runner",
			"failure_reporter",
			"multi_sig_validator",
			"test_generator"
		]
	},
	"contract_deployment": {
		"description": "Complete smart contract deployment and management system for Neutron blockchain. Handles WASM contract storage, code ID management, network configuration, transaction signing, and deployment monitoring with support for multiple networks and signing methods.",
		"scaffold": "ContractDeployer class with methods: store_contract(), extract_code_id(), configure_network(), sign_deployment(), monitor_transaction(), manage_signer()",
		"tools_included": [
			"wasm_store",
			"file_reader",
			"code_id_extractor",
			"network_selector",
			"grpc_client",
			"response_formatter",
			"signer_manager",
			"neutrond_cli",
			"transaction_monitor",
			"result_formatter",
			"success_validator",
			"notification_sender"
		]
	},
	"contract_interaction": {
		"description": "Comprehensive smart contract execution and interaction tools for deployed contracts on Neutron. Handles contract method execution, parameter formatting, gas management, transaction signing, and specialized operations for different contract types including CW20, staking, governance, and oracle contracts.",
		"scaffold": "ContractExecutor class with methods: execute_contract(), format_parameters(), estimate_gas(), sign_transaction(), handle_specialized_contracts(), manage_allowances()",
		"tools_included": [
			"execute_contract",
			"rpc_client",
			"transaction_signer",
			"gas_auto_estimator",
			"wallet_signer",
			"amount_converter",
			"gas_limiter",
			"reward_claimer",
			"cw20_executor",
			"token_transfer",
			"amount_formatter",
			"staking_executor",
			"validator_resolver",
			"amount_validator",
			"delegation_manager",
			"cw20_approver",
			"dex_router_interface",
			"allowance_manager",
			"cw20_burner",
			"burn_validator",
			"governance_executor",
			"proposal_resolver",
			"vote_formatter",
			"dao_interface",
			"demo_contract_executor",
			"gas_price_setter",
			"counter_interface",
			"oracle_executor",
			"price_formatter"
		]
	},
	"contract_querying": {
		"description": "Comprehensive smart contract state querying and data retrieval system for Neutron contracts. Handles contract state queries, response parsing, specialized queries for different contract types, and data formatting for various use cases including CW20 tokens, NFTs, DAOs, and DeFi protocols.",
		"scaffold": "ContractQuerier class with methods: query_contract_state(), parse_responses(), query_specialized_contracts(), format_data(), calculate_derived_values(), fetch_metadata()",
		"tools_included": [
			"query_contract_state",
			"parse_contract_response",
			"query_cw20_balance",
			"format_token_amount",
			"query_marketplace_listing",
			"parse_bid_data",
			"parse_funding_data",
			"query_staking_rewards",
			"calculate_reward_amounts",
			"query_cw20_allowance",
			"format_allowance_data",
			"query_dao_proposal",
			"parse_proposal_status",
			"query_nft_token_uri",
			"fetch_nft_metadata",
			"query_vesting_schedule",
			"format_vesting_timeline",
			"query_vault_position",
			"calculate_liquidation_price"
		]
	}
}