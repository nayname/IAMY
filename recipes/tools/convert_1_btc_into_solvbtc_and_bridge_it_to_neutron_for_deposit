{
    "tools": [
        {
            "step": 1,
            "label": "frontend",
            "introduction": "Retrieves the user\u2019s Bitcoin wallet address via the Unisat extension (or a manual prompt as fallback).",
            "function": "getBTCWalletAddress()",
            "usage": "const btcAddress = await getBTCWalletAddress();"
        },
        {
            "step": 2,
            "label": "backend",
            "introduction": "Requests a unique solvBTC gateway deposit address that is bound to the supplied EVM address.",
            "function": "generate_deposit_address({ evm_address })",
            "usage": "const { deposit_address } = await generate_deposit_address({ evm_address: userEvm });"
        },
        {
            "step": 3,
            "label": "backend",
            "introduction": "Builds and signs a raw Bitcoin transaction that transfers exactly 1 BTC to the generated deposit address.",
            "function": "construct_and_sign_btc_tx({ wif, destination, fee_sat_per_byte })",
            "usage": "const { raw_tx_hex } = construct_and_sign_btc_tx({ wif: userWif, destination: depositAddress, fee_sat_per_byte: 10 });"
        },
        {
            "step": 4,
            "label": "backend",
            "introduction": "Broadcasts the raw Bitcoin transaction to the network and returns the resulting TXID.",
            "function": "broadcast_btc_tx({ raw_tx_hex })",
            "usage": "const { txid } = await broadcast_btc_tx({ raw_tx_hex });"
        },
        {
            "step": 5,
            "label": "backend",
            "introduction": "Polls the Blockstream API until the Bitcoin transaction reaches the required six confirmations.",
            "function": "wait_for_confirmations(txid, required=6, poll_seconds=60)",
            "usage": "await wait_for_confirmations(txid, 6);"
        },
        {
            "step": 6,
            "label": "backend",
            "introduction": "Submits the confirmed BTC deposit proof to Solv\u2019s minting contract on Ethereum, minting 1 solvBTC.",
            "function": "attest_and_mint({ btc_txid, btc_destination, evm_address })",
            "usage": "const { eth_tx_hash } = attest_and_mint({ btc_txid: txid, btc_destination: depositAddress, evm_address: userEvm });"
        },
        {
            "step": 7,
            "label": "backend",
            "introduction": "Uses the Axelar gateway to bridge 1 solvBTC from Ethereum to the user\u2019s Neutron address, creating the IBC voucher.",
            "function": "bridge_to_neutron({ eth_tx_hash, neutron_address, amount_wei })",
            "usage": "const { axelar_tx_hash } = await bridge_to_neutron({ eth_tx_hash, neutron_address: neutronAddr, amount_wei: amountWei });"
        },
        {
            "step": 8,
            "label": "backend",
            "introduction": "Queries the Neutron chain to confirm the arrival of the solvBTC voucher in the user\u2019s wallet.",
            "function": "query_balance_(address)",
            "usage": "const balanceInfo = query_balance_(neutronAddr);"
        }
    ],
    "frontend": [
        "const btcAddress = await getBTCWalletAddress();//step: 1 Tool: get_btc_wallet_address Desciption: Determine the source Bitcoin address that will provide the 1 BTC."
    ],
    "backend": [
        "const { deposit_address } = await generate_deposit_address({ evm_address: userEvm });#step: 2 Tool: generate_solvbtc_deposit_address Desciption: Request a unique SolvBTC gateway deposit address that links to the user\u2019s EVM destination.",
        "const { raw_tx_hex } = construct_and_sign_btc_tx({ wif: userWif, destination: depositAddress, fee_sat_per_byte: 10 });#step: 3 Tool: construct_btc_tx Desciption: Create and sign a Bitcoin transaction sending exactly 1 BTC to the generated deposit address.",
        "const { txid } = await broadcast_btc_tx({ raw_tx_hex });#step: 4 Tool: broadcast_btc_tx Desciption: Publish the transaction to the Bitcoin network and record its TXID.",
        "await wait_for_confirmations(txid, 6);#step: 5 Tool: wait_for_confirmations Desciption: Poll until the BTC transaction reaches the Solv-required confirmation threshold (e.g., 6 blocks).",
        "const { eth_tx_hash } = attest_and_mint({ btc_txid: txid, btc_destination: depositAddress, evm_address: userEvm });#step: 6 Tool: attest_and_mint_solvbtc Desciption: Submit the proof of the confirmed BTC deposit to Solv\u2019s minting contract on Ethereum; receive 1 solvBTC ERC-20.",
        "const { axelar_tx_hash } = await bridge_to_neutron({ eth_tx_hash, neutron_address: neutronAddr, amount_wei: amountWei });#step: 7 Tool: bridge_asset_to_neutron Desciption: Use the supported bridge (e.g., Axelar or Wormhole) to transfer 1 solvBTC from Ethereum to Neutron, generating an IBC voucher representing solvBTC on Neutron.",
        "const balanceInfo = query_balance_(neutronAddr);#step: 8 Tool: query_balance_neutron Desciption: Confirm the receipt of 1 solvBTC voucher in the user\u2019s Neutron wallet."
    ],
    "intent": "Convert 1 BTC into solvBTC and bridge it to Neutron for deposit",
    "workflow": [
        {
            "step": 1,
            "tool": "get_btc_wallet_address",
            "description": "Determine the source Bitcoin address that will provide the 1 BTC."
        },
        {
            "step": 2,
            "tool": "generate_solvbtc_deposit_address",
            "description": "Request a unique SolvBTC gateway deposit address that links to the user\u2019s EVM destination."
        },
        {
            "step": 3,
            "tool": "construct_btc_tx",
            "description": "Create and sign a Bitcoin transaction sending exactly 1 BTC to the generated deposit address."
        },
        {
            "step": 4,
            "tool": "broadcast_btc_tx",
            "description": "Publish the transaction to the Bitcoin network and record its TXID."
        },
        {
            "step": 5,
            "tool": "wait_for_confirmations",
            "description": "Poll until the BTC transaction reaches the Solv-required confirmation threshold (e.g., 6 blocks)."
        },
        {
            "step": 6,
            "tool": "attest_and_mint_solvbtc",
            "description": "Submit the proof of the confirmed BTC deposit to Solv\u2019s minting contract on Ethereum; receive 1 solvBTC ERC-20."
        },
        {
            "step": 7,
            "tool": "bridge_asset_to_neutron",
            "description": "Use the supported bridge (e.g., Axelar or Wormhole) to transfer 1 solvBTC from Ethereum to Neutron, generating an IBC voucher representing solvBTC on Neutron."
        },
        {
            "step": 8,
            "tool": "query_balance_neutron",
            "description": "Confirm the receipt of 1 solvBTC voucher in the user\u2019s Neutron wallet."
        }
    ],
    "outcome_checks": [
        "Bitcoin transaction confirmed with 1 BTC exactly.",
        "Ethereum transaction shows 1 solvBTC minted to the user\u2019s EVM address.",
        "Bridge transaction finalized with 1 solvBTC voucher credited to the Neutron address.",
        "solvBTC balance on Neutron matches 1 token (minus bridge fees, if any)."
    ]
}