{
    "label": "others",
    "workflow": [
        {
            "step": 1,
            "label": "frontend",
            "introduction": "Step 1 captures the current value of a duration slider (in months) from the DOM.",
            "code": "/*\n * Reads the value from an <input type=\"range\"> element and returns it as an integer.\n * @param {string} sliderElementId \u2013 The DOM id of the slider.\n * @returns {number} \u2013 The selected number of months.\n * @throws {Error} \u2013 If the element cannot be found or the value is invalid.\n */\nexport const captureSliderInput = (sliderElementId) => {\n  const slider = document.getElementById(sliderElementId);\n  if (!slider) {\n    throw new Error(`Slider element with id \"${sliderElementId}\" not found.`);\n  }\n\n  const months = parseInt(slider.value, 10);\n  if (Number.isNaN(months) || months <= 0) {\n    throw new Error(`Invalid slider value: ${slider.value}`);\n  }\n\n  return months;\n};",
            "usage": "const months = captureSliderInput('lockDurationSlider');"
        },
        {
            "step": 2,
            "label": "frontend",
            "introduction": "Step 2 converts the chosen number of months into the expected NTRN boost multiplier using a simple linear formula (1 \u2013 2\u00d7 over 48 months).",
            "code": "/*\n * Calculates the boost multiplier based on the staking duration.\n * Formula: 1x at 0 months \u2192 2x at 48 months (linear scaling).\n * @param {number} months \u2013 The staking duration in months.\n * @returns {number} \u2013 The boost multiplier rounded to two decimals.\n */\nexport const calculateBoostMultiplier = (months) => {\n  const MAX_MONTHS = 48;\n  const multiplier = 1 + months / MAX_MONTHS; // 48 months \u2192 1 + 48/48 = 2.0\u00d7\n  return +multiplier.toFixed(2);\n};",
            "usage": "const multiplier = calculateBoostMultiplier(months);"
        },
        {
            "step": 3,
            "label": "frontend",
            "introduction": "Step 3 stores the user\u2019s preferred lock duration so future pages can pre-select the slider value.",
            "code": "/*\n * Persists the preferred lock duration to localStorage.\n * @param {number} months \u2013 The lock duration in months.\n */\nexport const saveLockDurationPreference = (months) => {\n  try {\n    localStorage.setItem('preferredLockDurationMonths', months.toString());\n  } catch (err) {\n    // localStorage can throw (e.g., in private mode)\n    console.error('Failed to store lock duration preference', err);\n  }\n};",
            "usage": "saveLockDurationPreference(months);"
        },
        {
            "step": 4,
            "label": "frontend",
            "introduction": "Step 4 renders a user-friendly preview showing both the multiplier and an estimated minimum lock amount.",
            "code": "/*\n * Updates a DOM element with a preview of the boost multiplier and minimum lock.\n * @param {Object} params\n * @param {number} params.months \u2013 Number of months selected.\n * @param {number} params.multiplier \u2013 Calculated multiplier from Step 2.\n * @param {number} [params.minLockBase=100] \u2013 Base amount used to derive minimum lock (editable).\n */\nexport const displayMultiplierPreview = ({ months, multiplier, minLockBase = 100 }) => {\n  const previewEl = document.getElementById('multiplierPreview');\n  if (!previewEl) {\n    console.warn('Preview element #multiplierPreview not found in DOM.');\n    return;\n  }\n\n  // Example heuristic: scale the base amount linearly with months.\n  const minLockAmount = ((minLockBase * months) / 48).toFixed(2);\n  previewEl.textContent = `Boost: ${multiplier}\u00d7  |  Minimum lock: ${minLockAmount} NTRN`;\n};",
            "usage": "displayMultiplierPreview({ months, multiplier });"
        }
    ]
}