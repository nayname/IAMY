{
    "label": "others",
    "workflow": [
        {
            "step": 1,
            "label": "frontend",
            "introduction": "Step 1 installs the required Cosmos Kit + WalletConnect packages and exports a React provider that bootstraps WalletConnect v2 support for the Neutron chain.",
            "code": "import React from 'react';\nimport { ChainProvider } from '@cosmos-kit/react';\nimport { wallets as keplrWallets } from '@cosmos-kit/keplr';\nimport { wallets as leapWallets } from '@cosmos-kit/leap';\nimport { wallets as cosmostationWallets } from '@cosmos-kit/cosmostation';\nimport { walletconnect } from '@cosmos-kit/walletconnect';\nimport { Chain } from '@chain-registry/types';\n\n// 1. Neutron chain configuration (simplified \u2013 you can also pull this from @chain-registry)\nconst neutronChain: Chain = {\n  chain_name: 'neutron',\n  status: 'live',\n  chain_id: 'neutron-1',\n  bech32_prefix: 'neutron',\n  pretty_name: 'Neutron',\n  fees: {\n    fee_tokens: [\n      {\n        denom: 'untrn',\n        fixed_min_gas_price: 0.025,\n        low_gas_price: 0.015,\n        average_gas_price: 0.025,\n        high_gas_price: 0.03,\n      },\n    ],\n  },\n  apis: {\n    rpc: [{ address: 'https://rpc-kralum.neutron.org', provider: 'Neutron Foundation' }],\n    rest: [{ address: 'https://rest-kralum.neutron.org', provider: 'Neutron Foundation' }],\n  },\n};\n\n// 2. WalletConnect v2 client options (replace NEXT_PUBLIC_WC_PROJECT_ID with your own key)\nconst wcOptions = {\n  projectId: process.env.NEXT_PUBLIC_WC_PROJECT_ID || '',\n  relayUrl: 'wss://relay.walletconnect.com',\n  metadata: {\n    name: 'NeutronTemplate',\n    description: 'Neutron dApp template with WalletConnect support',\n    url: 'https://your-dapp.com',\n    icons: ['https://your-dapp.com/icon.png'],\n  },\n};\n\n// 3. Desktop + mobile wallets we want to offer\nconst wallets = [...keplrWallets, ...leapWallets, ...cosmostationWallets];\n\n// 4. Re-usable React provider that wires everything together\nexport const WalletProvider: React.FC<React.PropsWithChildren> = ({ children }) => (\n  <ChainProvider\n    chains={[neutronChain]}\n    assetLists={[]}\n    wallets={wallets}\n    walletConnectOptions={wcOptions}\n    walletConnect={walletconnect}\n    signerOptions={{\n      signingStargate: {\n        preferredSignType: 'direct',\n      },\n    }}\n  >\n    {children}\n  </ChainProvider>\n);",
            "usage": "// _app.tsx\nimport { WalletProvider } from './wallet-provider';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <WalletProvider>\n      <Component {...pageProps} />\n    </WalletProvider>\n  );\n}\n\nexport default MyApp;"
        },
        {
            "step": 2,
            "label": "frontend",
            "introduction": "Step 2 explicitly registers Keplr Mobile, Leap Mobile, and Cosmostation Mobile by declaring their WalletConnect namespaces.",
            "code": "import { WalletConnectOptions } from '@cosmos-kit/core';\n\nexport const walletConnectV2Config: WalletConnectOptions = {\n  signClient: {\n    projectId: process.env.NEXT_PUBLIC_WC_PROJECT_ID || '',\n    relayUrl: 'wss://relay.walletconnect.com',\n    metadata: {\n      name: 'NeutronTemplate',\n      description: 'Neutron Template WalletConnect Integration',\n      url: 'https://your-dapp.com',\n      icons: ['https://your-dapp.com/icon.png'],\n    },\n  },\n  namespaces: {\n    cosmos: {\n      chains: ['cosmos:neutron-1'],\n      methods: [\n        'cosmos_getAccounts',\n        'cosmos_signDirect',\n        'cosmos_signAmino',\n        'cosmos_sendTransaction',\n      ],\n      events: ['chainChanged', 'accountsChanged'],\n    },\n  },\n};\n\n// Mobile wallet IDs recognised by Cosmos Kit\nexport const supportedMobileWallets = [\n  'keplr-mobile',\n  'leap-mobile',\n  'cosmostation-mobile',\n];\n\n// Helper that returns a ready-to-use mobile config bundle\nexport const getMobileWalletConfig = () => ({\n  walletConnectOptions: walletConnectV2Config,\n  wallets: supportedMobileWallets,\n});",
            "usage": "Import walletConnectV2Config (or getMobileWalletConfig()) and pass it to the ChainProvider in Step 1. Cosmos Kit will automatically expose Keplr Mobile, Leap Mobile, and Cosmostation Mobile when it detects a mobile viewport."
        },
        {
            "step": 3,
            "label": "frontend",
            "introduction": "Step 3 renders a connect button that shows a QR modal on desktop or triggers an app-scheme deep link on mobile for seamless pairing.",
            "code": "import React from 'react';\nimport { useWallet, WalletStatus } from '@cosmos-kit/react';\nimport { isMobile } from 'react-device-detect';\n\nconst shorten = (addr?: string) => (addr ? `${addr.slice(0, 6)}...${addr.slice(-4)}` : '');\n\nexport const ConnectWalletButton: React.FC = () => {\n  const { connect, disconnect, status, address, viewWalletRepo } = useWallet();\n\n  const handleClick = async () => {\n    try {\n      if (status === WalletStatus.Connected) {\n        await disconnect();\n        return;\n      }\n\n      if (isMobile) {\n        // Mobile: open wallet list to launch deep-link\n        viewWalletRepo();\n      } else {\n        // Desktop: opens Cosmos Kit QR modal automatically\n        await connect();\n      }\n    } catch (err) {\n      console.error('Wallet connect error:', err);\n      alert(`Wallet connection failed: ${(err as Error).message}`);\n    }\n  };\n\n  return (\n    <button onClick={handleClick} className='px-4 py-2 rounded bg-indigo-600 text-white'>\n      {status === WalletStatus.Connected ? shorten(address) : 'Connect Wallet'}\n    </button>\n  );\n};",
            "usage": "Place <ConnectWalletButton /> anywhere in your React component tree; Cosmos Kit will handle the QR modal (desktop) or deep-link (mobile) UX automatically."
        },
        {
            "step": 4,
            "label": "frontend",
            "introduction": "Step 4 persists an active WalletConnect session in localStorage and tries to restore it on page refresh, enabling auto-reconnect UX.",
            "code": "import { useEffect } from 'react';\nimport { useWallet } from '@cosmos-kit/react';\n\nconst WC_SESSION_KEY = 'ntrn_wc_session_v2';\n\nexport const usePersistWcSession = () => {\n  const { client, status } = useWallet();\n\n  // Save active session whenever it changes\n  useEffect(() => {\n    if (status === 'Connected' && client?.session) {\n      try {\n        localStorage.setItem(WC_SESSION_KEY, JSON.stringify(client.session));\n      } catch (err) {\n        console.warn('Unable to persist WalletConnect session', err);\n      }\n    }\n  }, [client, status]);\n\n  // Attempt to restore a previous session on first render\n  useEffect(() => {\n    const restore = async () => {\n      try {\n        const raw = localStorage.getItem(WC_SESSION_KEY);\n        if (raw && client?.restoreSession && status !== 'Connected') {\n          await client.restoreSession(JSON.parse(raw));\n        }\n      } catch (err) {\n        console.error('Failed to restore WalletConnect session', err);\n      }\n    };\n\n    restore();\n  }, [client]);\n};",
            "usage": "Invoke usePersistWcSession() once inside a top-level component that is wrapped by WalletProvider. The hook silently stores the WC session on connect and restores it on reload, giving users an automatic re-connect experience."
        }
    ]
}