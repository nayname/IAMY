{
    "label": "others",
    "workflow": [
        {
            "step": 1,
            "label": "backend",
            "introduction": "Step 1 defines a Python helper that queries the Neutron REST endpoint `/neutron/cron/schedules` to retrieve the complete cron-schedule registry.",
            "code": "import requests\n\n\ndef query_cron_list_schedules(node_url: str = \"https://rest.kralum.neutron-1.neutron.org\") -> list:\n    \"\"\"Fetch the list of cron schedules from a Neutron REST endpoint.\n\n    Args:\n        node_url: Base URL of the Neutron REST API (without a trailing slash).\n\n    Returns:\n        A list of schedule objects returned by the chain.\n\n    Raises:\n        RuntimeError: If the request fails or the response cannot be parsed.\n    \"\"\"\n    # Ensure the base URL has no trailing slash to avoid errors when composing the endpoint.\n    base_url = node_url.rstrip(\"/\")\n    endpoint = f\"{base_url}/neutron/cron/schedules\"\n\n    try:\n        response = requests.get(endpoint, timeout=10)\n        response.raise_for_status()\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Failed to query cron schedules: {exc}\") from exc\n\n    try:\n        json_data = response.json()\n    except ValueError as exc:\n        raise RuntimeError(\"Received invalid JSON from the Neutron REST endpoint\") from exc\n\n    # The REST API generally returns `{ \\\"schedules\\\": [...] }`.\n    return json_data.get(\"schedules\", [])\n",
            "usage": "schedules = query_cron_list_schedules()\nprint(f\"Found {len(schedules)} schedule(s).\")"
        }
    ]
}