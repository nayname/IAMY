{
    "messages": [
        {
            "content": "Execute Contract",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "c5603bd7-8c55-4292-9690-3814e313fe08",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_92buyFMY3kpY0ovRqyS6uQuA",
                        "function": {
                            "arguments": "{\"query\": \"neutrond tx wasm execute\", \"section\": \"all\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 233,
                    "prompt_tokens": 592,
                    "total_tokens": 825,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 192,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C587A9arzSrmAJpbD6jbQgfACTTTM",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--2f295cc1-b44f-4275-98cb-4af11fbd7a61-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutrond tx wasm execute",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_92buyFMY3kpY0ovRqyS6uQuA",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 592,
                "output_tokens": 233,
                "total_tokens": 825,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 192
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"neutrond tx wasm execute\":\n\n## 1. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n- Line 16: 3. Execute a transaction on a remote chain\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n\n```\n\n---\n\n## 2. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 12: The counter contract template can be found in [this GitHub repository](https://github.com/CosmWasm/cw-template).\n- Line 21: 2. `execute()`: gets called when a user wants to invoke a method on the smart contract, this invokes one of the execute messages defined in the contract under `ExecuteMsg` enum which is essentially a list of transactions the contract supports\n- Line 24: In our sample counter contract, we will implement one instantiate, one query, and two execute methods.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n\n---\n\n\nThe counter contract template can be found in [this GitHub repository](https://github.com/CosmWasm/cw-template).\n\n```\n\n---\n\n## 3. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 22: - Have a basic understanding of CosmWasm smart contract development\n- Line 24: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 28: Start by creating a new CosmWasm project using cargo-generate:\n- Line 31: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 4. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 69: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n- Line 73: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n- Line 77: neutrond tx wasm execute neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n\n**Content Preview:**\n```\n# Query vesting info\nneutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n'{\"vesting_info\":{\"address\":\"your-neutron-address\"}}'\n\n---\n\n# Check claimable amount\nneutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n'{\"claimable\":{\"address\":\"your-neutron-address\"}}'\n\n---\n\n# Claim vested tokens\nneutrond tx wasm execute neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n'{\"claim\":{}}' \\\n```\n\n---\n\n## 5. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 31: 2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n- Line 42: neutrond query contractmanager failures [contract-address]\n- Line 52: \"error\": \"codespace: wasm, code: 5\",\n- Line 59: ### Via CosmWasm Contract\n\n**Content Preview:**\n```\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n3. **Handle All Message Types**: Implement handlers for all expected sudo message types\n\n---\n\n```bash\nneutrond query contractmanager failures [contract-address]\n```\n```\n\n---\n\n## 6. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 67: - **`msgs`**: Array of contract messages to execute\n- Line 70: - **`execution_stage`**: When to execute (`EXECUTION_STAGE_BEGIN_BLOCKER` or `EXECUTION_STAGE_END_BLOCKER`)\n- Line 80: neutrond tx gov submit-proposal [proposal-file.json] \\\n- Line 102: use cosmwasm_std::{\n\n**Content Preview:**\n```\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n---\n\n- **`period`**: Number of blocks between executions\n- **`msgs`**: Array of contract messages to execute\n  - **`contract`**: Address of the contract to call\n\n---\n\n  - **`msg`**: JSON string of the message to send\n- **`execution_stage`**: When to execute (`EXECUTION_STAGE_BEGIN_BLOCKER` or `EXECUTION_STAGE_END_BLOCKER`)\n\n```\n\n---\n\n## 7. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 14: // Example in CosmWasm\n- Line 59: // Example in CosmWasm\n- Line 80: let cosmos_msgs: Vec<cosmwasm_std::CosmosMsg> = vec![/* Your Cosmos messages here */];\n- Line 133: neutrond query feerefunder params\n- Line 188: This message can only be executed through governance proposals, not directly by individual users.\n\n**Content Preview:**\n```\n```rust\n// Example in CosmWasm\n\n\n---\n\n```rust\n// Example in CosmWasm\n\n\n---\n\n// Create the interchain transaction message with fee\nlet cosmos_msgs: Vec<cosmwasm_std::CosmosMsg> = vec![/* Your Cosmos messages here */];\nlet connection_id = \"connection-0\";\n```\n\n---\n\n## 8. How-to\n**File:** /root/neutron/docs/developers/modules/gmp/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 24: \"action\": \"execute_contract\",\n- Line 40: \"action\": \"execute_contract\",\n- Line 71: neutrond tx ibc-transfer transfer \\\n- Line 166: \"action\": \"execute_contract\",\n- Line 236: ### CosmWasm Contract Integration\n\n**Content Preview:**\n```\n{\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n\n---\n\nconst payload = JSON.stringify({\n  \"action\": \"execute_contract\",\n  \"contract_address\": \"neutron1...\",\n\n---\n\n# Using CLI\nneutrond tx ibc-transfer transfer \\\n  transfer \\\n```\n\n---\n\n## 9. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 14: Manages hook subscriptions for a contract address. Can only be executed by the module's authority (governance).\n- Line 22: // Can only be executed by the module's authority.\n- Line 91: neutrond query harpoon subscribed-contracts [hook-type]\n- Line 99: neutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n\nManages hook subscriptions for a contract address. Can only be executed by the module's authority (governance).\n\n\n---\n\n  // To remove a subscription, pass an empty array to `hook_subscription.hooks`.\n  // Can only be executed by the module's authority.\n  rpc ManageHookSubscription(MsgManageHookSubscription) returns (MsgManageHookSubscriptionResponse);\n```\n\n---\n\n## 10. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 16: Go to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n- Line 26: neutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 44: neutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 153: Create an `execute` message handler in your contract to register the Interchain Query using the helper function as a [submessage](https://docs.cosmwasm.com/docs/smart-contracts/message/submessage/).\n- Line 162: pub fn execute(\n\n**Content Preview:**\n```\n\nGo to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n\n\n---\n\n```\nneutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\nconnection:\n\n---\n\n```\nneutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\nclient_state:\n```\n\n---\n\n## 11. Reference\n**File:** /root/neutron/docs/developers/modules/interchain-queries/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 108: Removes an Interchain Query and refunds the deposit. Can only be executed by the query owner during the submit timeout, or by anyone after the timeout expires.\n- Line 122: Updates the parameters of a registered Interchain Query. Can only be executed by the query owner.\n- Line 139: Updates the module parameters. Can only be executed by the module authority.\n- Line 360: CLI commands are available for testing and debugging. Production applications should use CosmWasm smart contracts for better result handling and integration.\n- Line 367: neutrond query interchainqueries params\n\n**Content Preview:**\n```\n\nRemoves an Interchain Query and refunds the deposit. Can only be executed by the query owner during the submit timeout, or by anyone after the timeout expires.\n\n\n---\n\n\nUpdates the parameters of a registered Interchain Query. Can only be executed by the query owner.\n\n\n---\n\n\nUpdates the module parameters. Can only be executed by the module authority.\n\n```\n\n---\n\n## 12. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 119: Msgs: []crontypes.MsgExecuteContract{\n- Line 203: codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n- Line 206: // Execute IBC action through contract\n\n**Content Preview:**\n```\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n\n---\n\n        Period:    60, // 1 minute\n        Msgs: []crontypes.MsgExecuteContract{\n            {\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/feeburner/how-to.mdx\n**Section:** developers\n**Relevance Score:** 11\n\n**Matching lines:**\n- Line 12: neutrond query feeburner params\n- Line 36: neutrond query feeburner total-burned-neutrons-amount\n- Line 75: This message can only be executed through governance proposals, not directly by individual users.\n- Line 106: const queryClient = await cosmwasm.SigningCosmWasmClient.connect(rpcEndpoint);\n\n**Content Preview:**\n```\n```bash\nneutrond query feeburner params\n```\n\n---\n\n```bash\nneutrond query feeburner total-burned-neutrons-amount\n```\n\n---\n\n<Note>\nThis message can only be executed through governance proposals, not directly by individual users.\n</Note>\n```\n\n---\n\n## 14. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 58: ### What CosmWasm version is used?\n- Line 60: We are using a patched 0.51.0 version of wasmd.\n- Line 67: out of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n- Line 79: 2. **CosmWasm Specific Query Gas Limit** (`wasm.query_gas_limit` in [wasm] section):\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\n### What CosmWasm version is used?\n\n\n---\n\n\nWe are using a patched 0.51.0 version of wasmd.\n\n```\n\n---\n\n## 15. Technical Explanation\n**File:** /root/neutron/docs/developers/modules/admin/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 25: The authority management system defines which addresses have permission to execute specific types of administrative operations. This system ensures that only authorized entities (typically the DAO) can perform critical network functions.\n- Line 41: - Custom WASM proposals for smart contract operations\n- Line 43: 2. **Handler System**: Legacy proposals are processed through dedicated handlers that understand the specific proposal format and execute the appropriate state changes.\n- Line 51: 1. **Universal Message Support**: Any valid `sdk.Msg` can be executed through governance, providing unlimited flexibility for administrative operations.\n- Line 53: 2. **Direct Execution**: Messages are executed directly within the message server context, eliminating the need for separate proposal handlers.\n\n**Content Preview:**\n```\n#### Authority Management\nThe authority management system defines which addresses have permission to execute specific types of administrative operations. This system ensures that only authorized entities (typically the DAO) can perform critical network functions.\n\n\n---\n\n   - `TextProposal`: Governance signaling proposals\n   - Custom WASM proposals for smart contract operations\n\n\n---\n\n\n2. **Handler System**: Legacy proposals are processed through dedicated handlers that understand the specific proposal format and execute the appropriate state changes.\n\n```\n\n---\n\n## 16. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 25: When the Neutron community wants to execute administrative operations:\n- Line 30: 4. **Admin Module Processing**: The admin module validates and executes the whitelisted operations\n- Line 38: The admin module receives `ProposalExecuteMessage` bindings from the Main DAO contract and processes them according to its whitelisting rules.\n- Line 43: Neutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n- Line 53: These interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n\n**Content Preview:**\n```\n\nWhen the Neutron community wants to execute administrative operations:\n\n\n---\n\n3. **Proposal Execution**: If approved, the Main DAO contract sends messages to the admin module\n4. **Admin Module Processing**: The admin module validates and executes the whitelisted operations\n\n\n---\n\n\nThe admin module receives `ProposalExecuteMessage` bindings from the Main DAO contract and processes them according to its whitelisting rules.\n\n```\n\n---\n\n## 17. Admin Module\n**File:** /root/neutron/docs/developers/modules/admin/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 6: The admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n- Line 29: The admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n- Line 32: - **Smart Contract Management**: Executing WebAssembly (WASM) proposals for contract instantiation, migration, and administration\n- Line 42: 2. **Message-Based Proposals**: Modern proposal execution introduced with SDK 0.47+, allowing any valid `sdk.Msg` to be executed through governance. This approach provides greater flexibility using the versatile `sdk.Msg` format and requires modules to implement an `authority` field specifying permitted addresses.\n- Line 46: To maintain network security while enabling governance flexibility, the admin module implements a comprehensive whitelisting system. Only pre-approved message types and operations can be executed through the governance process, preventing potential security vulnerabilities while allowing legitimate administrative functions.\n\n**Content Preview:**\n```\n\nThe admin module serves as Neutron's central governance mechanism, empowering the **Main DAO contract** to propose and execute critical network operations. Built with Cosmos SDK compatibility and upgraded for SDK 0.50, this module enables secure, controlled administration of the entire Neutron network.\n\n\n---\n\n\nThe admin module operates on the principle of controlled delegation, where the **Neutron Main DAO contract** acts as the network's administrator with the authority to execute proposals that can significantly change the network state. This includes:\n\n\n---\n\n- **Parameter Modifications**: Adjusting module parameters such as transaction fees, validator incentives, and governance thresholds\n- **Smart Contract Management**: Executing WebAssembly (WASM) proposals for contract instantiation, migration, and administration\n- **Network Upgrades**: Coordinating protocol upgrades and consensus parameter changes\n```\n\n---\n\n## 18. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 23: 1. Sudo calls are executed in a temporary context (CacheContext), isolating any state changes.\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n- Line 49: The wrapper implements the `WasmKeeper` interface:\n- Line 52: type WasmKeeper interface {\n- Line 94: To protect chain state, all sudo calls are executed in a temporary context (CacheContext):\n\n**Content Preview:**\n```\n\n1. Sudo calls are executed in a temporary context (CacheContext), isolating any state changes.\n2. If the sudo call succeeds, the state changes are committed.\n\n---\n\n\nThe SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n\n\n---\n\n\nThe wrapper implements the `WasmKeeper` interface:\n\n```\n\n---\n\n## 19. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n- Line 52: - Executes the messages using the WASM message server\n- Line 53: - Updates the schedule's `last_execute_height` to the current block height\n- Line 65: repeated MsgExecuteContract msgs = 3;      // Messages to execute\n\n**Content Preview:**\n```\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n3. For each schedule that meets the execution condition:\n   - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n   - Sets the sender as the Cron module account\n\n---\n\n   - Sets funds to empty (no tokens are sent)\n   - Executes the messages using the WASM message server\n   - Updates the schedule's `last_execute_height` to the current block height\n```\n\n---\n\n## 20. How-to\n**File:** /root/neutron/docs/developers/modules/dex/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: - **Market Orders**: Execute immediately with slippage protection\n- Line 52: All DEX functionality is available through the `neutrond` command-line interface using positional arguments.\n- Line 59: neutrond tx dex deposit \\\n- Line 87: neutrond tx dex deposit \\\n- Line 106: neutrond tx dex withdrawal \\\n\n**Content Preview:**\n```\n- **Limit Orders**: Specify exact price and expiration (optional)\n- **Market Orders**: Execute immediately with slippage protection\n- **Order Types**: Choose from GTC, GTT, FOK, IOC based on your strategy\n\n---\n\n\nAll DEX functionality is available through the `neutrond` command-line interface using positional arguments.\n\n\n---\n\n```bash\nneutrond tx dex deposit \\\n  alice \\\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "7165381f-a049-4e1f-a155-305683af1b17",
            "tool_call_id": "call_92buyFMY3kpY0ovRqyS6uQuA",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "{\n  \"Claim my vested Neutron tokens\": {\n    \"popularity\": 95,\n    \"command\": \"neutrond tx wasm execute neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda '{\\\"claim\\\":{}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 5000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Increment the counter in my demo contract\": {\n    \"popularity\": 88,\n    \"command\": \"neutrond tx wasm execute $COUNTER_CONTRACT '{\\\"increment\\\":{}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 3000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Send 10,000 NTRN from the treasury contract to my wallet\": {\n    \"popularity\": 85,\n    \"command\": \"neutrond tx wasm execute $TREASURY_CONTRACT '{\\\"transfer\\\":{\\\"recipient\\\":\\\"neutron1mywalletaddressxxxxxxxxxn\\\",\\\"amount\\\":\\\"10000000000\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 4000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Swap 100 NTRN to ATOM through the DEX contract\": {\n    \"popularity\": 82,\n    \"command\": \"neutrond tx wasm execute $DEX_CONTRACT '{\\\"swap\\\":{\\\"offer_asset\\\":\\\"100000000\\\",\\\"ask_denom\\\":\\\"uatom\\\",\\\"min_receive\\\":\\\"0\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 5000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Add liquidity to the NTRN/ATOM pool on the DEX\": {\n    \"popularity\": 80,\n    \"command\": \"neutrond tx wasm execute $DEX_CONTRACT '{\\\"add_liquidity\\\":{\\\"assets\\\":[{\\\"info\\\":{\\\"native_token\\\":{\\\"denom\\\":\\\"untrn\\\"}},\\\"amount\\\":\\\"500000000\\\"},{\\\"info\\\":{\\\"native_token\\\":{\\\"denom\\\":\\\"uatom\\\"}},\\\"amount\\\":\\\"250000\\\"}],\\\"slippage_tolerance\\\":\\\"0.005\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 6000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Cancel order #12345 on the DEX\": {\n    \"popularity\": 78,\n    \"command\": \"neutrond tx wasm execute $DEX_CONTRACT '{\\\"cancel_order\\\":{\\\"id\\\":\\\"12345\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 4000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Schedule my contract to run every 50 blocks using the Cron module\": {\n    \"popularity\": 75,\n    \"command\": \"neutrond tx wasm execute $CRON_CONTRACT '{\\\"create_schedule\\\":{\\\"name\\\":\\\"heartbeat\\\",\\\"period\\\":50,\\\"msgs\\\":[{\\\"wasm\\\":{\\\"execute\\\":{\\\"contract_addr\\\":\\\"$MY_CONTRACT\\\",\\\"msg\\\":\\\"eyJoZWFydGJlYXQiOnt9fQ==\\\",\\\"funds\\\":[]}}}],\\\"execution_stage\\\":\\\"EXECUTION_STAGE_END_BLOCKER\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.4 --fees 8000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Register an interchain query to track ATOM/USDC price on Osmosis\": {\n    \"popularity\": 74,\n    \"command\": \"neutrond tx wasm execute $ICQ_CONTRACT '{\\\"register_query\\\":{\\\"connection_id\\\":\\\"connection-0\\\",\\\"query_type\\\":\\\"kv\\\",\\\"kv_keys\\\":[{\\\"key\\\":\\\"prices/atom_usdc\\\",\\\"path\\\":\\\"/osmosis.pricefeed.v1beta1.Query/Price\\\"}],\\\"update_period\\\":30,\\\"deposit\\\":\\\"100000untrn\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.4 --fees 7000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Remove interchain query #7 to refund the deposit\": {\n    \"popularity\": 73,\n    \"command\": \"neutrond tx wasm execute $ICQ_CONTRACT '{\\\"remove_interchain_query\\\":{\\\"id\\\":7}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 4000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Update the update period of interchain query #7 to 60 blocks\": {\n    \"popularity\": 72,\n    \"command\": \"neutrond tx wasm execute $ICQ_CONTRACT '{\\\"update_interchain_query\\\":{\\\"id\\\":7,\\\"new_update_period\\\":60}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 4500untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Stake 500 NTRN on the Cosmos Hub via my ICA controller contract\": {\n    \"popularity\": 70,\n    \"command\": \"neutrond tx wasm execute $ICA_CONTRACT '{\\\"submit_tx\\\":{\\\"connection_id\\\":\\\"connection-0\\\",\\\"msgs\\\":[{\\\"staking\\\":{\\\"delegate\\\":{\\\"validator\\\":\\\"cosmosvaloper1validatorxxx\\\",\\\"amount\\\":{\\\"denom\\\":\\\"untrn\\\",\\\"amount\\\":\\\"500000000\\\"}}}}],\\\"timeout\\\":600}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.5 --fees 9000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Withdraw protocol fees from the contract to the DAO treasury\": {\n    \"popularity\": 68,\n    \"command\": \"neutrond tx wasm execute $FEE_COLLECTOR_CONTRACT '{\\\"withdraw_fees\\\":{\\\"recipient\\\":\\\"neutron1daowalletxxxxxxxxxxxxxxxxx\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 5000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Burn the collected fees using the FeeBurner contract\": {\n    \"popularity\": 67,\n    \"command\": \"neutrond tx wasm execute $FEEBURNER_CONTRACT '{\\\"burn\\\":{}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 4000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Refund unused ICA fees for channel-8 sequence 42\": {\n    \"popularity\": 65,\n    \"command\": \"neutrond tx wasm execute $FEE_REFUNDER_CONTRACT '{\\\"refund\\\":{\\\"channel_id\\\":\\\"channel-8\\\",\\\"sequence\\\":42}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 3500untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Subscribe my contract to AfterValidatorCreated hook events\": {\n    \"popularity\": 63,\n    \"command\": \"neutrond tx wasm execute $HARPOON_CONTRACT '{\\\"manage_hook_subscription\\\":{\\\"address\\\":\\\"$MY_CONTRACT\\\",\\\"hooks\\\":[\\\"HOOK_TYPE_AFTER_VALIDATOR_CREATED\\\"]}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.4 --fees 6000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Remove all Harpoon hook subscriptions for my contract\": {\n    \"popularity\": 60,\n    \"command\": \"neutrond tx wasm execute $HARPOON_CONTRACT '{\\\"manage_hook_subscription\\\":{\\\"address\\\":\\\"$MY_CONTRACT\\\",\\\"hooks\\\":[]}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 4000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Pause my smart contract to stop all executes\": {\n    \"popularity\": 58,\n    \"command\": \"neutrond tx wasm execute $ADMIN_CONTRACT '{\\\"pause\\\":{}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.2 --fees 3000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Unpause my smart contract\": {\n    \"popularity\": 57,\n    \"command\": \"neutrond tx wasm execute $ADMIN_CONTRACT '{\\\"unpause\\\":{}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.2 --fees 3000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Set a new admin address for my contract\": {\n    \"popularity\": 55,\n    \"command\": \"neutrond tx wasm execute $ADMIN_CONTRACT '{\\\"update_admin\\\":{\\\"new_admin\\\":\\\"neutron1newadminxxxxxxxxxxxxxxxxxx\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 3500untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Migrate my contract to code ID 45\": {\n    \"popularity\": 54,\n    \"command\": \"neutrond tx wasm execute $ADMIN_CONTRACT '{\\\"migrate_contract\\\":{\\\"contract\\\":\\\"$MY_CONTRACT\\\",\\\"new_code_id\\\":45,\\\"msg\\\":{}}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.5 --fees 8000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Change the DAO proposal passing threshold to 60%\": {\n    \"popularity\": 53,\n    \"command\": \"neutrond tx wasm execute $DAO_CONTRACT '{\\\"update_config\\\":{\\\"threshold\\\":{\\\"absolute_percentage\\\":{\\\"percentage\\\":\\\"0.60\\\"}}}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.4 --fees 7000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Send a GMP cross-chain message to an Ethereum contract\": {\n    \"popularity\": 50,\n    \"command\": \"neutrond tx wasm execute $GMP_CONTRACT '{\\\"execute_contract\\\":{\\\"dest_chain\\\":\\\"ethereum\\\",\\\"dest_contract_address\\\":\\\"0xAbCdEf...\\\",\\\"payload\\\":\\\"48656c6c6f20457468657265756d\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 2.0 --fees 15000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Place a market order to buy ATOM with 100 NTRN on the DEX\": {\n    \"popularity\": 49,\n    \"command\": \"neutrond tx wasm execute $DEX_CONTRACT '{\\\"market_order\\\":{\\\"side\\\":\\\"buy\\\",\\\"offer_asset\\\":{\\\"native_token\\\":{\\\"denom\\\":\\\"untrn\\\"}},\\\"offer_amount\\\":\\\"100000000\\\",\\\"ask_denom\\\":\\\"uatom\\\",\\\"slippage\\\":\\\"0.02\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.4 --fees 6000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Claim staking rewards through my rewards contract\": {\n    \"popularity\": 48,\n    \"command\": \"neutrond tx wasm execute $REWARDS_CONTRACT '{\\\"claim_rewards\\\":{}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 4000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Set the vault deposit cap to 1,000,000 NTRN\": {\n    \"popularity\": 45,\n    \"command\": \"neutrond tx wasm execute $VAULT_CONTRACT '{\\\"update_config\\\":{\\\"deposit_cap\\\":\\\"1000000000000\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.4 --fees 7000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Enable emergency shutdown on my protocol\": {\n    \"popularity\": 44,\n    \"command\": \"neutrond tx wasm execute $PROTOCOL_CONTRACT '{\\\"emergency_shutdown\\\":{\\\"enable\\\":true}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.5 --fees 8000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Mint 100 CW20 tokens to my address\": {\n    \"popularity\": 40,\n    \"command\": \"neutrond tx wasm execute $CW20_CONTRACT '{\\\"mint\\\":{\\\"recipient\\\":\\\"neutron1mywalletaddressxxxxxxxxxn\\\",\\\"amount\\\":\\\"100\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.2 --fees 3000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Transfer 50 CW20 tokens to another user\": {\n    \"popularity\": 39,\n    \"command\": \"neutrond tx wasm execute $CW20_CONTRACT '{\\\"transfer\\\":{\\\"recipient\\\":\\\"neutron1friendxxxxxxxxxxxxxxxxx\\\",\\\"amount\\\":\\\"50\\\"}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.2 --fees 3000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Reset my counter contract back to zero\": {\n    \"popularity\": 38,\n    \"command\": \"neutrond tx wasm execute $COUNTER_CONTRACT '{\\\"reset\\\":{}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 3000untrn --node https://rpc-kralum.neutron.org\"\n  },\n  \"Remove cron schedule with ID 3\": {\n    \"popularity\": 37,\n    \"command\": \"neutrond tx wasm execute $CRON_CONTRACT '{\\\"remove_schedule\\\":{\\\"id\\\":3}}' --from mywallet --chain-id neutron-1 --gas auto --gas-adjustment 1.3 --fees 4000untrn --node https://rpc-kralum.neutron.org\"\n  }\n}",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 9516,
                    "prompt_tokens": 7160,
                    "total_tokens": 16676,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 6336,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C587EuY5ZouGIkdNx5zjDjP57Zloc",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--3db6fdda-f86c-414f-8eef-2f67dd3db0f1-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 7160,
                "output_tokens": 9516,
                "total_tokens": 16676,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 6336
                }
            }
        }
    ]
}