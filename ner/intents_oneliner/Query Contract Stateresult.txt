{
    "messages": [
        {
            "content": "Query Contract State",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "354b55af-54a0-4db8-86ef-596e73271f82",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_uV8IMceeXVzxijV9OYJzPOIZ",
                        "function": {
                            "arguments": "{\"query\": \"neutrond query wasm contract-state smart\", \"section\": \"all\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 235,
                    "prompt_tokens": 587,
                    "total_tokens": 822,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 192,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C58CoidLSOxfbWafJtjarVH5gWjjW",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--d312c554-9268-4485-8956-743c4a0266a8-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutrond query wasm contract-state smart",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_uV8IMceeXVzxijV9OYJzPOIZ",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 587,
                "output_tokens": 235,
                "total_tokens": 822,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 192
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"neutrond query wasm contract-state smart\":\n\n## 1. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n- Line 10: Interchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n- Line 14: 1. Register an interchain query\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n\n```\n\n---\n\n## 2. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 13: - Provides a query interface to read the current value\n- Line 17: - [Rust](https://rustup.rs/) installed with `wasm32-unknown-unknown` target\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 3. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n- Line 10: Interchain Accounts are a powerful IBC feature that allows a smart contract on Neutron to control accounts on other IBC-connected chains. This enables a wide range of cross-chain applications, from managing assets across chains to controlling governance on remote chains.\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n\n```\n\n---\n\n## 4. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 34: cosmwasm-std = { version = \"1.0\", features = [\"testing\"] }\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 5. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 3: description: \"A gentle introduction to smart contract development on Neutron\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 8: ## What is a Smart Contract?\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n---\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n```\n\n---\n\n## 6. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 3: description: \"Information about Neutron's token vesting smart contracts\"\n- Line 7: This page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n- Line 68: # Query vesting info\n- Line 69: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n- Line 73: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n\n**Content Preview:**\n```\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\nicon: \"clock\"\n\n---\n\n\nThis page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n\n\n---\n\n```bash\n# Query vesting info\nneutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n```\n\n---\n\n## 7. Bridge Contracts\n**File:** /root/neutron/docs/resources/contracts/bridge.mdx\n**Section:** resources\n**Relevance Score:** 19\n\n**Matching lines:**\n- Line 7: This page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n- Line 48: # Query bridge token info\n- Line 49: neutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n- Line 52: neutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"bridge_limits\":{}}'\n\n**Content Preview:**\n```\n\nThis page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n\n\n---\n\n```bash\n# Query bridge token info\nneutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n\n---\n\n# Query bridge token info\nneutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n\n```\n\n---\n\n## 8. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 8: ## Key Advantages of SubQuery\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 9. Neutron TGE Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-tge.mdx\n**Section:** resources\n**Relevance Score:** 15\n\n**Matching lines:**\n- Line 3: description: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n- Line 7: This page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n- Line 53: Most TGE contracts have completed their primary functions, but you can still query their state:\n- Line 57: neutrond query wasm contract-state smart neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56 '{\"is_claimed\":{\"address\":\"your-neutron-address\"}}'\n- Line 60: neutrond query wasm contract-state smart neutron1kkwp7pd4ts6gukm3e820kyftz4vv5jqtmal8pwqezrnq2ddycqasr87x9p '{\"vesting_status\":{}}'\n\n**Content Preview:**\n```\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\nicon: \"rocket-launch\"\n\n---\n\n\nThis page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n\n\n---\n\n\nMost TGE contracts have completed their primary functions, but you can still query their state:\n\n```\n\n---\n\n## 10. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 7: ## Handling IBC Acknowledgments in Smart Contracts\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 37: To check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n- Line 42: neutrond query contractmanager failures [contract-address]\n- Line 52: \"error\": \"codespace: wasm, code: 5\",\n\n**Content Preview:**\n```\n\n## Handling IBC Acknowledgments in Smart Contracts\n\n\n---\n\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n\nTo check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n\n```\n\n---\n\n## 11. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 80: neutrond tx gov submit-proposal [proposal-file.json] \\\n- Line 102: use cosmwasm_std::{\n- Line 342: ### Querying Schedules\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n---\n\n# Submit governance proposal\nneutrond tx gov submit-proposal [proposal-file.json] \\\n  --from=<your-key> \\\n```\n\n---\n\n## 12. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 153: **Query Current Parameters:**\n- Line 156: const client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n- Line 158: const params = await client.queryContractSmart(\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n\n**Query Current Parameters:**\n\n\n---\n\n```javascript\nconst client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 9: The IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n- Line 16: neutron query rate-limited-ibc params\n- Line 59: **Contract-Specific Messages**: The query and execute messages shown below (such as `get_quotas`, `add_path`, etc.) are specific to the rate limiting contract implementation and may vary between different contract versions. Only the core module messages (`send_packet`, `recv_packet`, `undo_send`) are standardized by the Go module.\n- Line 62: ### Querying Current Quotas\n- Line 67: neutron query wasm contract-state smart <contract-address> '{\"get_quotas\":{\"channel_id\":\"channel-0\",\"denom\":\"untrn\"}}'\n\n**Content Preview:**\n```\n\nThe IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n\n\n---\n\n```bash\nneutron query rate-limited-ibc params\n```\n\n---\n\n<Warning>\n**Contract-Specific Messages**: The query and execute messages shown below (such as `get_quotas`, `add_path`, etc.) are specific to the rate limiting contract implementation and may vary between different contract versions. Only the core module messages (`send_packet`, `recv_packet`, `undo_send`) are standardized by the Go module.\n</Warning>\n```\n\n---\n\n## 14. Developer Quickstart\n**File:** /root/neutron/docs/developers/quickstart.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 7: This guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n- Line 22: rustup target add wasm32-unknown-unknown\n- Line 46: # Build the neutrond binary\n- Line 50: neutrond version\n- Line 68: git clone https://github.com/neutron-org/neutron-query-relayer.git\n\n**Content Preview:**\n```\n\nThis guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n\n\n---\n\n    rustup default stable\n    rustup target add wasm32-unknown-unknown\n    \n\n---\n\n    \n    # Build the neutrond binary\n    make install\n```\n\n---\n\n## 15. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 10: - Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 98: // Query the price\n- Line 99: queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n\n**Content Preview:**\n```\n\n- Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n- Basic understanding of Go and Rust testing frameworks\n\n---\n\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n```\n\n---\n\n## 16. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 58: ### What CosmWasm version is used?\n- Line 60: We are using a patched 0.51.0 version of wasmd.\n- Line 62: ### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n- Line 67: out of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\n### What CosmWasm version is used?\n\n\n---\n\n\nWe are using a patched 0.51.0 version of wasmd.\n\n```\n\n---\n\n## 17. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: The Contract Manager module implements a crucial safety mechanism for IBC-enabled smart contracts. This document explains the principles, architecture, and internal mechanisms of the module.\n- Line 11: When smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n- Line 26: 4. Contract owners can later query these stored failures and handle them appropriately.\n- Line 36: F[Contract Owner] -->|Query| E\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n\n**Content Preview:**\n```\n\nThe Contract Manager module implements a crucial safety mechanism for IBC-enabled smart contracts. This document explains the principles, architecture, and internal mechanisms of the module.\n\n\n---\n\n\nWhen smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n\n\n---\n\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n```\n\n---\n\n## 18. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 68: string contract = 1;                       // The address of the smart contract\n- Line 105: ## Query Methods\n- Line 113: neutrond query cron params\n- Line 127: neutrond query cron show-schedule [schedule-name]\n- Line 141: neutrond query cron list-schedule\n\n**Content Preview:**\n```\nmessage MsgExecuteContract {\n  string contract = 1;                       // The address of the smart contract\n  string msg = 2;                            // JSON encoded message to be passed to the contract\n\n---\n\n\n## Query Methods\n\n\n---\n\n```bash\nneutrond query cron params\n```\n```\n\n---\n\n## 19. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n- Line 14: use cosmwasm_std::{Decimal, Uint128};\n- Line 147: use cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n- Line 306: neutrond tx gov submit-proposal /path/to/proposal.json \\\n- Line 319: neutrond tx gov vote <proposal-id> yes \\\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n\n\n---\n\n```rust\nuse cosmwasm_std::{Decimal, Uint128};\n\n\n---\n\n```rust\nuse cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n\n```\n\n---\n\n## 20. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 62: service Query {\n- Line 64: rpc SubscribedContracts(QuerySubscribedContractsRequest) returns (QuerySubscribedContractsResponse) {\n- Line 69: message QuerySubscribedContractsRequest {\n- Line 74: message QuerySubscribedContractsResponse {\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n```protobuf\nservice Query {\n  // Retrieves contracts subscribed to a specific hook type.\n\n---\n\n  // Retrieves contracts subscribed to a specific hook type.\n  rpc SubscribedContracts(QuerySubscribedContractsRequest) returns (QuerySubscribedContractsResponse) {\n    option (google.api.http).get = \"/neutron/harpoon/subscribed_contracts\";\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "5704f4b2-fa90-4fe5-a1b1-916e2b1e3956",
            "tool_call_id": "call_uV8IMceeXVzxijV9OYJzPOIZ",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_oaUynGGffMmkRnPKBUlpcbDL",
                        "function": {
                            "arguments": "{\"query\":\"\\\"token_info\\\" neutrond query wasm contract-state smart\",\"section\":\"all\",\"max_results\":20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 681,
                    "prompt_tokens": 7120,
                    "total_tokens": 7801,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 640,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C58CtTHxaPUacJiL5rRMIWXrsxXP5",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--6240be33-fd3e-41db-8758-c95dc3ad7ff4-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "\"token_info\" neutrond query wasm contract-state smart",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_oaUynGGffMmkRnPKBUlpcbDL",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 7120,
                "output_tokens": 681,
                "total_tokens": 7801,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 640
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"\"token_info\" neutrond query wasm contract-state smart\":\n\n## 1. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n- Line 10: Interchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n- Line 14: 1. Register an interchain query\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n\n```\n\n---\n\n## 2. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 13: - Provides a query interface to read the current value\n- Line 17: - [Rust](https://rustup.rs/) installed with `wasm32-unknown-unknown` target\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 3. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n- Line 10: Interchain Accounts are a powerful IBC feature that allows a smart contract on Neutron to control accounts on other IBC-connected chains. This enables a wide range of cross-chain applications, from managing assets across chains to controlling governance on remote chains.\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n\n```\n\n---\n\n## 4. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 34: cosmwasm-std = { version = \"1.0\", features = [\"testing\"] }\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 5. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 3: description: \"A gentle introduction to smart contract development on Neutron\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 8: ## What is a Smart Contract?\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n---\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n```\n\n---\n\n## 6. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 8: ## Key Advantages of SubQuery\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 7. Bridge Contracts\n**File:** /root/neutron/docs/resources/contracts/bridge.mdx\n**Section:** resources\n**Relevance Score:** 16\n\n**Matching lines:**\n- Line 7: This page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n- Line 48: # Query bridge token info\n- Line 49: neutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n- Line 52: neutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"bridge_limits\":{}}'\n\n**Content Preview:**\n```\n\nThis page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n\n\n---\n\n```bash\n# Query bridge token info\nneutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n\n---\n\n# Query bridge token info\nneutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n\n```\n\n---\n\n## 8. Neutron TGE Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-tge.mdx\n**Section:** resources\n**Relevance Score:** 15\n\n**Matching lines:**\n- Line 3: description: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n- Line 7: This page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n- Line 53: Most TGE contracts have completed their primary functions, but you can still query their state:\n- Line 57: neutrond query wasm contract-state smart neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56 '{\"is_claimed\":{\"address\":\"your-neutron-address\"}}'\n- Line 60: neutrond query wasm contract-state smart neutron1kkwp7pd4ts6gukm3e820kyftz4vv5jqtmal8pwqezrnq2ddycqasr87x9p '{\"vesting_status\":{}}'\n\n**Content Preview:**\n```\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\nicon: \"rocket-launch\"\n\n---\n\n\nThis page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n\n\n---\n\n\nMost TGE contracts have completed their primary functions, but you can still query their state:\n\n```\n\n---\n\n## 9. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 15\n\n**Matching lines:**\n- Line 3: description: \"Information about Neutron's token vesting smart contracts\"\n- Line 7: This page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n- Line 68: # Query vesting info\n- Line 69: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n- Line 73: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n\n**Content Preview:**\n```\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\nicon: \"clock\"\n\n---\n\n\nThis page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n\n\n---\n\n```bash\n# Query vesting info\nneutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n```\n\n---\n\n## 10. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 7: ## Handling IBC Acknowledgments in Smart Contracts\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 37: To check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n- Line 42: neutrond query contractmanager failures [contract-address]\n- Line 52: \"error\": \"codespace: wasm, code: 5\",\n\n**Content Preview:**\n```\n\n## Handling IBC Acknowledgments in Smart Contracts\n\n\n---\n\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n\nTo check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n\n```\n\n---\n\n## 11. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 80: neutrond tx gov submit-proposal [proposal-file.json] \\\n- Line 102: use cosmwasm_std::{\n- Line 342: ### Querying Schedules\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n---\n\n# Submit governance proposal\nneutrond tx gov submit-proposal [proposal-file.json] \\\n  --from=<your-key> \\\n```\n\n---\n\n## 12. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 153: **Query Current Parameters:**\n- Line 156: const client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n- Line 158: const params = await client.queryContractSmart(\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n\n**Query Current Parameters:**\n\n\n---\n\n```javascript\nconst client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 9: The IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n- Line 16: neutron query rate-limited-ibc params\n- Line 59: **Contract-Specific Messages**: The query and execute messages shown below (such as `get_quotas`, `add_path`, etc.) are specific to the rate limiting contract implementation and may vary between different contract versions. Only the core module messages (`send_packet`, `recv_packet`, `undo_send`) are standardized by the Go module.\n- Line 62: ### Querying Current Quotas\n- Line 67: neutron query wasm contract-state smart <contract-address> '{\"get_quotas\":{\"channel_id\":\"channel-0\",\"denom\":\"untrn\"}}'\n\n**Content Preview:**\n```\n\nThe IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n\n\n---\n\n```bash\nneutron query rate-limited-ibc params\n```\n\n---\n\n<Warning>\n**Contract-Specific Messages**: The query and execute messages shown below (such as `get_quotas`, `add_path`, etc.) are specific to the rate limiting contract implementation and may vary between different contract versions. Only the core module messages (`send_packet`, `recv_packet`, `undo_send`) are standardized by the Go module.\n</Warning>\n```\n\n---\n\n## 14. Developer Quickstart\n**File:** /root/neutron/docs/developers/quickstart.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 7: This guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n- Line 22: rustup target add wasm32-unknown-unknown\n- Line 46: # Build the neutrond binary\n- Line 50: neutrond version\n- Line 68: git clone https://github.com/neutron-org/neutron-query-relayer.git\n\n**Content Preview:**\n```\n\nThis guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n\n\n---\n\n    rustup default stable\n    rustup target add wasm32-unknown-unknown\n    \n\n---\n\n    \n    # Build the neutrond binary\n    make install\n```\n\n---\n\n## 15. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 10: - Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 98: // Query the price\n- Line 99: queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n\n**Content Preview:**\n```\n\n- Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n- Basic understanding of Go and Rust testing frameworks\n\n---\n\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n```\n\n---\n\n## 16. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 58: ### What CosmWasm version is used?\n- Line 60: We are using a patched 0.51.0 version of wasmd.\n- Line 62: ### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n- Line 67: out of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\n### What CosmWasm version is used?\n\n\n---\n\n\nWe are using a patched 0.51.0 version of wasmd.\n\n```\n\n---\n\n## 17. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: The Contract Manager module implements a crucial safety mechanism for IBC-enabled smart contracts. This document explains the principles, architecture, and internal mechanisms of the module.\n- Line 11: When smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n- Line 26: 4. Contract owners can later query these stored failures and handle them appropriately.\n- Line 36: F[Contract Owner] -->|Query| E\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n\n**Content Preview:**\n```\n\nThe Contract Manager module implements a crucial safety mechanism for IBC-enabled smart contracts. This document explains the principles, architecture, and internal mechanisms of the module.\n\n\n---\n\n\nWhen smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n\n\n---\n\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n```\n\n---\n\n## 18. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 68: string contract = 1;                       // The address of the smart contract\n- Line 105: ## Query Methods\n- Line 113: neutrond query cron params\n- Line 127: neutrond query cron show-schedule [schedule-name]\n- Line 141: neutrond query cron list-schedule\n\n**Content Preview:**\n```\nmessage MsgExecuteContract {\n  string contract = 1;                       // The address of the smart contract\n  string msg = 2;                            // JSON encoded message to be passed to the contract\n\n---\n\n\n## Query Methods\n\n\n---\n\n```bash\nneutrond query cron params\n```\n```\n\n---\n\n## 19. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n- Line 14: use cosmwasm_std::{Decimal, Uint128};\n- Line 147: use cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n- Line 306: neutrond tx gov submit-proposal /path/to/proposal.json \\\n- Line 319: neutrond tx gov vote <proposal-id> yes \\\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n\n\n---\n\n```rust\nuse cosmwasm_std::{Decimal, Uint128};\n\n\n---\n\n```rust\nuse cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n\n```\n\n---\n\n## 20. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 62: service Query {\n- Line 64: rpc SubscribedContracts(QuerySubscribedContractsRequest) returns (QuerySubscribedContractsResponse) {\n- Line 69: message QuerySubscribedContractsRequest {\n- Line 74: message QuerySubscribedContractsResponse {\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n```protobuf\nservice Query {\n  // Retrieves contracts subscribed to a specific hook type.\n\n---\n\n  // Retrieves contracts subscribed to a specific hook type.\n  rpc SubscribedContracts(QuerySubscribedContractsRequest) returns (QuerySubscribedContractsResponse) {\n    option (google.api.http).get = \"/neutron/harpoon/subscribed_contracts\";\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "8166cb12-ba57-4f60-afa0-64bb2046f520",
            "tool_call_id": "call_oaUynGGffMmkRnPKBUlpcbDL",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_AHz2UQxsCn04j4IOiH9cEFuE",
                        "function": {
                            "arguments": "{\"query\":\"neutron-vesting neutrond query wasm contract-state smart vesting_info\",\"section\":\"resources\",\"max_results\":20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 556,
                    "prompt_tokens": 13651,
                    "total_tokens": 14207,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 512,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 7040
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C58D5Y3b8EbCKQu6zhOm8rmLROltf",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--908fd2b4-b834-47a9-b977-5f47fd3edd92-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutron-vesting neutrond query wasm contract-state smart vesting_info",
                        "section": "resources",
                        "max_results": 20
                    },
                    "id": "call_AHz2UQxsCn04j4IOiH9cEFuE",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 13651,
                "output_tokens": 556,
                "total_tokens": 14207,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 7040
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 512
                }
            }
        },
        {
            "content": "Found 15 result(s) for \"neutron-vesting neutrond query wasm contract-state smart vesting_info\":\n\n## 1. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 17\n\n**Matching lines:**\n- Line 3: description: \"Information about Neutron's token vesting smart contracts\"\n- Line 7: This page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n- Line 68: # Query vesting info\n- Line 69: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n- Line 70: '{\"vesting_info\":{\"address\":\"your-neutron-address\"}}'\n\n**Content Preview:**\n```\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\nicon: \"clock\"\n\n---\n\n\nThis page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n\n\n---\n\n```bash\n# Query vesting info\nneutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n```\n\n---\n\n## 2. Neutron TGE Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-tge.mdx\n**Section:** resources\n**Relevance Score:** 15\n\n**Matching lines:**\n- Line 3: description: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n- Line 7: This page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n- Line 53: Most TGE contracts have completed their primary functions, but you can still query their state:\n- Line 57: neutrond query wasm contract-state smart neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56 '{\"is_claimed\":{\"address\":\"your-neutron-address\"}}'\n- Line 60: neutrond query wasm contract-state smart neutron1kkwp7pd4ts6gukm3e820kyftz4vv5jqtmal8pwqezrnq2ddycqasr87x9p '{\"vesting_status\":{}}'\n\n**Content Preview:**\n```\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\nicon: \"rocket-launch\"\n\n---\n\n\nThis page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n\n\n---\n\n\nMost TGE contracts have completed their primary functions, but you can still query their state:\n\n```\n\n---\n\n## 3. Bridge Contracts\n**File:** /root/neutron/docs/resources/contracts/bridge.mdx\n**Section:** resources\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 7: This page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n- Line 48: # Query bridge token info\n- Line 49: neutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n- Line 52: neutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"bridge_limits\":{}}'\n\n**Content Preview:**\n```\n\nThis page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n\n\n---\n\n```bash\n# Query bridge token info\nneutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n\n---\n\n# Query bridge token info\nneutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n\n```\n\n---\n\n## 4. Neutron DAO Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-dao.mdx\n**Section:** resources\n**Relevance Score:** 11\n\n**Matching lines:**\n- Line 3: description: \"Addresses and information for Neutron DAO smart contracts\"\n- Line 7: This page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n- Line 76: To interact with the DAO, you can use the [Neutron DAO UI](https://dao.neutron.org/) or interact directly with the contracts using the `neutrond` CLI.\n- Line 78: ### Example: Query DAO Information\n- Line 81: # Query DAO config\n\n**Content Preview:**\n```\ntitle: \"Neutron DAO Contracts\"\ndescription: \"Addresses and information for Neutron DAO smart contracts\"\nicon: \"building-columns\"\n\n---\n\n\nThis page lists the smart contracts that make up the Neutron DAO system on both mainnet and testnet networks.\n\n\n---\n\n\nTo interact with the DAO, you can use the [Neutron DAO UI](https://dao.neutron.org/) or interact directly with the contracts using the `neutrond` CLI.\n\n```\n\n---\n\n## 5. TokenFactory Denoms\n**File:** /root/neutron/docs/resources/tokenfactory-denoms.mdx\n**Section:** resources\n**Relevance Score:** 11\n\n**Matching lines:**\n- Line 7: This page lists tokens created using the TokenFactory module on Neutron, which allows smart contracts to create native tokens with custom denominations.\n- Line 38: # Query wstETH balance\n- Line 39: neutrond query bank balances neutron123... --denom=\"factory/neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry/wstETH\"\n- Line 42: neutrond tx bank send \\\n- Line 52: Smart contracts on Neutron can create their own TokenFactory denominations by using the TokenFactory module. This is particularly useful for applications that need to:\n\n**Content Preview:**\n```\n\nThis page lists tokens created using the TokenFactory module on Neutron, which allows smart contracts to create native tokens with custom denominations.\n\n\n---\n\n```bash\n# Query wstETH balance\nneutrond query bank balances neutron123... --denom=\"factory/neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry/wstETH\"\n\n---\n\n# Query wstETH balance\nneutrond query bank balances neutron123... --denom=\"factory/neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry/wstETH\"\n\n```\n\n---\n\n## 6. IBC Denominations\n**File:** /root/neutron/docs/resources/ibc-denoms.mdx\n**Section:** resources\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 35: # Query ATOM balance\n- Line 36: neutrond query bank balances neutron123... --denom=ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9\n- Line 39: neutrond tx bank send \\\n\n**Content Preview:**\n```\n```bash\n# Query ATOM balance\nneutrond query bank balances neutron123... --denom=ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9\n\n---\n\n# Query ATOM balance\nneutrond query bank balances neutron123... --denom=ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9\n\n\n---\n\n# Send TIA tokens\nneutrond tx bank send \\\n  my-wallet recipient-address \\\n```\n\n---\n\n## 7. v6.0.1\n**File:** /root/neutron/docs/resources/upgrades/v6.0.1.mdx\n**Section:** resources\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 35: Prior to the upgrade, validators are encouraged to take a full data snapshot. Snapshotting depends heavily on infrastructure, but generally this can be done by backing up the `.neutrond` directory.\n- Line 37: It is critically important for validator operators to back-up the `.neutrond/data/priv_validator_state.json` file after stopping the neutrond process. This file is updated every block as your validator participates in consensus rounds. It is a critical file needed to prevent double-signing, in case the upgrade fails and the previous chain needs to be restarted.\n- Line 69: neutrond version --long\n- Line 79: server_name: neutrond\n- Line 86: shasum -a 256 neutrond-linux-amd64\n\n**Content Preview:**\n```\n\nPrior to the upgrade, validators are encouraged to take a full data snapshot. Snapshotting depends heavily on infrastructure, but generally this can be done by backing up the `.neutrond` directory.\n\n\n---\n\n\nIt is critically important for validator operators to back-up the `.neutrond/data/priv_validator_state.json` file after stopping the neutrond process. This file is updated every block as your validator participates in consensus rounds. It is a critical file needed to prevent double-signing, in case the upgrade fails and the previous chain needs to be restarted.\n\n\n---\n\n```shell\nneutrond version --long\n```\n```\n\n---\n\n## 8. v6.0.2\n**File:** /root/neutron/docs/resources/upgrades/v6.0.2.mdx\n**Section:** resources\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 45: Prior to the upgrade, validators are encouraged to take a full data snapshot. Snapshotting depends heavily on infrastructure, but generally this can be done by backing up the `.neutrond` directory. If you use Cosmovisor to upgrade, by default, Cosmovisor will backup your data upon upgrade.\n- Line 48: **Critical:** It is critically important for validator operators to back-up the `.neutrond/data/priv_validator_state.json` file after stopping the neutrond process. This file is updated every block as your validator participates in consensus rounds. It is a critical file needed to prevent double-signing, in case the upgrade fails and the previous chain needs to be restarted.\n- Line 94: $ neutrond version --long\n- Line 100: server_name: neutrond\n- Line 107: $ shasum -a 256 neutrond-linux-amd64\n\n**Content Preview:**\n```\n\nPrior to the upgrade, validators are encouraged to take a full data snapshot. Snapshotting depends heavily on infrastructure, but generally this can be done by backing up the `.neutrond` directory. If you use Cosmovisor to upgrade, by default, Cosmovisor will backup your data upon upgrade.\n\n\n---\n\n<Warning>\n**Critical:** It is critically important for validator operators to back-up the `.neutrond/data/priv_validator_state.json` file after stopping the neutrond process. This file is updated every block as your validator participates in consensus rounds. It is a critical file needed to prevent double-signing, in case the upgrade fails and the previous chain needs to be restarted.\n</Warning>\n\n---\n\n```bash\n$ neutrond version --long\nbuild_tags: netgo,ledger\n```\n\n---\n\n## 9. v6.0.3\n**File:** /root/neutron/docs/resources/upgrades/v6.0.3.mdx\n**Section:** resources\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 49: Prior to the upgrade, validators are encouraged to take a full data snapshot. Snapshotting depends heavily on infrastructure, but generally this can be done by backing up the `.neutrond` directory. If you use Cosmovisor to upgrade, by default, Cosmovisor will backup your data upon upgrade.\n- Line 52: **Critical:** It is critically important for validator operators to back-up the `.neutrond/data/priv_validator_state.json` file after stopping the neutrond process. This file is updated every block as your validator participates in consensus rounds. It is a critical file needed to prevent double-signing, in case the upgrade fails and the previous chain needs to be restarted.\n- Line 98: $ neutrond version --long\n- Line 104: server_name: neutrond\n- Line 111: $ shasum -a 256 neutrond-linux-amd64\n\n**Content Preview:**\n```\n\nPrior to the upgrade, validators are encouraged to take a full data snapshot. Snapshotting depends heavily on infrastructure, but generally this can be done by backing up the `.neutrond` directory. If you use Cosmovisor to upgrade, by default, Cosmovisor will backup your data upon upgrade.\n\n\n---\n\n<Warning>\n**Critical:** It is critically important for validator operators to back-up the `.neutrond/data/priv_validator_state.json` file after stopping the neutrond process. This file is updated every block as your validator participates in consensus rounds. It is a critical file needed to prevent double-signing, in case the upgrade fails and the previous chain needs to be restarted.\n</Warning>\n\n---\n\n```bash\n$ neutrond version --long\nbuild_tags: netgo,ledger\n```\n\n---\n\n## 10. v7.0.0-rc0 (Testnet)\n**File:** /root/neutron/docs/resources/upgrades/v7.0.0-rc0.mdx\n**Section:** resources\n**Relevance Score:** 7\n\n**Matching lines:**\n- Line 35: Prior to the upgrade, validators are encouraged to take a full data snapshot. Snapshotting depends heavily on infrastructure, but generally this can be done by backing up the `.neutrond` directory.\n- Line 37: It is critically important for validator operators to back-up the `.neutrond/data/priv_validator_state.json` file after stopping the neutrond process. This file is updated every block as your validator participates in consensus rounds. It is a critical file needed to prevent double-signing, in case the upgrade fails and the previous chain needs to be restarted.\n- Line 69: neutrond version --long\n- Line 79: server_name: neutrond\n- Line 86: shasum -a 256 neutrond-linux-amd64\n\n**Content Preview:**\n```\n\nPrior to the upgrade, validators are encouraged to take a full data snapshot. Snapshotting depends heavily on infrastructure, but generally this can be done by backing up the `.neutrond` directory.\n\n\n---\n\n\nIt is critically important for validator operators to back-up the `.neutrond/data/priv_validator_state.json` file after stopping the neutrond process. This file is updated every block as your validator participates in consensus rounds. It is a critical file needed to prevent double-signing, in case the upgrade fails and the previous chain needs to be restarted.\n\n\n---\n\n```shell\nneutrond version --long\n```\n```\n\n---\n\n## 11. Chain Registry\n**File:** /root/neutron/docs/resources/chain-registry.mdx\n**Section:** resources\n**Relevance Score:** 6\n\n**Matching lines:**\n- Line 26: | Daemon Name | `neutrond` |\n- Line 27: | Node Home | `$HOME/.neutrond` |\n- Line 64: \"daemon_name\": \"neutrond\",\n- Line 65: \"node_home\": \"$HOME/.neutrond\",\n\n**Content Preview:**\n```\n| Key Algorithms | `secp256k1` |\n| Daemon Name | `neutrond` |\n| Node Home | `$HOME/.neutrond` |\n\n---\n\n| Daemon Name | `neutrond` |\n| Node Home | `$HOME/.neutrond` |\n\n\n---\n\n  \"bech32_prefix\": \"neutron\",\n  \"daemon_name\": \"neutrond\",\n  \"node_home\": \"$HOME/.neutrond\",\n```\n\n---\n\n## 12. Peers\n**File:** /root/neutron/docs/resources/peers.mdx\n**Section:** resources\n**Relevance Score:** 4\n\n**Matching lines:**\n- Line 48: nano ~/.neutrond/config/config.toml\n- Line 70: wget -O ~/.neutrond/config/addrbook.json https://raw.githubusercontent.com/neutron-org/mainnet-assets/main/addrbook.json\n\n**Content Preview:**\n```\n```bash\nnano ~/.neutrond/config/config.toml\n```\n\n---\n\n```bash\nwget -O ~/.neutrond/config/addrbook.json https://raw.githubusercontent.com/neutron-org/mainnet-assets/main/addrbook.json\n```\n```\n\n---\n\n## 13. Chain Parameters\n**File:** /root/neutron/docs/resources/chain-parameters.mdx\n**Section:** resources\n**Relevance Score:** 3\n\n**Matching lines:**\n- Line 27: | Reference binary | `neutrond-linux-amd64` |\n\n**Content Preview:**\n```\n| Latest release | [v6.0.3](https://github.com/neutron-org/neutron/releases/tag/v6.0.3) |\n| Reference binary | `neutrond-linux-amd64` |\n| Checksum (sha256) | `74b757fe6f9ad3dc8282c2b4bed440da396fc41f789e70d2c34f23929132519b` |\n```\n\n---\n\n## 14. Mainnet Deployment\n**File:** /root/neutron/docs/resources/contracts/mainnet.mdx\n**Section:** resources\n**Relevance Score:** 3\n\n**Matching lines:**\n- Line 53: | Security subDAO CW4 Group                             | [neutron1hyja4uyjktpeh0fxzuw2fmjudr85rk2qu98fa6nuh6d4qru9l0ssh3kgnu](https://neutron.celat.one/neutron-1/contracts/neutron1hyja4uyjktpeh0fxzuw2fmjudr85rk2qu98fa6nuh6d4qru9l0ssh3kgnu) | [cw4-group](https://github.com/CosmWasm/cw-plus/tree/v1.0.1/contracts/cw4-group)                                                                       | [16](https://neutron.celat.one/neutron-1/codes/16/info)     |\n\n**Content Preview:**\n```\n| Timelock Module                                       | [neutron1lvl674duw26psvzux5050du5kfg40kmy5z70t6am8pw6yje2wfjq66lmj2](https://neutron.celat.one/neutron-1/contracts/neutron1lvl674duw26psvzux5050du5kfg40kmy5z70t6am8pw6yje2wfjq66lmj2) | [cwd-subdao-timelock-single](https://github.com/neutron-org/neutron-dao/tree/main/contracts/subdaos/cwd-subdao-timelock-single)                        | [332](https://neutron.celat.one/neutron-1/codes/332)        |\n| Security subDAO CW4 Group                             | [neutron1hyja4uyjktpeh0fxzuw2fmjudr85rk2qu98fa6nuh6d4qru9l0ssh3kgnu](https://neutron.celat.one/neutron-1/contracts/neutron1hyja4uyjktpeh0fxzuw2fmjudr85rk2qu98fa6nuh6d4qru9l0ssh3kgnu) | [cw4-group](https://github.com/CosmWasm/cw-plus/tree/v1.0.1/contracts/cw4-group)                                                                       | [16](https://neutron.celat.one/neutron-1/codes/16/info)     |\n| Grants subDAO Core                                    | [neutron1zjdv3u6svlazlydmje2qcp44yqkt0059chz8gmyl5yrklmgv6fzq9chelu](https://neutron.celat.one/neutron-1/contracts/neutron1zjdv3u6svlazlydmje2qcp44yqkt0059chz8gmyl5yrklmgv6fzq9chelu) | [cwd-subdao-core](https://github.com/neutron-org/neutron-dao/tree/main/contracts/subdaos/cwd-subdao-core)                                              | [327](https://neutron.celat.one/neutron-1/codes/327/info)   |\n```\n\n---\n\n## 15. Testnet Deployment\n**File:** /root/neutron/docs/resources/contracts/testnet.mdx\n**Section:** resources\n**Relevance Score:** 3\n\n**Matching lines:**\n- Line 30: | Security subDAO CW4 Group              | [neutron1lcepwp9hc95v8yq4tetrc989sp2rshaejmqa487jjyq8zmg0luuqg4ke0f](https://neutron.celat.one/pion-1/contracts/neutron1lcepwp9hc95v8yq4tetrc989sp2rshaejmqa487jjyq8zmg0luuqg4ke0f) | [cw4-group](https://github.com/CosmWasm/cw-plus/tree/v1.0.1/contracts/cw4-group)                                                                  |\n\n**Content Preview:**\n```\n| Security subDAO Voting Module          | [neutron1ujdzgmjaks2s2uwnvm24tqdu0kmtlegr8gu87ngly2hdlumxtg7q3ca6lg](https://neutron.celat.one/pion-1/contracts/neutron1ujdzgmjaks2s2uwnvm24tqdu0kmtlegr8gu87ngly2hdlumxtg7q3ca6lg) | [cwd-voting-cw4](https://github.com/DA0-DA0/dao-contracts/tree/9e496379a1c1e89e00133865c9a1041dfdb20612/contracts/voting/cwd-voting-cw4)          |\n| Security subDAO CW4 Group              | [neutron1lcepwp9hc95v8yq4tetrc989sp2rshaejmqa487jjyq8zmg0luuqg4ke0f](https://neutron.celat.one/pion-1/contracts/neutron1lcepwp9hc95v8yq4tetrc989sp2rshaejmqa487jjyq8zmg0luuqg4ke0f) | [cw4-group](https://github.com/CosmWasm/cw-plus/tree/v1.0.1/contracts/cw4-group)                                                                  |\n| Neutron Staking Rewards | [neutron1h62p45vv3fg2q6sm00r93gqgmhqt9tfgq5hz33qyrhq8f0pqqj0s36wgc3](https://neutron.celat.one/pion-1/contracts/neutron1h62p45vv3fg2q6sm00r93gqgmhqt9tfgq5hz33qyrhq8f0pqqj0s36wgc3) | [neutron-staking-rewards](https://github.com/neutron-org/neutron-dao/tree/main/contracts/dao/neutron-staking-rewards) | [11393](https://neutron.celat.one/pion-1/codes/11393/info) |\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "ae9f13a0-1050-4748-8eb5-d2e8fdc04eb8",
            "tool_call_id": "call_AHz2UQxsCn04j4IOiH9cEFuE",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_MkjGMh7Fw18Mp3FZGWCZbFhd",
                        "function": {
                            "arguments": "{\"query\":\"\\\"get_count\\\" neutrond query wasm contract-state smart\", \"section\":\"all\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 1005,
                    "prompt_tokens": 19768,
                    "total_tokens": 20773,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 960,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 13568
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C58DI83HtDBoQR8YPfrlgRzssplNW",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--b876c8f2-80d0-4aee-981e-3658e315ed75-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "\"get_count\" neutrond query wasm contract-state smart",
                        "section": "all",
                        "max_results": 20
                    },
                    "id": "call_MkjGMh7Fw18Mp3FZGWCZbFhd",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 19768,
                "output_tokens": 1005,
                "total_tokens": 20773,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 13568
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 960
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"\"get_count\" neutrond query wasm contract-state smart\":\n\n## 1. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n- Line 10: Interchain Queries are a powerful feature of Neutron that allow smart contracts to query the state of other chains in the Cosmos ecosystem. This enables developers to build cross-chain applications that can react to state changes on connected chains.\n- Line 14: 1. Register an interchain query\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Query (ICQ) module to query data from other blockchains. You'll learn how to register queries, process the results, and build applications that can react to state changes on connected chains.\n\n```\n\n---\n\n## 2. Part 1: Minimal Smart Contract\n**File:** /root/neutron/docs/developers/tutorials/onboarding/part-1-minimal-application.mdx\n**Section:** developers\n**Relevance Score:** 22\n\n**Matching lines:**\n- Line 2: title: \"Part 1: Minimal Smart Contract\"\n- Line 3: description: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n- Line 6: This tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n- Line 13: - Provides a query interface to read the current value\n- Line 17: - [Rust](https://rustup.rs/) installed with `wasm32-unknown-unknown` target\n\n**Content Preview:**\n```\n---\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n\n---\n\ntitle: \"Part 1: Minimal Smart Contract\"\ndescription: \"Create and deploy a simple yet functional CosmWasm smart contract on Neutron\"\n---\n\n---\n\n\nThis tutorial will guide you through creating your first smart contract on Neutron. You'll learn the basics of CosmWasm development and deploy a working application.\n\n```\n\n---\n\n## 3. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 3: description: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n- Line 6: This tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n- Line 10: Interchain Accounts are a powerful IBC feature that allows a smart contract on Neutron to control accounts on other IBC-connected chains. This enables a wide range of cross-chain applications, from managing assets across chains to controlling governance on remote chains.\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n---\n\n---\n\n\nThis tutorial walks through building a smart contract that uses Neutron's Interchain Accounts (ICA) module to execute transactions on remote chains from within your contract.\n\n```\n\n---\n\n## 4. Smart Contract Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/smart-contracts.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Smart Contract Integration Tests\"\n- Line 3: description: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n- Line 6: This tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n- Line 11: - Understanding of CosmWasm contract development\n- Line 34: cosmwasm-std = { version = \"1.0\", features = [\"testing\"] }\n\n**Content Preview:**\n```\n---\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n\n---\n\ntitle: \"Smart Contract Integration Tests\"\ndescription: \"Test your CosmWasm smart contracts in a realistic chain environment\"\n---\n\n---\n\n\nThis tutorial covers testing smart contracts in realistic blockchain environments using `cw-multi-test` and full chain integration tests.\n\n```\n\n---\n\n## 5. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 3: description: \"A gentle introduction to smart contract development on Neutron\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 8: ## What is a Smart Contract?\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n---\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n```\n\n---\n\n## 6. SubQuery for Neutron\n**File:** /root/neutron/docs/developers/tutorials/indexers/subquery.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"SubQuery for Neutron\"\n- Line 3: description: \"Learn how to set up and use SubQuery to index Neutron data\"\n- Line 6: SubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n- Line 8: ## Key Advantages of SubQuery\n- Line 10: SubQuery offers several competitive advantages that make it ideal for building Neutron indexers:\n\n**Content Preview:**\n```\n---\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n\n---\n\ntitle: \"SubQuery for Neutron\"\ndescription: \"Learn how to set up and use SubQuery to index Neutron data\"\n---\n\n---\n\n\nSubQuery is a leading blockchain data indexer that provides fast, flexible APIs for web3 projects. It offers multi-chain aggregation, superior performance, a GraphQL API, and an excellent developer experience with support for 100+ ecosystems including Neutron.\n\n```\n\n---\n\n## 7. Neutron TGE Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-tge.mdx\n**Section:** resources\n**Relevance Score:** 15\n\n**Matching lines:**\n- Line 3: description: \"Addresses and information for Neutron Token Generation Event smart contracts\"\n- Line 7: This page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n- Line 53: Most TGE contracts have completed their primary functions, but you can still query their state:\n- Line 57: neutrond query wasm contract-state smart neutron198sxsrjvt2v2lln2ajn82ks76k97mj72mtgl7309jehd0vy8rezs7e6c56 '{\"is_claimed\":{\"address\":\"your-neutron-address\"}}'\n- Line 60: neutrond query wasm contract-state smart neutron1kkwp7pd4ts6gukm3e820kyftz4vv5jqtmal8pwqezrnq2ddycqasr87x9p '{\"vesting_status\":{}}'\n\n**Content Preview:**\n```\ntitle: \"Neutron TGE Contracts\"\ndescription: \"Addresses and information for Neutron Token Generation Event smart contracts\"\nicon: \"rocket-launch\"\n\n---\n\n\nThis page lists the smart contracts related to Neutron's Token Generation Event (TGE) on both mainnet and testnet networks.\n\n\n---\n\n\nMost TGE contracts have completed their primary functions, but you can still query their state:\n\n```\n\n---\n\n## 8. Neutron Vesting Contracts\n**File:** /root/neutron/docs/resources/contracts/neutron-vesting.mdx\n**Section:** resources\n**Relevance Score:** 15\n\n**Matching lines:**\n- Line 3: description: \"Information about Neutron's token vesting smart contracts\"\n- Line 7: This page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n- Line 68: # Query vesting info\n- Line 69: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n- Line 73: neutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n\n**Content Preview:**\n```\ntitle: \"Neutron Vesting Contracts\"\ndescription: \"Information about Neutron's token vesting smart contracts\"\nicon: \"clock\"\n\n---\n\n\nThis page provides information about the smart contracts that manage token vesting schedules for various Neutron token recipient groups.\n\n\n---\n\n```bash\n# Query vesting info\nneutrond query wasm contract-state smart neutron17fcdl6crgsp49ja270fp0pdwm354ar5qqv3mda07py58lgqmm2sqasvgz9 \\\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 7: ## Handling IBC Acknowledgments in Smart Contracts\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 37: To check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n- Line 42: neutrond query contractmanager failures [contract-address]\n- Line 52: \"error\": \"codespace: wasm, code: 5\",\n\n**Content Preview:**\n```\n\n## Handling IBC Acknowledgments in Smart Contracts\n\n\n---\n\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n\nTo check if your contract has experienced any failures, you can use the Contract Manager query functionality:\n\n```\n\n---\n\n## 10. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 6: This guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 80: neutrond tx gov submit-proposal [proposal-file.json] \\\n- Line 102: use cosmwasm_std::{\n- Line 342: ### Querying Schedules\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for working with the Cron module, including creating governance proposals for schedules and handling scheduled executions in smart contracts.\n\n\n---\n\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n---\n\n# Submit governance proposal\nneutrond tx gov submit-proposal [proposal-file.json] \\\n  --from=<your-key> \\\n```\n\n---\n\n## 11. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 153: **Query Current Parameters:**\n- Line 156: const client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n- Line 158: const params = await client.queryContractSmart(\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n\n**Query Current Parameters:**\n\n\n---\n\n```javascript\nconst client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n\n```\n\n---\n\n## 12. How-to\n**File:** /root/neutron/docs/developers/modules/ibc-rate-limit/how-to.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 9: The IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n- Line 16: neutron query rate-limited-ibc params\n- Line 59: **Contract-Specific Messages**: The query and execute messages shown below (such as `get_quotas`, `add_path`, etc.) are specific to the rate limiting contract implementation and may vary between different contract versions. Only the core module messages (`send_packet`, `recv_packet`, `undo_send`) are standardized by the Go module.\n- Line 62: ### Querying Current Quotas\n- Line 67: neutron query wasm contract-state smart <contract-address> '{\"get_quotas\":{\"channel_id\":\"channel-0\",\"denom\":\"untrn\"}}'\n\n**Content Preview:**\n```\n\nThe IBC Rate Limit module delegates all rate limiting logic to a CosmWasm contract. The contract address is set through governance parameters.\n\n\n---\n\n```bash\nneutron query rate-limited-ibc params\n```\n\n---\n\n<Warning>\n**Contract-Specific Messages**: The query and execute messages shown below (such as `get_quotas`, `add_path`, etc.) are specific to the rate limiting contract implementation and may vary between different contract versions. Only the core module messages (`send_packet`, `recv_packet`, `undo_send`) are standardized by the Go module.\n</Warning>\n```\n\n---\n\n## 13. Developer Quickstart\n**File:** /root/neutron/docs/developers/quickstart.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 7: This guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n- Line 22: rustup target add wasm32-unknown-unknown\n- Line 46: # Build the neutrond binary\n- Line 50: neutrond version\n- Line 68: git clone https://github.com/neutron-org/neutron-query-relayer.git\n\n**Content Preview:**\n```\n\nThis guide will help you quickly set up your development environment and start building on Neutron. You'll learn how to set up dependencies, run a local environment, and deploy your first smart contract.\n\n\n---\n\n    rustup default stable\n    rustup target add wasm32-unknown-unknown\n    \n\n---\n\n    \n    # Build the neutrond binary\n    make install\n```\n\n---\n\n## 14. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 10: - Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 98: // Query the price\n- Line 99: queryClient := oracletypes.NewQueryClient(val.ClientCtx)\n\n**Content Preview:**\n```\n\n- Completed [Part 1: Minimal Smart Contract](/developers/tutorials/onboarding/part-1-minimal-application)\n- Basic understanding of Go and Rust testing frameworks\n\n---\n\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n```\n\n---\n\n## 15. Bridge Contracts\n**File:** /root/neutron/docs/resources/contracts/bridge.mdx\n**Section:** resources\n**Relevance Score:** 14\n\n**Matching lines:**\n- Line 7: This page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n- Line 48: # Query bridge token info\n- Line 49: neutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n- Line 52: neutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"bridge_limits\":{}}'\n\n**Content Preview:**\n```\n\nThis page provides information about the smart contracts that enable cross-chain bridging between Neutron and other networks.\n\n\n---\n\n```bash\n# Query bridge token info\nneutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n\n---\n\n# Query bridge token info\nneutrond query wasm contract-state smart neutron1ug740qrkquxzrk2hh29qrlx3sktkfml3je7juusc2te7xmvsscns0n2wry '{\"token_info\":{}}'\n\n```\n\n---\n\n## 16. Frequently Asked Questions\n**File:** /root/neutron/docs/developers/faq.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 39: - **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n- Line 58: ### What CosmWasm version is used?\n- Line 60: We are using a patched 0.51.0 version of wasmd.\n- Line 62: ### I'm getting \"out of gas\" errors when querying smart contracts. How do I fix this?\n- Line 67: out of gas in location: Wasm engine function execution; gasWanted: 3000000, gasUsed: 3000000: out of gas: unknown request\n\n**Content Preview:**\n```\n  - <a href=\"https://mintscan.io/neutron-testnet\" target=\"_blank\" className=\"text-primary hover:underline\">Testnet (pion-1)</a>\n- **Celatone Smart Contract Explorer**: Provides a great UI to upload, query and execute contracts.\n\n\n---\n\n\n### What CosmWasm version is used?\n\n\n---\n\n\nWe are using a patched 0.51.0 version of wasmd.\n\n```\n\n---\n\n## 17. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: The Contract Manager module implements a crucial safety mechanism for IBC-enabled smart contracts. This document explains the principles, architecture, and internal mechanisms of the module.\n- Line 11: When smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n- Line 26: 4. Contract owners can later query these stored failures and handle them appropriately.\n- Line 36: F[Contract Owner] -->|Query| E\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n\n**Content Preview:**\n```\n\nThe Contract Manager module implements a crucial safety mechanism for IBC-enabled smart contracts. This document explains the principles, architecture, and internal mechanisms of the module.\n\n\n---\n\n\nWhen smart contracts interact with IBC, they must handle acknowledgments from counterparty chains. These acknowledgments are delivered to contracts via sudo calls, which are privileged operations that bypass normal permission checks. This creates several potential issues:\n\n\n---\n\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n```\n\n---\n\n## 18. Reference\n**File:** /root/neutron/docs/developers/modules/cron/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 68: string contract = 1;                       // The address of the smart contract\n- Line 105: ## Query Methods\n- Line 113: neutrond query cron params\n- Line 127: neutrond query cron show-schedule [schedule-name]\n- Line 141: neutrond query cron list-schedule\n\n**Content Preview:**\n```\nmessage MsgExecuteContract {\n  string contract = 1;                       // The address of the smart contract\n  string msg = 2;                            // JSON encoded message to be passed to the contract\n\n---\n\n\n## Query Methods\n\n\n---\n\n```bash\nneutrond query cron params\n```\n```\n\n---\n\n## 19. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n- Line 14: use cosmwasm_std::{Decimal, Uint128};\n- Line 147: use cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n- Line 306: neutrond tx gov submit-proposal /path/to/proposal.json \\\n- Line 319: neutrond tx gov vote <proposal-id> yes \\\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n\n\n---\n\n```rust\nuse cosmwasm_std::{Decimal, Uint128};\n\n\n---\n\n```rust\nuse cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n\n```\n\n---\n\n## 20. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 62: service Query {\n- Line 64: rpc SubscribedContracts(QuerySubscribedContractsRequest) returns (QuerySubscribedContractsResponse) {\n- Line 69: message QuerySubscribedContractsRequest {\n- Line 74: message QuerySubscribedContractsResponse {\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n```protobuf\nservice Query {\n  // Retrieves contracts subscribed to a specific hook type.\n\n---\n\n  // Retrieves contracts subscribed to a specific hook type.\n  rpc SubscribedContracts(QuerySubscribedContractsRequest) returns (QuerySubscribedContractsResponse) {\n    option (google.api.http).get = \"/neutron/harpoon/subscribed_contracts\";\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "f6d6d692-d038-4e27-86c9-6b1d8166ef42",
            "tool_call_id": "call_MkjGMh7Fw18Mp3FZGWCZbFhd",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "{\n  \"Check my CW20 token balance\": {\n    \"popularity\": 100,\n    \"command\": \"neutrond query wasm contract-state smart <cw20_contract_address> '{\\\"balance\\\":{\\\"address\\\":\\\"<wallet_address>\\\"}}' --node <grpc_node>\"\n  },\n  \"Get CW20 token info like name, symbol and supply\": {\n    \"popularity\": 95,\n    \"command\": \"neutrond query wasm contract-state smart <cw20_contract_address> '{\\\"token_info\\\":{}}' --node <grpc_node>\"\n  },\n  \"Get token info from the bridge contract\": {\n    \"popularity\": 90,\n    \"command\": \"neutrond query wasm contract-state smart <bridge_contract_address> '{\\\"token_info\\\":{}}' --node <grpc_node>\"\n  },\n  \"Check current bridge limits for a denom on the bridge contract\": {\n    \"popularity\": 85,\n    \"command\": \"neutrond query wasm contract-state smart <bridge_contract_address> '{\\\"bridge_limits\\\":{}}' --node <grpc_node>\"\n  },\n  \"Check my vesting balance in Neutron Vesting contract\": {\n    \"popularity\": 80,\n    \"command\": \"neutrond query wasm contract-state smart <vesting_contract_address> '{\\\"vesting_info\\\":{\\\"address\\\":\\\"<wallet_address>\\\"}}' --node <grpc_node>\"\n  },\n  \"See if my TGE allocation is already claimed\": {\n    \"popularity\": 75,\n    \"command\": \"neutrond query wasm contract-state smart <tge_claim_contract_address> '{\\\"is_claimed\\\":{\\\"address\\\":\\\"<wallet_address>\\\"}}' --node <grpc_node>\"\n  },\n  \"Get global vesting status from TGE contract\": {\n    \"popularity\": 70,\n    \"command\": \"neutrond query wasm contract-state smart <tge_vesting_contract_address> '{\\\"vesting_status\\\":{}}' --node <grpc_node>\"\n  },\n  \"Query rate limit quotas for channel-0 and untrn\": {\n    \"popularity\": 68,\n    \"command\": \"neutrond query wasm contract-state smart <rate_limit_contract_address> '{\\\"get_quotas\\\":{\\\"channel_id\\\":\\\"channel-0\\\",\\\"denom\\\":\\\"untrn\\\"}}' --node <grpc_node>\"\n  },\n  \"Get DAO core configuration\": {\n    \"popularity\": 65,\n    \"command\": \"neutrond query wasm contract-state smart <dao_core_contract_address> '{\\\"config\\\":{}}' --node <grpc_node>\"\n  },\n  \"List the latest 30 DAO proposals\": {\n    \"popularity\": 60,\n    \"command\": \"neutrond query wasm contract-state smart <dao_core_contract_address> '{\\\"list_proposals\\\":{\\\"start\\\":0,\\\"limit\\\":30}}' --node <grpc_node>\"\n  },\n  \"View details of DAO proposal #42\": {\n    \"popularity\": 58,\n    \"command\": \"neutrond query wasm contract-state smart <dao_core_contract_address> '{\\\"proposal\\\":{\\\"proposal_id\\\":42}}' --node <grpc_node>\"\n  },\n  \"Get metadata of NFT with id 123\": {\n    \"popularity\": 55,\n    \"command\": \"neutrond query wasm contract-state smart <cw721_contract_address> '{\\\"nft_info\\\":{\\\"token_id\\\":\\\"123\\\"}}' --node <grpc_node>\"\n  },\n  \"Get cw721 contract info\": {\n    \"popularity\": 54,\n    \"command\": \"neutrond query wasm contract-state smart <cw721_contract_address> '{\\\"contract_info\\\":{}}' --node <grpc_node>\"\n  },\n  \"Read current counter value from minimal counter contract\": {\n    \"popularity\": 52,\n    \"command\": \"neutrond query wasm contract-state smart <counter_contract_address> '{\\\"get_count\\\":{}}' --node <grpc_node>\"\n  },\n  \"List all scheduled cron jobs\": {\n    \"popularity\": 50,\n    \"command\": \"neutrond query wasm contract-state smart <cron_contract_address> '{\\\"list_schedules\\\":{}}' --node <grpc_node>\"\n  },\n  \"Show details of cron schedule named daily\": {\n    \"popularity\": 48,\n    \"command\": \"neutrond query wasm contract-state smart <cron_contract_address> '{\\\"show_schedule\\\":{\\\"name\\\":\\\"daily\\\"}}' --node <grpc_node>\"\n  },\n  \"Check stored IBC failures for my contract\": {\n    \"popularity\": 46,\n    \"command\": \"neutrond query wasm contract-state smart <contractmanager_contract_address> '{\\\"failures\\\":{}}' --node <grpc_node>\"\n  },\n  \"List contracts subscribed to staking hooks via Harpoon\": {\n    \"popularity\": 40,\n    \"command\": \"neutrond query wasm contract-state smart <harpoon_contract_address> '{\\\"subscribed_contracts\\\":{}}' --node <grpc_node>\"\n  },\n  \"Fetch DAO staked balance for my wallet\": {\n    \"popularity\": 38,\n    \"command\": \"neutrond query wasm contract-state smart <dao_staking_contract_address> '{\\\"staked_balance\\\":{\\\"address\\\":\\\"<wallet_address>\\\"}}' --node <grpc_node>\"\n  },\n  \"Retrieve current bridged supply across chains\": {\n    \"popularity\": 36,\n    \"command\": \"neutrond query wasm contract-state smart <bridge_contract_address> '{\\\"current_supply\\\":{}}' --node <grpc_node>\"\n  },\n  \"Check if an interchain query with ID 1 is registered\": {\n    \"popularity\": 34,\n    \"command\": \"neutrond query wasm contract-state smart <icq_contract_address> '{\\\"get_query\\\":{\\\"id\\\":1}}' --node <grpc_node>\"\n  },\n  \"Get group members of CW4 DAO group\": {\n    \"popularity\": 32,\n    \"command\": \"neutrond query wasm contract-state smart <cw4_group_contract_address> '{\\\"list_members\\\":{\\\"start_at\\\":\\\"\\\",\\\"limit\\\":100}}' --node <grpc_node>\"\n  },\n  \"View token factory denom configuration\": {\n    \"popularity\": 30,\n    \"command\": \"neutrond query wasm contract-state smart <token_factory_denom_contract_address> '{\\\"denom_config\\\":{}}' --node <grpc_node>\"\n  },\n  \"Get admin list from CW1 subkeys contract\": {\n    \"popularity\": 28,\n    \"command\": \"neutrond query wasm contract-state smart <cw1_contract_address> '{\\\"admins\\\":{}}' --node <grpc_node>\"\n  },\n  \"Query service global fee parameters\": {\n    \"popularity\": 25,\n    \"command\": \"neutrond query wasm contract-state smart <globalfee_contract_address> '{\\\"params\\\":{}}' --node <grpc_node>\"\n  }\n}",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 4659,
                    "prompt_tokens": 26318,
                    "total_tokens": 30977,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 3200,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 19712
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C58DZj3vIRbLiIxSg94CEbUh8x6Iz",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--a340288a-5acb-4057-b339-7fb24c444f25-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 26318,
                "output_tokens": 4659,
                "total_tokens": 30977,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 19712
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 3200
                }
            }
        }
    ]
}