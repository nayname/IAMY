{
    "messages": [
        {
            "content": "Upload Contract",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "human",
            "name": null,
            "id": "0cda242a-839f-4f7c-bb1d-9100ff36295f",
            "example": false
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_w8LbuC1wVZ6hfR2Kt5pKrou4",
                        "function": {
                            "arguments": "{\"query\": \"neutrond tx wasm store\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 361,
                    "prompt_tokens": 591,
                    "total_tokens": 952,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 320,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C57t4bUDt7cgyH6OawqQYSP1pxBak",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--217db60b-ce4c-4801-8f04-b55cf7d58d2c-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutrond tx wasm store",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_w8LbuC1wVZ6hfR2Kt5pKrou4",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 591,
                "output_tokens": 361,
                "total_tokens": 952,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 320
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"neutrond tx wasm store\":\n\n## 1. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n- Line 12: The counter contract template can be found in [this GitHub repository](https://github.com/CosmWasm/cw-template).\n- Line 56: `State` handles the state of the database where smart contract data is stored and accessed.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n\n---\n\n\nLet's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n```\n\n---\n\n## 2. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n- Line 25: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 29: Start by creating a new CosmWasm project using cargo-generate:\n- Line 32: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-ica-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 3. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 22: - Have a basic understanding of CosmWasm smart contract development\n- Line 24: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 28: Start by creating a new CosmWasm project using cargo-generate:\n- Line 31: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 4. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 17: // Store the data instead of processing it immediately\n- Line 30: 1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n- Line 31: 2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n- Line 42: neutrond query contractmanager failures [contract-address]\n\n**Content Preview:**\n```\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n        SudoMsg::Response { request, data } => {\n            // Store the data instead of processing it immediately\n            PENDING_RESPONSES.save(deps.storage, &data)?;\n\n---\n\n\n1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n```\n\n---\n\n## 5. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 91: neutrond query harpoon subscribed-contracts [hook-type]\n- Line 99: neutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n- Line 140: The module stores subscriptions with the following structure:\n- Line 173: - **StoreKey**: `\"harpoon\"`\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts [hook-type]\n```\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n```\n```\n\n---\n\n## 6. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 16: Go to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n- Line 26: neutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 44: neutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 153: Create an `execute` message handler in your contract to register the Interchain Query using the helper function as a [submessage](https://docs.cosmwasm.com/docs/smart-contracts/message/submessage/).\n- Line 298: To determine how the data path is constructed and what the data model is, you need to investigate the module's code. Start by locating [the gRPC handler](https://github.com/cosmos/cosmos-sdk/blob/853dbbf3e84900214137805d78e325ecd56fd68f/x/auth/keeper/grpc_query.go#L62-L63) in the module that corresponds to the data you're interested in. This handler provides a clue about where the data is stored and what the data model is.\n\n**Content Preview:**\n```\n\nGo to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n\n\n---\n\n```\nneutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\nconnection:\n\n---\n\n```\nneutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\nclient_state:\n```\n\n---\n\n## 7. ICTX Explanation\n**File:** /root/neutron/docs/developers/modules/interchaintxs/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: The Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n- Line 13: A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n- Line 88: The module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n- Line 113: - Failed callback information is stored in the Contract Manager state for potential resubmission\n- Line 158: neutrond q ibc channel end <src-port> <src-channel-id>\n\n**Content Preview:**\n```\n\nThe Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n\n\n---\n\ngraph TB\n    A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n    A -->|MsgSubmitTx| B\n\n---\n\n\nThe module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n\n```\n\n---\n\n## 8. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 203: codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n- Line 207: executeMsg := &wasmtypes.MsgExecuteContract{\n- Line 338: codeID := s.storeContract(\"artifacts/test_contract.wasm\")\n\n**Content Preview:**\n```\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n\n---\n\n    // Deploy a contract that uses IBC\n    codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n    contractAddr := s.instantiateContract(codeID, `{\"channel\":\"channel-0\"}`)\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 43: Neutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n- Line 53: These interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n- Line 55: ### Method 2: Direct WASM Execute\n- Line 57: For programmatic proposal submission, use WASM execute messages to the Main DAO contract:\n- Line 61: neutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n\n**Content Preview:**\n```\n<Warning>\nNeutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n</Warning>\n\n---\n\n\nThese interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n\n\n---\n\n\n### Method 2: Direct WASM Execute\n\n```\n\n---\n\n## 10. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 25: 3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n- Line 26: 4. Contract owners can later query these stored failures and handle them appropriately.\n- Line 35: D -->|Store Failure| E[KVStore]\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n- Line 47: 3. **Records Failures**: Stores sudo call failures for later retrieval and potential resubmission.\n\n**Content Preview:**\n```\n2. If the sudo call succeeds, the state changes are committed.\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n---\n\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n\n---\n\n    B -->|On Error| D[Contract Manager]\n    D -->|Store Failure| E[KVStore]\n    F[Contract Owner] -->|Query| E\n```\n\n---\n\n## 11. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 35: The module stores this schedule in its state and begins executing it according to the specified period.\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n- Line 52: - Executes the messages using the WASM message server\n- Line 109: - Messages must be properly formatted JSON for CosmWasm contracts\n\n**Content Preview:**\n```\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n\nThe module stores this schedule in its state and begins executing it according to the specified period.\n\n\n---\n\n3. For each schedule that meets the execution condition:\n   - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n   - Sets the sender as the Cron module account\n```\n\n---\n\n## 12. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 80: neutrond tx gov submit-proposal [proposal-file.json] \\\n- Line 102: use cosmwasm_std::{\n- Line 348: neutrond query cron list-schedule\n- Line 351: neutrond query cron show-schedule <schedule-name>\n\n**Content Preview:**\n```\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n---\n\n# Submit governance proposal\nneutrond tx gov submit-proposal [proposal-file.json] \\\n  --from=<your-key> \\\n\n---\n\n```rust\nuse cosmwasm_std::{\n    entry_point, DepsMut, Env, MessageInfo, Response, StdResult,\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 60: neutrond tx gov submit-proposal proposal.json \\\n- Line 73: neutrond tx gov vote 123 yes \\\n- Line 133: neutrond query dynamicfees params\n- Line 166: neutrond tx bank send sender recipient 1000untrn \\\n- Line 173: CosmWasm contracts can query supported denominations:\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal proposal.json \\\n  --from your-key \\\n\n---\n\n# Vote yes on proposal ID 123\nneutrond tx gov vote 123 yes \\\n  --from your-key \\\n\n---\n\n# Query current asset prices\nneutrond query dynamicfees params\n```\n```\n\n---\n\n## 14. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 14: // Example in CosmWasm\n- Line 59: // Example in CosmWasm\n- Line 80: let cosmos_msgs: Vec<cosmwasm_std::CosmosMsg> = vec![/* Your Cosmos messages here */];\n- Line 133: neutrond query feerefunder params\n- Line 198: neutrond query feerefunder fee-info [port_id] [channel_id] [sequence]\n\n**Content Preview:**\n```\n```rust\n// Example in CosmWasm\n\n\n---\n\n```rust\n// Example in CosmWasm\n\n\n---\n\n// Create the interchain transaction message with fee\nlet cosmos_msgs: Vec<cosmwasm_std::CosmosMsg> = vec![/* Your Cosmos messages here */];\nlet connection_id = \"connection-0\";\n```\n\n---\n\n## 15. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 156: const client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n- Line 198: neutrond query block [height] | jq '.block.data.txs[] | select(.body.messages[].type_url | contains(\"MsgVote\"))'\n- Line 207: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgSubmitProposal' \\\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n```javascript\nconst client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n\n\n---\n\n# Monitor bypass message types in transactions\nneutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n  --page 1 --limit 100\n```\n\n---\n\n## 16. Explanation\n**File:** /root/neutron/docs/developers/modules/harpoon/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: This document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n- Line 12: The Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n- Line 65: The module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n- Line 195: _, err = k.wasmKeeper.Sudo(sdkCtx, accContractAddress, msgJSONBz)\n- Line 225: The staking module does not store historical data. By subscribing to hooks, contracts can maintain their own historical records, enabling governance systems to calculate voting power at specific block heights.\n\n**Content Preview:**\n```\n\nThis document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n\n\n---\n\n\nThe Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n\n\n---\n\n\nThe module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n\n```\n\n---\n\n## 17. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n- Line 14: use cosmwasm_std::{Decimal, Uint128};\n- Line 147: use cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n- Line 306: neutrond tx gov submit-proposal /path/to/proposal.json \\\n- Line 319: neutrond tx gov vote <proposal-id> yes \\\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n\n\n---\n\n```rust\nuse cosmwasm_std::{Decimal, Uint128};\n\n\n---\n\n```rust\nuse cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n\n```\n\n---\n\n## 18. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 11: While the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n- Line 26: - **Key-Value Query (KV Query)**: This type retrieves values from the Cosmos-SDK KV-storage on a remote chain, using a set of keys. It can be used to get account balances, governance proposals, staking information, smart contract states, or any other data stored in the remote chain's KV-storage. Learn more about how KV queries work [here](/developers/modules/interchain-queries/explanation#how-do-kv-interchain-queries-work).\n- Line 42: 1. **Key-Value queries (KV-queries)**: These queries allow retrieving values stored under specific keys in the remote chain's state.\n- Line 101: 2. **Result Access**: Query results are stored in the module's state and can be accessed by contracts through query methods.\n- Line 104: The module is designed to be easily integrated with CosmWasm contracts, providing a simple interface for cross-chain data access.\n\n**Content Preview:**\n```\n<Info>\nWhile the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n</Info>\n\n---\n\n\n- **Key-Value Query (KV Query)**: This type retrieves values from the Cosmos-SDK KV-storage on a remote chain, using a set of keys. It can be used to get account balances, governance proposals, staking information, smart contract states, or any other data stored in the remote chain's KV-storage. Learn more about how KV queries work [here](/developers/modules/interchain-queries/explanation#how-do-kv-interchain-queries-work).\n\n\n---\n\n\n1. **Key-Value queries (KV-queries)**: These queries allow retrieving values stored under specific keys in the remote chain's state.\n\n```\n\n---\n\n## 19. How To\n**File:** /root/neutron/docs/developers/modules/interchaintxs/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical examples for implementing interchain transactions in CosmWasm smart contracts, focusing on registering interchain accounts and executing remote transactions.\n- Line 8: The Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands. All interactions must be programmed into smart contracts.\n- Line 13: ### Using CosmWasm\n- Line 15: In your CosmWasm contract, implement the registration as follows:\n- Line 123: // Store the channel information\n\n**Content Preview:**\n```\n\nThis guide provides practical examples for implementing interchain transactions in CosmWasm smart contracts, focusing on registering interchain accounts and executing remote transactions.\n\n\n---\n\n<Warning>\nThe Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands. All interactions must be programmed into smart contracts.\n</Warning>\n\n---\n\n\n### Using CosmWasm\n\n```\n\n---\n\n## 20. Reference\n**File:** /root/neutron/docs/developers/modules/interchaintxs/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: The Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands.\n- Line 214: The module only supports query CLI commands. There are no transaction CLI commands as the module is exclusively designed for CosmWasm smart contract integration.\n- Line 315: The module parameters are stored in the params subspace:\n- Line 328: The module stores minimal state in the blockchain:\n- Line 332: Stores the code ID threshold for determining fee requirements during ICA registration.\n\n**Content Preview:**\n```\n<Warning>\nThe Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands.\n</Warning>\n\n---\n\n<Info>\nThe module only supports query CLI commands. There are no transaction CLI commands as the module is exclusively designed for CosmWasm smart contract integration.\n</Info>\n\n---\n\n\nThe module parameters are stored in the params subspace:\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "20c143c3-a512-42f4-b3e4-2514c03cf564",
            "tool_call_id": "call_w8LbuC1wVZ6hfR2Kt5pKrou4",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_V5VH4uESpbx33UxHE08k9vvt",
                        "function": {
                            "arguments": "{\"query\": \"instantiate-everyone neutrond tx wasm store\", \"section\": \"developers\", \"max_results\": 10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 876,
                    "prompt_tokens": 7394,
                    "total_tokens": 8270,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 832,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 0
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C57tCrj5jWEhf5yKWkYDWjLPACmVh",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--84089d08-72f6-493e-93ec-b046f7dee1b3-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "instantiate-everyone neutrond tx wasm store",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_V5VH4uESpbx33UxHE08k9vvt",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 7394,
                "output_tokens": 876,
                "total_tokens": 8270,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 0
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 832
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"instantiate-everyone neutrond tx wasm store\":\n\n## 1. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n- Line 12: The counter contract template can be found in [this GitHub repository](https://github.com/CosmWasm/cw-template).\n- Line 56: `State` handles the state of the database where smart contract data is stored and accessed.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n\n---\n\n\nLet's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n```\n\n---\n\n## 2. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n- Line 25: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 29: Start by creating a new CosmWasm project using cargo-generate:\n- Line 32: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-ica-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 3. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 22: - Have a basic understanding of CosmWasm smart contract development\n- Line 24: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 28: Start by creating a new CosmWasm project using cargo-generate:\n- Line 31: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 4. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 17: // Store the data instead of processing it immediately\n- Line 30: 1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n- Line 31: 2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n- Line 42: neutrond query contractmanager failures [contract-address]\n\n**Content Preview:**\n```\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n        SudoMsg::Response { request, data } => {\n            // Store the data instead of processing it immediately\n            PENDING_RESPONSES.save(deps.storage, &data)?;\n\n---\n\n\n1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n```\n\n---\n\n## 5. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 91: neutrond query harpoon subscribed-contracts [hook-type]\n- Line 99: neutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n- Line 140: The module stores subscriptions with the following structure:\n- Line 173: - **StoreKey**: `\"harpoon\"`\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts [hook-type]\n```\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n```\n```\n\n---\n\n## 6. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 16: Go to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n- Line 26: neutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 44: neutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 153: Create an `execute` message handler in your contract to register the Interchain Query using the helper function as a [submessage](https://docs.cosmwasm.com/docs/smart-contracts/message/submessage/).\n- Line 298: To determine how the data path is constructed and what the data model is, you need to investigate the module's code. Start by locating [the gRPC handler](https://github.com/cosmos/cosmos-sdk/blob/853dbbf3e84900214137805d78e325ecd56fd68f/x/auth/keeper/grpc_query.go#L62-L63) in the module that corresponds to the data you're interested in. This handler provides a clue about where the data is stored and what the data model is.\n\n**Content Preview:**\n```\n\nGo to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n\n\n---\n\n```\nneutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\nconnection:\n\n---\n\n```\nneutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\nclient_state:\n```\n\n---\n\n## 7. ICTX Explanation\n**File:** /root/neutron/docs/developers/modules/interchaintxs/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: The Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n- Line 13: A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n- Line 88: The module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n- Line 113: - Failed callback information is stored in the Contract Manager state for potential resubmission\n- Line 158: neutrond q ibc channel end <src-port> <src-channel-id>\n\n**Content Preview:**\n```\n\nThe Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n\n\n---\n\ngraph TB\n    A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n    A -->|MsgSubmitTx| B\n\n---\n\n\nThe module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n\n```\n\n---\n\n## 8. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 203: codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n- Line 207: executeMsg := &wasmtypes.MsgExecuteContract{\n- Line 338: codeID := s.storeContract(\"artifacts/test_contract.wasm\")\n\n**Content Preview:**\n```\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n\n---\n\n    // Deploy a contract that uses IBC\n    codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n    contractAddr := s.instantiateContract(codeID, `{\"channel\":\"channel-0\"}`)\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 43: Neutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n- Line 53: These interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n- Line 55: ### Method 2: Direct WASM Execute\n- Line 57: For programmatic proposal submission, use WASM execute messages to the Main DAO contract:\n- Line 61: neutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n\n**Content Preview:**\n```\n<Warning>\nNeutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n</Warning>\n\n---\n\n\nThese interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n\n\n---\n\n\n### Method 2: Direct WASM Execute\n\n```\n\n---\n\n## 10. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 25: 3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n- Line 26: 4. Contract owners can later query these stored failures and handle them appropriately.\n- Line 35: D -->|Store Failure| E[KVStore]\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n- Line 47: 3. **Records Failures**: Stores sudo call failures for later retrieval and potential resubmission.\n\n**Content Preview:**\n```\n2. If the sudo call succeeds, the state changes are committed.\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n---\n\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n\n---\n\n    B -->|On Error| D[Contract Manager]\n    D -->|Store Failure| E[KVStore]\n    F[Contract Owner] -->|Query| E\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "262468f8-15f3-4931-8705-252870edc9bf",
            "tool_call_id": "call_V5VH4uESpbx33UxHE08k9vvt",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_KSg1cBorlXvru88l3kEC91zs",
                        "function": {
                            "arguments": "{\"query\": \"neutrond tx wasm store --instantiate-everyone\", \"section\": \"developers\", \"max_results\": 20}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 1774,
                    "prompt_tokens": 11198,
                    "total_tokens": 12972,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 1728,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 7296
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C57tcuLqn95qxMXe3nW5EzXV8r0rP",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--ecaa6c79-2532-4ee6-ad38-988214edce34-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "neutrond tx wasm store --instantiate-everyone",
                        "section": "developers",
                        "max_results": 20
                    },
                    "id": "call_KSg1cBorlXvru88l3kEC91zs",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 11198,
                "output_tokens": 1774,
                "total_tokens": 12972,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 7296
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 1728
                }
            }
        },
        {
            "content": "Found 20 result(s) for \"neutrond tx wasm store --instantiate-everyone\":\n\n## 1. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n- Line 12: The counter contract template can be found in [this GitHub repository](https://github.com/CosmWasm/cw-template).\n- Line 56: `State` handles the state of the database where smart contract data is stored and accessed.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n\n---\n\n\nLet's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n```\n\n---\n\n## 2. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n- Line 25: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 29: Start by creating a new CosmWasm project using cargo-generate:\n- Line 32: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-ica-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 3. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 22: - Have a basic understanding of CosmWasm smart contract development\n- Line 24: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 28: Start by creating a new CosmWasm project using cargo-generate:\n- Line 31: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 4. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 17: // Store the data instead of processing it immediately\n- Line 30: 1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n- Line 31: 2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n- Line 42: neutrond query contractmanager failures [contract-address]\n\n**Content Preview:**\n```\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n        SudoMsg::Response { request, data } => {\n            // Store the data instead of processing it immediately\n            PENDING_RESPONSES.save(deps.storage, &data)?;\n\n---\n\n\n1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n```\n\n---\n\n## 5. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 91: neutrond query harpoon subscribed-contracts [hook-type]\n- Line 99: neutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n- Line 140: The module stores subscriptions with the following structure:\n- Line 173: - **StoreKey**: `\"harpoon\"`\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts [hook-type]\n```\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n```\n```\n\n---\n\n## 6. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 16: Go to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n- Line 26: neutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 44: neutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 153: Create an `execute` message handler in your contract to register the Interchain Query using the helper function as a [submessage](https://docs.cosmwasm.com/docs/smart-contracts/message/submessage/).\n- Line 298: To determine how the data path is constructed and what the data model is, you need to investigate the module's code. Start by locating [the gRPC handler](https://github.com/cosmos/cosmos-sdk/blob/853dbbf3e84900214137805d78e325ecd56fd68f/x/auth/keeper/grpc_query.go#L62-L63) in the module that corresponds to the data you're interested in. This handler provides a clue about where the data is stored and what the data model is.\n\n**Content Preview:**\n```\n\nGo to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n\n\n---\n\n```\nneutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\nconnection:\n\n---\n\n```\nneutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\nclient_state:\n```\n\n---\n\n## 7. ICTX Explanation\n**File:** /root/neutron/docs/developers/modules/interchaintxs/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: The Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n- Line 13: A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n- Line 88: The module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n- Line 113: - Failed callback information is stored in the Contract Manager state for potential resubmission\n- Line 158: neutrond q ibc channel end <src-port> <src-channel-id>\n\n**Content Preview:**\n```\n\nThe Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n\n\n---\n\ngraph TB\n    A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n    A -->|MsgSubmitTx| B\n\n---\n\n\nThe module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n\n```\n\n---\n\n## 8. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 203: codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n- Line 207: executeMsg := &wasmtypes.MsgExecuteContract{\n- Line 338: codeID := s.storeContract(\"artifacts/test_contract.wasm\")\n\n**Content Preview:**\n```\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n\n---\n\n    // Deploy a contract that uses IBC\n    codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n    contractAddr := s.instantiateContract(codeID, `{\"channel\":\"channel-0\"}`)\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 43: Neutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n- Line 53: These interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n- Line 55: ### Method 2: Direct WASM Execute\n- Line 57: For programmatic proposal submission, use WASM execute messages to the Main DAO contract:\n- Line 61: neutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n\n**Content Preview:**\n```\n<Warning>\nNeutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n</Warning>\n\n---\n\n\nThese interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n\n\n---\n\n\n### Method 2: Direct WASM Execute\n\n```\n\n---\n\n## 10. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 25: 3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n- Line 26: 4. Contract owners can later query these stored failures and handle them appropriately.\n- Line 35: D -->|Store Failure| E[KVStore]\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n- Line 47: 3. **Records Failures**: Stores sudo call failures for later retrieval and potential resubmission.\n\n**Content Preview:**\n```\n2. If the sudo call succeeds, the state changes are committed.\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n---\n\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n\n---\n\n    B -->|On Error| D[Contract Manager]\n    D -->|Store Failure| E[KVStore]\n    F[Contract Owner] -->|Query| E\n```\n\n---\n\n## 11. Understanding Cron\n**File:** /root/neutron/docs/developers/modules/cron/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 32: - One or more CosmWasm contract messages to execute\n- Line 35: The module stores this schedule in its state and begins executing it according to the specified period.\n- Line 49: - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n- Line 52: - Executes the messages using the WASM message server\n- Line 109: - Messages must be properly formatted JSON for CosmWasm contracts\n\n**Content Preview:**\n```\n- The execution period (in blocks)\n- One or more CosmWasm contract messages to execute\n- The execution stage (BEGIN_BLOCKER or END_BLOCKER)\n\n---\n\n\nThe module stores this schedule in its state and begins executing it according to the specified period.\n\n\n---\n\n3. For each schedule that meets the execution condition:\n   - The module constructs `wasmtypes.MsgExecuteContract` messages from the stored schedule data\n   - Sets the sender as the Cron module account\n```\n\n---\n\n## 12. How-to\n**File:** /root/neutron/docs/developers/modules/cron/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 11: - Familiarity with CosmWasm contract development\n- Line 80: neutrond tx gov submit-proposal [proposal-file.json] \\\n- Line 102: use cosmwasm_std::{\n- Line 348: neutrond query cron list-schedule\n- Line 351: neutrond query cron show-schedule <schedule-name>\n\n**Content Preview:**\n```\n- Understanding of Neutron governance processes\n- Familiarity with CosmWasm contract development\n- Access to governance proposal submission (for schedule creation)\n\n---\n\n# Submit governance proposal\nneutrond tx gov submit-proposal [proposal-file.json] \\\n  --from=<your-key> \\\n\n---\n\n```rust\nuse cosmwasm_std::{\n    entry_point, DepsMut, Env, MessageInfo, Response, StdResult,\n```\n\n---\n\n## 13. How-to\n**File:** /root/neutron/docs/developers/modules/dynamicfees/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 60: neutrond tx gov submit-proposal proposal.json \\\n- Line 73: neutrond tx gov vote 123 yes \\\n- Line 133: neutrond query dynamicfees params\n- Line 166: neutrond tx bank send sender recipient 1000untrn \\\n- Line 173: CosmWasm contracts can query supported denominations:\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal proposal.json \\\n  --from your-key \\\n\n---\n\n# Vote yes on proposal ID 123\nneutrond tx gov vote 123 yes \\\n  --from your-key \\\n\n---\n\n# Query current asset prices\nneutrond query dynamicfees params\n```\n```\n\n---\n\n## 14. How-to\n**File:** /root/neutron/docs/developers/modules/feerefunder/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 14: // Example in CosmWasm\n- Line 59: // Example in CosmWasm\n- Line 80: let cosmos_msgs: Vec<cosmwasm_std::CosmosMsg> = vec![/* Your Cosmos messages here */];\n- Line 133: neutrond query feerefunder params\n- Line 198: neutrond query feerefunder fee-info [port_id] [channel_id] [sequence]\n\n**Content Preview:**\n```\n```rust\n// Example in CosmWasm\n\n\n---\n\n```rust\n// Example in CosmWasm\n\n\n---\n\n// Create the interchain transaction message with fee\nlet cosmos_msgs: Vec<cosmwasm_std::CosmosMsg> = vec![/* Your Cosmos messages here */];\nlet connection_id = \"connection-0\";\n```\n\n---\n\n## 15. How-To Guide\n**File:** /root/neutron/docs/developers/modules/globalfee/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 18: neutrond tx gov submit-proposal param-change proposal.json \\\n- Line 156: const client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n- Line 190: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n- Line 198: neutrond query block [height] | jq '.block.data.txs[] | select(.body.messages[].type_url | contains(\"MsgVote\"))'\n- Line 207: neutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgSubmitProposal' \\\n\n**Content Preview:**\n```\n```bash\nneutrond tx gov submit-proposal param-change proposal.json \\\n  --from validator \\\n\n---\n\n```javascript\nconst client = await SigningCosmWasmClient.connectWithSigner(rpcUrl, signer);\n\n\n---\n\n# Monitor bypass message types in transactions\nneutrond query txs --events 'message.action=/cosmos.gov.v1beta1.MsgVote' \\\n  --page 1 --limit 100\n```\n\n---\n\n## 16. Explanation\n**File:** /root/neutron/docs/developers/modules/harpoon/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 8: This document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n- Line 12: The Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n- Line 65: The module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n- Line 195: _, err = k.wasmKeeper.Sudo(sdkCtx, accContractAddress, msgJSONBz)\n- Line 225: The staking module does not store historical data. By subscribing to hooks, contracts can maintain their own historical records, enabling governance systems to calculate voting power at specific block heights.\n\n**Content Preview:**\n```\n\nThis document provides a technical explanation of the Harpoon module, which allows CosmWasm smart contracts to subscribe to staking module hooks.\n\n\n---\n\n\nThe Harpoon module integrates with the Cosmos SDK staking module through its hooks interface. It acts as an intermediary between the staking module's core functions and CosmWasm smart contracts.\n\n\n---\n\n\nThe module stores subscriptions in a way that optimizes for the most frequent operation: retrieving all contracts subscribed to a specific hook type. The storage structure is:\n\n```\n\n---\n\n## 17. How-to\n**File:** /root/neutron/docs/developers/modules/harpoon/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n- Line 14: use cosmwasm_std::{Decimal, Uint128};\n- Line 147: use cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n- Line 306: neutrond tx gov submit-proposal /path/to/proposal.json \\\n- Line 319: neutrond tx gov vote <proposal-id> yes \\\n\n**Content Preview:**\n```\n\nThis guide provides practical instructions for developers who want to use the Harpoon module with their CosmWasm smart contracts.\n\n\n---\n\n```rust\nuse cosmwasm_std::{Decimal, Uint128};\n\n\n---\n\n```rust\nuse cosmwasm_std::{from_binary, Binary, DepsMut, Env, Response, StdResult};\n\n```\n\n---\n\n## 18. Interchain Queries Module\n**File:** /root/neutron/docs/developers/modules/interchain-queries/overview.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 11: While the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n- Line 26: - **Key-Value Query (KV Query)**: This type retrieves values from the Cosmos-SDK KV-storage on a remote chain, using a set of keys. It can be used to get account balances, governance proposals, staking information, smart contract states, or any other data stored in the remote chain's KV-storage. Learn more about how KV queries work [here](/developers/modules/interchain-queries/explanation#how-do-kv-interchain-queries-work).\n- Line 42: 1. **Key-Value queries (KV-queries)**: These queries allow retrieving values stored under specific keys in the remote chain's state.\n- Line 101: 2. **Result Access**: Query results are stored in the module's state and can be accessed by contracts through query methods.\n- Line 104: The module is designed to be easily integrated with CosmWasm contracts, providing a simple interface for cross-chain data access.\n\n**Content Preview:**\n```\n<Info>\nWhile the Interchain Queries module supports both CLI commands and smart contract integration, most practical applications are implemented through CosmWasm smart contracts. Smart contracts provide more sophisticated handling of query results, automatic processing of updates, and integration with complex application logic.\n</Info>\n\n---\n\n\n- **Key-Value Query (KV Query)**: This type retrieves values from the Cosmos-SDK KV-storage on a remote chain, using a set of keys. It can be used to get account balances, governance proposals, staking information, smart contract states, or any other data stored in the remote chain's KV-storage. Learn more about how KV queries work [here](/developers/modules/interchain-queries/explanation#how-do-kv-interchain-queries-work).\n\n\n---\n\n\n1. **Key-Value queries (KV-queries)**: These queries allow retrieving values stored under specific keys in the remote chain's state.\n\n```\n\n---\n\n## 19. How To\n**File:** /root/neutron/docs/developers/modules/interchaintxs/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 5: This guide provides practical examples for implementing interchain transactions in CosmWasm smart contracts, focusing on registering interchain accounts and executing remote transactions.\n- Line 8: The Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands. All interactions must be programmed into smart contracts.\n- Line 13: ### Using CosmWasm\n- Line 15: In your CosmWasm contract, implement the registration as follows:\n- Line 123: // Store the channel information\n\n**Content Preview:**\n```\n\nThis guide provides practical examples for implementing interchain transactions in CosmWasm smart contracts, focusing on registering interchain accounts and executing remote transactions.\n\n\n---\n\n<Warning>\nThe Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands. All interactions must be programmed into smart contracts.\n</Warning>\n\n---\n\n\n### Using CosmWasm\n\n```\n\n---\n\n## 20. Reference\n**File:** /root/neutron/docs/developers/modules/interchaintxs/reference.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 9: The Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands.\n- Line 214: The module only supports query CLI commands. There are no transaction CLI commands as the module is exclusively designed for CosmWasm smart contract integration.\n- Line 315: The module parameters are stored in the params subspace:\n- Line 328: The module stores minimal state in the blockchain:\n- Line 332: Stores the code ID threshold for determining fee requirements during ICA registration.\n\n**Content Preview:**\n```\n<Warning>\nThe Interchain Transactions module is designed exclusively for CosmWasm smart contracts. Individual users cannot directly register interchain accounts or submit transactions through CLI commands.\n</Warning>\n\n---\n\n<Info>\nThe module only supports query CLI commands. There are no transaction CLI commands as the module is exclusively designed for CosmWasm smart contract integration.\n</Info>\n\n---\n\n\nThe module parameters are stored in the params subspace:\n\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "282e56c5-276a-4078-ab14-5f3599fc06d8",
            "tool_call_id": "call_KSg1cBorlXvru88l3kEC91zs",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "",
            "additional_kwargs": {
                "tool_calls": [
                    {
                        "id": "call_RjpQSbNtGLAgTOLfQPi8BfUJ",
                        "function": {
                            "arguments": "{\"query\": \"instantiate-everyone flag neutrond tx wasm store\", \"section\": \"developers\", \"max_results\": 10}",
                            "name": "search"
                        },
                        "type": "function"
                    }
                ],
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 750,
                    "prompt_tokens": 18017,
                    "total_tokens": 18767,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 704,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 11136
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C57uTEPXcwtypr6BKNueeclSwov5J",
                "service_tier": "default",
                "finish_reason": "tool_calls",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--ab3ce938-3f60-4afc-bae9-ebd97a1cf11f-0",
            "example": false,
            "tool_calls": [
                {
                    "name": "search",
                    "args": {
                        "query": "instantiate-everyone flag neutrond tx wasm store",
                        "section": "developers",
                        "max_results": 10
                    },
                    "id": "call_RjpQSbNtGLAgTOLfQPi8BfUJ",
                    "type": "tool_call"
                }
            ],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 18017,
                "output_tokens": 750,
                "total_tokens": 18767,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 11136
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 704
                }
            }
        },
        {
            "content": "Found 10 result(s) for \"instantiate-everyone flag neutrond tx wasm store\":\n\n## 1. Introduction to CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/introduction_to_cosmwasm.mdx\n**Section:** developers\n**Relevance Score:** 20\n\n**Matching lines:**\n- Line 2: title: \"Introduction to CosmWasm\"\n- Line 6: This tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n- Line 10: Let's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n- Line 12: The counter contract template can be found in [this GitHub repository](https://github.com/CosmWasm/cw-template).\n- Line 56: `State` handles the state of the database where smart contract data is stored and accessed.\n\n**Content Preview:**\n```\n---\ntitle: \"Introduction to CosmWasm\"\ndescription: \"A gentle introduction to smart contract development on Neutron\"\n\n---\n\n\nThis tutorial provides a gentle introduction to smart contract development on Neutron using CosmWasm. You'll learn the fundamentals of smart contracts and how to build them step by step.\n\n\n---\n\n\nLet's examine what a smart contract is and how it works under the hood. The following is a minimal contract that stores a counter value which can be incremented and queried by anyone.\n\n```\n\n---\n\n## 2. Interchain Accounts with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_ica.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Accounts with CosmWasm\"\n- Line 23: - Have a basic understanding of CosmWasm smart contract development\n- Line 25: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 29: Start by creating a new CosmWasm project using cargo-generate:\n- Line 32: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-ica-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Accounts with CosmWasm\"\ndescription: \"Learn how to build smart contracts that utilize interchain accounts to execute transactions on other chains\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 3. Interchain Queries with CosmWasm\n**File:** /root/neutron/docs/developers/tutorials/cosmwasm_icq.mdx\n**Section:** developers\n**Relevance Score:** 18\n\n**Matching lines:**\n- Line 2: title: \"Interchain Queries with CosmWasm\"\n- Line 22: - Have a basic understanding of CosmWasm smart contract development\n- Line 24: - Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n- Line 28: Start by creating a new CosmWasm project using cargo-generate:\n- Line 31: cargo generate --git https://github.com/CosmWasm/cw-template.git --name neutron-icq-example\n\n**Content Preview:**\n```\n---\ntitle: \"Interchain Queries with CosmWasm\"\ndescription: \"Learn how to build smart contracts that query data from other blockchains using Neutron's ICQ module\"\n\n---\n\n\n- Have a basic understanding of CosmWasm smart contract development\n- Be familiar with [Neutron's architecture](/developers/overview)\n\n---\n\n- Be familiar with [Neutron's architecture](/developers/overview)\n- Have completed the [Introduction to CosmWasm](/developers/tutorials/introduction_to_cosmwasm) tutorial\n\n```\n\n---\n\n## 4. How-to\n**File:** /root/neutron/docs/developers/modules/contractmanager/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 12: // Example of a proper IBC acknowledgment handler in CosmWasm\n- Line 17: // Store the data instead of processing it immediately\n- Line 30: 1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n- Line 31: 2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n- Line 42: neutrond query contractmanager failures [contract-address]\n\n**Content Preview:**\n```\n```rust\n// Example of a proper IBC acknowledgment handler in CosmWasm\n#[entry_point]\n\n---\n\n        SudoMsg::Response { request, data } => {\n            // Store the data instead of processing it immediately\n            PENDING_RESPONSES.save(deps.storage, &data)?;\n\n---\n\n\n1. **Keep Sudo Handlers Light**: Due to gas limitations, sudo handlers should only store data without complex processing\n2. **Separate Processing Logic**: Use separate execute messages to process the stored data\n```\n\n---\n\n## 5. Reference\n**File:** /root/neutron/docs/developers/modules/harpoon/reference.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 8: The Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n- Line 91: neutrond query harpoon subscribed-contracts [hook-type]\n- Line 99: neutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n- Line 140: The module stores subscriptions with the following structure:\n- Line 173: - **StoreKey**: `\"harpoon\"`\n\n**Content Preview:**\n```\n\nThe Harpoon module allows CosmWasm smart contracts to subscribe to staking module hooks for tracking historical voting power and other staking events.\n\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts [hook-type]\n```\n\n---\n\n```bash\nneutrond query harpoon subscribed-contracts HOOK_TYPE_AFTER_VALIDATOR_CREATED\n```\n```\n\n---\n\n## 6. How To\n**File:** /root/neutron/docs/developers/modules/interchain-queries/how-to.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 16: Go to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n- Line 26: neutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 44: neutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\n- Line 54: Visit [CosmosHub's chain registry page](https://github.com/cosmos/chain-registry/blob/master/cosmoshub/chain.json), select an RPC node from the `apis` section, and use it in `gaiad` queries with the `--node` flag.\n- Line 153: Create an `execute` message handler in your contract to register the Interchain Query using the helper function as a [submessage](https://docs.cosmwasm.com/docs/smart-contracts/message/submessage/).\n\n**Content Preview:**\n```\n\nGo to [Neutron's chain registry page](https://github.com/cosmos/chain-registry/blob/master/neutron/chain.json), choose an RPC node from the `apis` section, and use it in subsequent `neutrond` queries with the `--node` flag.\n\n\n---\n\n```\nneutrond q ibc connection end connection-0 --node https://rpc-voidara.neutron-1.neutron.org\nconnection:\n\n---\n\n```\nneutrond q ibc client state 07-tendermint-0 --node https://rpc-voidara.neutron-1.neutron.org\nclient_state:\n```\n\n---\n\n## 7. ICTX Explanation\n**File:** /root/neutron/docs/developers/modules/interchaintxs/explanation.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 5: The Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n- Line 13: A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n- Line 88: The module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n- Line 113: - Failed callback information is stored in the Contract Manager state for potential resubmission\n- Line 158: neutrond q ibc channel end <src-port> <src-channel-id>\n\n**Content Preview:**\n```\n\nThe Interchain Transactions module leverages IBC (Inter-Blockchain Communication) to enable CosmWasm smart contracts on Neutron to control accounts and execute transactions on remote chains. This document explains the key concepts and mechanics behind this functionality.\n\n\n---\n\ngraph TB\n    A[CosmWasm Contract] -->|MsgRegisterInterchainAccount| B[Interchaintxs Module]\n    A -->|MsgSubmitTx| B\n\n---\n\n\nThe module uses the CosmWasm `Sudo` mechanism to call back into the contract when IBC events occur. Each callback follows a specific message format that the contract must implement to properly handle the events.\n\n```\n\n---\n\n## 8. Chain Integration Tests\n**File:** /root/neutron/docs/developers/tutorials/integration-tests/chain.mdx\n**Section:** developers\n**Relevance Score:** 12\n\n**Matching lines:**\n- Line 21: go get github.com/neutron-org/neutron/v4/cmd/neutrond\n- Line 26: cargo add cosmwasm-std --features testing\n- Line 203: codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n- Line 207: executeMsg := &wasmtypes.MsgExecuteContract{\n- Line 338: codeID := s.storeContract(\"artifacts/test_contract.wasm\")\n\n**Content Preview:**\n```\ngo mod init neutron-integration-tests\ngo get github.com/neutron-org/neutron/v4/cmd/neutrond\ngo get github.com/cosmos/cosmos-sdk/testutil\n\n---\n\n# For Rust-based contract tests\ncargo add cosmwasm-std --features testing\ncargo add cw-multi-test\n\n---\n\n    // Deploy a contract that uses IBC\n    codeID := s.storeContract(\"artifacts/ibc_contract.wasm\")\n    contractAddr := s.instantiateContract(codeID, `{\"channel\":\"channel-0\"}`)\n```\n\n---\n\n## 9. How-to\n**File:** /root/neutron/docs/developers/modules/admin/how-to.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 43: Neutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n- Line 53: These interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n- Line 55: ### Method 2: Direct WASM Execute\n- Line 57: For programmatic proposal submission, use WASM execute messages to the Main DAO contract:\n- Line 61: neutrond tx wasm execute neutron1436kxs0w2es6xlqpp9rd35e3d0cjnw4sv8j3a7483sgks29jqwgshlt6zh \\\n\n**Content Preview:**\n```\n<Warning>\nNeutron does **not** use the standard Cosmos SDK `gov` module for proposals. All governance goes through the Main DAO contract via WASM execution.\n</Warning>\n\n---\n\n\nThese interfaces handle the complexity of WASM message formatting and provide user-friendly proposal creation workflows.\n\n\n---\n\n\n### Method 2: Direct WASM Execute\n\n```\n\n---\n\n## 10. Mechanism\n**File:** /root/neutron/docs/developers/modules/contractmanager/explanation.mdx\n**Section:** developers\n**Relevance Score:** 10\n\n**Matching lines:**\n- Line 25: 3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n- Line 26: 4. Contract owners can later query these stored failures and handle them appropriately.\n- Line 35: D -->|Store Failure| E[KVStore]\n- Line 43: The SudoLimitWrapper is a middleware that intercepts calls to the Wasm module's Sudo method. It:\n- Line 47: 3. **Records Failures**: Stores sudo call failures for later retrieval and potential resubmission.\n\n**Content Preview:**\n```\n2. If the sudo call succeeds, the state changes are committed.\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n---\n\n3. If the sudo call fails, the error is captured and stored rather than propagated, allowing the IBC workflow to continue.\n4. Contract owners can later query these stored failures and handle them appropriately.\n\n\n---\n\n    B -->|On Error| D[Contract Manager]\n    D -->|Store Failure| E[KVStore]\n    F[Contract Owner] -->|Query| E\n```\n\n---\n\n",
            "additional_kwargs": {},
            "response_metadata": {},
            "type": "tool",
            "name": "search",
            "id": "a0245943-f5eb-441d-b7c0-3f010e5083db",
            "tool_call_id": "call_RjpQSbNtGLAgTOLfQPi8BfUJ",
            "artifact": null,
            "status": "success"
        },
        {
            "content": "{\n  \"Upload my compiled smart contract to Neutron mainnet with automatic gas estimation\": {\n    \"popularity\": 95,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --gas-adjustment 1.3 -y\"\n  },\n  \"Upload a CosmWasm contract to the Pion testnet\": {\n    \"popularity\": 85,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from testkey --chain-id pion-1 --node https://rpc-palvus.pion-1.neutron.org:443 --gas auto --gas-adjustment 1.3 -y\"\n  },\n  \"Upload a contract and allow anyone to instantiate it\": {\n    \"popularity\": 80,\n    \"command\": \"neutrond tx wasm store ./artifacts/open_contract.wasm --instantiate-everyone --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --gas-adjustment 1.3 -y\"\n  },\n  \"Upload a contract but restrict instantiation to my wallet only\": {\n    \"popularity\": 75,\n    \"command\": \"neutrond tx wasm store ./artifacts/restricted_contract.wasm --instantiate-only-address neutron1abcdxxxxxxxxxxxxxxxxxxxx --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --gas-adjustment 1.3 -y\"\n  },\n  \"Upload a large contract with a manually-set high gas limit\": {\n    \"popularity\": 60,\n    \"command\": \"neutrond tx wasm store ./artifacts/big_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas 3000000 -y\"\n  },\n  \"Upload a contract and pay fees in untrn with a custom gas price\": {\n    \"popularity\": 55,\n    \"command\": \"neutrond tx wasm store ./artifacts/fee_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --gas-prices 0.025untrn -y\"\n  },\n  \"Upload my contract but broadcast the transaction in sync mode\": {\n    \"popularity\": 50,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto -y --broadcast-mode sync\"\n  },\n  \"Upload a contract to a local devnet\": {\n    \"popularity\": 45,\n    \"command\": \"neutrond tx wasm store ./artifacts/dev_contract.wasm --from local --chain-id localnet --node tcp://localhost:26657 --gas auto -y\"\n  },\n  \"Upload a contract using my Ledger hardware wallet\": {\n    \"popularity\": 40,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from ledger --keyring-backend test --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto -y\"\n  },\n  \"Generate the store-contract transaction JSON without broadcasting\": {\n    \"popularity\": 35,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --generate-only > store_contract.json\"\n  },\n  \"Upload a contract and sign the transaction offline later\": {\n    \"popularity\": 30,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from offline_key --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --generate-only | jq . > unsigned_tx.json\"\n  },\n  \"Upload a contract with an explicit gas-adjustment factor\": {\n    \"popularity\": 28,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --gas-adjustment 1.5 -y\"\n  },\n  \"Upload a contract and wait for block confirmation (block mode)\": {\n    \"popularity\": 26,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto -y --broadcast-mode block\"\n  },\n  \"Upload a gzipped contract after decompressing on-the-fly\": {\n    \"popularity\": 20,\n    \"command\": \"gunzip -c ./artifacts/compressed_contract.wasm.gz | neutrond tx wasm store - --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto -y\"\n  },\n  \"Upload a contract directly from a GitHub release asset\": {\n    \"popularity\": 18,\n    \"command\": \"curl -L https://github.com/myorg/contract/releases/download/v1.0.0/contract.wasm -o /tmp/contract.wasm && neutrond tx wasm store /tmp/contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto -y\"\n  },\n  \"Prepare a multisig store-contract transaction for later signing\": {\n    \"popularity\": 15,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from multisig-wallet --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --generate-only > store_multisig_msg.json\"\n  },\n  \"Upload a contract with a higher gas price to speed up inclusion\": {\n    \"popularity\": 14,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto --gas-prices 0.05untrn --gas-adjustment 1.2 -y\"\n  },\n  \"Simulate a contract upload to estimate gas without broadcasting\": {\n    \"popularity\": 12,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas simulate\"\n  },\n  \"Upload a contract and attach a memo to the transaction\": {\n    \"popularity\": 8,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from mykey --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas auto -y --memo \\\"Initial contract upload\\\"\"\n  },\n  \"Create an offline JSON for a large multisig contract upload with manual gas\": {\n    \"popularity\": 5,\n    \"command\": \"neutrond tx wasm store ./artifacts/my_contract.wasm --from multisig-wallet --chain-id neutron-1 --node https://rpc-kralum.neutron-1.neutron.org:443 --gas 2500000 --generate-only > store_multisig_large.json\"\n  }\n}",
            "additional_kwargs": {
                "refusal": null
            },
            "response_metadata": {
                "token_usage": {
                    "completion_tokens": 4907,
                    "prompt_tokens": 21774,
                    "total_tokens": 26681,
                    "completion_tokens_details": {
                        "accepted_prediction_tokens": 0,
                        "audio_tokens": 0,
                        "reasoning_tokens": 3200,
                        "rejected_prediction_tokens": 0
                    },
                    "prompt_tokens_details": {
                        "audio_tokens": 0,
                        "cached_tokens": 17920
                    }
                },
                "model_name": "o3-2025-04-16",
                "system_fingerprint": null,
                "id": "chatcmpl-C57ush8U59r7cAxxdSZaPGiJfC2r7",
                "service_tier": "default",
                "finish_reason": "stop",
                "logprobs": null
            },
            "type": "ai",
            "name": null,
            "id": "run--48953446-7a38-4f4e-bcd0-27c246b8aced-0",
            "example": false,
            "tool_calls": [],
            "invalid_tool_calls": [],
            "usage_metadata": {
                "input_tokens": 21774,
                "output_tokens": 4907,
                "total_tokens": 26681,
                "input_token_details": {
                    "audio": 0,
                    "cache_read": 17920
                },
                "output_token_details": {
                    "audio": 0,
                    "reasoning": 3200
                }
            }
        }
    ]
}